---
title: "Hands-on Exercise 1B: Chloropeth Mapping with R"
---

## What is Choropleth Mapping?

Choropleth mapping is used to symbolise countries/provinces/states/countries using area patterns/graduated colours. E.g. portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

In this chapter, we will learn to plot choropleth maps using **tmap** package.

## Getting Started

Beside **tmap** package, four other R packages will be used. They are:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.

Since **readr**, **tidyr**, and **dplyr** are part of **tidyverse** package, we only need to install **tidyverse** instead of installing them individually.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```



## Importing Data into R

### The Data

These data sets will be used to create the choropleth map:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. This is geospatial data, consisting of the geographical boundary of Singapore at the planning subzone level.

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data file, it doesn't contain any coordinate values but it's PA and SZ values can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

### Importing Geospatial Data into R

We use the st_read() function of sf package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

We examine the content of `mpsz`:

```{r}
mpsz
```

### Importing Attribute Data into R

Next, we will import *respopagsex2011to2020.csv* file into RStudio and save the file into an R dataframe called *popdata*.

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

### Data Preparation

We need to first prepare a data table with year 2020 values. The data table should include the following variables:

-   YOUNG: age group 0 to 4 until age group 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

-   PA

-   SZ

#### Data wrangling

The following data wrangling and transformation functions will be used:

-   *pivot_wider()* of **tidyr** package, and

-   *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr** package

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

#### Joining the attribute data and geospatial data

We need to convert the values in PA and SZ fields to uppercase, because the SUBZONE_N and PLN_AREA_N fields are in uppercase:

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

Then, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

In the above code chunk, *left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table to ensure that the output will be a simple features data frame.

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## Choropleth Mapping Geospatial Data using *tmap*

### Plotting a choropleth map quickly by using *qtm()*

The code chunk below will draw a standard choropleth map:

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

### Creating a choropleth map by using *tmap*'s elements

Although *qtm()* is very useful for drawing a choropleth map quickly and easily, the disadvantage is that it is harder to customise the aesthetics of individual layers. To do so, we use **tmap**'s drawing elements:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

Next, we will learn about tmap functions used to plot these elements.

#### Drawing a base map

The basic building block of **tmap** is *tm_shape()* followed by one or more layer elements such as *tm_fill()* and *tm_polygons()*.

In the code chunk below, *tm_shape()* is used to define the input data (i.e., *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning subzone polygons:

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

#### Drawing a choropleth map using tm_polygons()

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

Note: by default, missing value will be shaded in grey.

#### Drawing a choropleth map using tm_fill() and tm_border()

The code chunk below draws a choropleth map by using *tm_fill()* alone.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

Notice that the planning subzones are shared according to the respective dependency values.

To add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

Notice that light-gray border lines have been added on the choropleth map.

The *alpha* argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).

Beside *alpha* argument, there are three other arguments for *tm_borders()*, they are:

-   *col* = border colour,

-   *lwd* = border line width. The default is 1, and

-   *lty* = border line type. The default is "solid".

### Data classification methods of *tmap*

Most choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.

To define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* will be used.

#### Plotting choropleth maps with built-in classification methods

This is quantile data classification that used 5 classes:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

In the code chunk below, equal data classification is used:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

#### Plotting choropleth map with custom break

### Colour Scheme

### Map Layouts

### Drawing Small Multiple Choropleth Maps

### Mapping Spatial Object Meeting a Selection Criterion
