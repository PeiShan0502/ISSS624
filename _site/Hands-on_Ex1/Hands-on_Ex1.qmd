---
title: "Hands-on Exercise 1A: Geospatial Data Wrangling with R"
---

## Overview

In this hands-on exercise, I learn how to import and wrangle geospatial data using appropriate R packages.

## Getting Started

In this hands-on exercise, two R packages will be used. They are:

-   [**sf**](https://r-spatial.github.io/sf/) for importing, managing, and processing geospatial data, and

-   [**tidyverse**](https://www.tidyverse.org/) for performing data science tasks such as importing, wrangling and visualising data (not specific to geospatial data).

The code chunk below installs and load **sf** and **tidyverse** packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)

```

Furthermore, the tidyverse package consists of a family of R packages. In this hands-on exercise, the following packages will be used:

-   **readr** for importing csv data,

-   **readxl** for importing Excel worksheet,

-   **tidyr** for manipulating data,

-   **dplyr** for transforming data, and

-   **ggplot2** for visualising data

Note: In the above code chunk, [`p_load`](https://cran.r-project.org/web/packages/pacman/pacman.pdf) function pf [**pacman**](https://github.com/trinker/pacman) package is used to install and load **sf** and **tidyverse** packages into R environment.

## Data Sources

We will extract the following data sets from these sources:

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)

-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)

-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)

-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

### Extracting the geospatial data sets

At the `Hands-on_Ex1` folder, we create a sub-folder called `data`. Then, inside the `data` sub-folder, we create two sub-folders and name them `geospatial` and `aspatial` respectively.

We place `Master Plan 2014 Subzone Boundary (Web)`, `Pre-Schools Location`, and `Cycling Path` zipped files into the `geospatial` sub-folder and unzip them. Then, copy the unzipped files from their respective sub-folders and place them inside `geospatial` sub-folder.

### Extracting the aspatial data set

We place the Singapore AirBnB listing data (`listing.csv`) into the `aspatial` sub-folder.

## Importing Geospatial Data

In this section, we will learn how to import the following geospatial data into R by using [`st_read()`](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:

-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,

-   `CyclingPath`, a line feature layer in ESRI shapefile format, and

-   `PreSchool`, a point feature layer in kml file format.

### Importing polygon feature data

The code chunk below uses *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame. When the input geospatial data is in shapefile format, two arguments will be used:

-   `dsn` to define the data path

-   `layer` to provide the shapefile name

No extension such as .shp, .dbf, .prj and .shx are needed.

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

The message above reveals that the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame. `mpsz` is in **svy21** projected coordinates systems. The bounding box provides the x extend and y extend of the data.

### Importing polyline feature data in shapefile form

The code chunk below uses st_read() function of sf package to import Cycling Path shapefile into R as line feature data frame.

```{r}
cyclingpath = st_read(dsn = 'data/geospatial', 
                      layer = 'CyclingPathGazette')
```

The message above reveals that there are a total of 2558 features and 2 fields in `cyclingpath` linestring feature data frame and it is in **svy21** projected coordinates system too.

### Importing GIS data in kml format

The `PreSchoolsLocation` is in kml format. The code chunk below will be used to import it into R. Notice that the kml file extension is provided:

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

The message above reveals that `preschool` is a point feature data frame. There are a total of 2290 features and 2 fields. preschool is also in **wgs84** coordinates system (different from the previous two simple feature data frame).

## Checking the Content of a Simple Feature Data Frame

In this sub-section, we will look at different ways to retrieve information related to the content of a single feature data frame.

### Working with *st_geometry()*

The column in the sf data frame that contains the geometries is a list, of class `sfc`. We can retrieve this list by using *st_geometry()* as shown in the code chunk below:

```{r}
st_geometry(mpsz)
```

### Working with *glimpse()*

We use *glimpse()* of the **dplyr** package to learn more about the associated attribute information in the data frame:

```{r}
glimpse(mpsz)
```

*glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.

### Working with *head()*

We use [*head()*](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) to reeal complete information of a feature object:

```{r}
head(mpsz, n=5)
```

| Note: n=5 specifies the number of records to display.

## Plotting the Geospatial Data

In geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. We use *plot()* of R Graphic to do this:

```{r}
plot(mpsz)
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below:

```{r}
plot(st_geometry(mpsz))
```

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below:

```{r}
plot(mpsz['PLN_AREA_N'])
```

| Note:Â *plot()* is meant for plotting the geospatial object for quick look.

## Working with Projection

To perform geoprocessing using two geospatial data, need to ensure both geospatial data are projected using similar coordinate system.

Here we will learn how to project a simple feature data frame from one coordinate system to another coordinate system. This is known as **projection transformation**.

### Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

This is an example the coordinate system of `mpsz` simple feature data frame by using *st_crs()* of *sf* package as shown in the code chunk below:

```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

In order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below:

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Then let's check the CSR again:

```{r}
st_crs(mpsz3414)
```

Notice that the EPSG code is 3414 now.

### Transforming the projection of preschool from wgs84 to svy21

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

Let us take preschool simple feature data frame as an example. Running the code chunk below reveals that it is in wgs84 coordinate system:

```{r}
st_geometry(preschool)
```

This is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathematically.

Let us perform the projection transformation by using the code chunk below:

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
```

Now displaying the content of preschool3414 sf data frame by running the code chunk below:

```{r}
st_geometry(preschool3414)
```

Notice that it is in svy21 projected coordinate system now.

## Importing and Converting An Aspatial Data

For the Singapore Airbnb listing data, this is aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.

We will learn how to import an aspatial data into R environment and save it as a tibble data frame. Then convert it into a simple feature data frame.

The `listings.csv` data downloaded from Airbnb will be used.

### Importing the aspatial data

Since `listings` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).

```{r}
listings <- read_csv('data/aspatial/listings.csv')
```

After importing the data file into R, it is important for us to examine if the data file has been imported correctly.

The code chunk below shows *list()* of Base R instead of *glimpse()* is used to do the job.

```{r}
list(listings)
```

The output reveals that `listing` tibble data frame consists of 3,483 rows and 18 columns. Two useful fields we are going to use in the next phase are `latitude` and `longitude`. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.

### Creating a simple feature data frame from an aspatial data frame

This converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages:

```{r}
listings_sf <- st_as_sf(listings, coords = c('longitude', 'latitude'),
                        crs=4326) %>%
  st_transform(crs = 3414)
```

Useful notes:

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country\'s epsg code by referring to [epsg.io](https://epsg.io/).

-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

We examine the content of this newly created simple feature data frame:

```{r}
glimpse(listings_sf)
```

Notice that a new column calledÂ `geometry`Â has been added into the data frame. On the other hand, theÂ `longitude`Â andÂ `latitude`Â columns have been dropped from the data frame.

## Geoprocessing with sf package

In this section, you will learn how to perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### Buffering

Consider the following scenario: The authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. You are tasked to determine the extent of the land required to be acquired and their total area.

[Solution:]{.underline}

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs = 30)
```

Then we calculate the area of the buffers:

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, derive the total land involved:

```{r}
sum(buffer_cycling$AREA)
```

**Mission Accomplished!!! \^\_\^**

### Point-in-polygon count

How to find the number of pre-schools in each Planning Subzone?

The code chunk below first identifies pre-schools located inside each planning subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html), then [length()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) is used to calculate the number of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))
```

Note: don't confuse with [st_intersection()](https://r-spatial.github.io/sf/reference/geos_binary_ops.html).

To check summary statistics of the newly derived *PreSch Count* field:

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-schools, theÂ [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html)Â ofÂ **dplyr**Â package is used:

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

To calculate the density of pre-schools by planning subzone:

1.  Derive the area of each planning subzone

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

2.  Compute the density by using [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html)Â ofÂ [**dplyr**](https://dplyr.tidyverse.org/)Â package:

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## Exploratory Data Analysis (EDA)

Here, we will learn how to use appropriateÂ [ggplot2](https://ggplot2.tidyverse.org/)Â functions to create graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

This is easy to use but the output is far from presentable and this function has limited room for further customisation.

In the code chunk below, we use appropriate **ggplot2** functions:

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-schools even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

We use ggplot2 method to plot a scatterplot showing the relationship between Pre-school Density and Pre-school count:

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
