[
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "",
    "text": "In this exercise, we will learn how to compute spatial weights using R."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#overview",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#overview",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "",
    "text": "In this exercise, we will learn how to compute spatial weights using R."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#the-study-area-and-data",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#the-study-area-and-data",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "The Study Area and Data",
    "text": "The Study Area and Data\nThese two data sets will be used:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\nGetting Started\nFirst need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Getting the Data into R Environment",
    "text": "Getting the Data into R Environment\n\nImport ESRI shapefile into R environment\nThe geospatial data is in ESRI shapefile format.\nuse st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\PeiShan0502\\ISSS624\\Hands-on_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImport csv file into R environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nUpdate the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#visualising-regional-development-indicator",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#visualising-regional-development-indicator",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Visualising Regional Development Indicator",
    "text": "Visualising Regional Development Indicator\nprepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nuse poly2nb() of spdep package to compute contiguity weight matrices for the study area.\nThis function builds a neighbours list based on regions with contiguous boundaries. you can pass a “queen” argument that takes TRUE or FALSE as options. Default is set to TRUE, i.e., will return a list of first order neighbours using the Queen criteria.\n\nComputing (QUEEN) contiguity based neighbours\ncompute Queen contiguity weight matrix:\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrieve the county name of Polygon ID=1:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nretrieve the GDPPC of these five countries:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nCreating (ROOK) contiguity based neighbours\ncompute Rook contiguity weight matrix:\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one neighbour.\n\n\nVisualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typical method for this will be polygon centroids.\nGetting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. we need the coordinates in a separate dataframe for this to work. To do this, we will use a mapping function - this applies a given function (st_centroid) to each element of a vector (geometry column of us.bound) and returns a vector of the same length.\nwill be using map_dbl variation of map from the purrr package.\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nSimilar method to get latitude, just access the second value in each centroid with [[2]]\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nThen use cbind to put longitude and latitude into the same object:\n\ncoords &lt;- cbind(longitude, latitude)\n\nCheck first few observations to see if things are formatted correctly:\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\nPlotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\nPlotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\nPlotting both Queen and Rook contiguity based neighbours maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#computing-distance-based-neighbours",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#computing-distance-based-neighbours",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Computing distance based neighbours",
    "text": "Computing distance based neighbours\nDerive distance-based weight matrices by using dnearneigh() of spdep package –&gt; This function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\nDetermine the cut-off distance\nDetermine upper limit for distance using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe above summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\ncompute the distance weight matrix by using dnearneigh()\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nuse str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAlternatively, combine table() and card() of spdep to display the structure of the weight matrix:\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\nPlotting fixed distance weight matrix\nPlot distance-weight matrix:\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNotice that each county has six neighbours, no less no more!\n\nPlotting distance based neighbours\nPlot weight matrix:\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#weights-based-on-idw",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#weights-based-on-idw",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Weights based on IDW",
    "text": "Weights based on IDW\nDerive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values, one drawback is that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\nFor this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix:\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#application-of-spatial-weight-matrix",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#application-of-spatial-weight-matrix",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\nHere, we learn how to create four different spatial lagged variables:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\nSpatial lag with row-standardized weights\ncompute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame:\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial lag as a sum of neighboring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nResult:\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table:\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nFYI - The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-Home Exercise 1: Geospatial Analytics for Public Good",
    "section": "",
    "text": "Exploratory Spatial Data Analysis (ESDA) hold tremendous potential to address complex problems facing society. In this take-home exercise, we apply appropriate Local Indicators of Spatial Association (GLISA) and Emerging Hot Spot Analysis (EHSA) to undercover the spatial and spatio-temporal mobility patterns of public bus passengers in Singapore."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#overview",
    "href": "Take-home_Ex1/Take-home_Ex1.html#overview",
    "title": "Take-Home Exercise 1: Geospatial Analytics for Public Good",
    "section": "",
    "text": "Exploratory Spatial Data Analysis (ESDA) hold tremendous potential to address complex problems facing society. In this take-home exercise, we apply appropriate Local Indicators of Spatial Association (GLISA) and Emerging Hot Spot Analysis (EHSA) to undercover the spatial and spatio-temporal mobility patterns of public bus passengers in Singapore."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "href": "Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "title": "Take-Home Exercise 1: Geospatial Analytics for Public Good",
    "section": "Getting Started",
    "text": "Getting Started\nIn this take-home exercise, the following R packages will be used:\n\nsf for geospatial data handling\ntidyverse for non-spatial data handling\ntmap for thematic mapping\nknitr for creating html table.\n\n\npacman::p_load(sf, sfdep, tidyverse, tmap, knitr)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#the-data",
    "href": "Take-home_Ex1/Take-home_Ex1.html#the-data",
    "title": "Take-Home Exercise 1: Geospatial Analytics for Public Good",
    "section": "The Data",
    "text": "The Data\n\nImporting geospatial data\nFirstly, we import Bus Stops Location from LTA DataMall. This provides information about all the bus stops currently being serviced by buses, including the bus stop code (identifier) and location coordinates:\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\PeiShan0502\\ISSS624\\Take-home_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nFrom the output, we can see that busstop is in SVY21 coordinates system. To learn more, we can apply glimpse() of dplyr package:\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\nFrom the above two outputs, we can see that there are 5161 points with 3 fields (BUS_STOP_N, BUS_ROOF_N, LOC_DESC).\n\n\nImporting aspatial data\nNext, we will import origin_destination_bus_202310.csv into R by using read_csv() of readr package. The output is R data frame class. This data set returns the number of trips by weekdays and weekends from the origin to destination bus stops in October 2023:\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\", show_col_types = FALSE)\n\nSimilarly, we can use glimpse() to see all the columns and their data type in the R data frame:\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nThe fields ORIGIN_PT_CODE and DESTINATION_PT_CODE represent the bus stop number at the origin and destination. They need to be converted into factor data type so that we can geocode/georeference with the Bus Stops Location geospatial data later.\nThe code chunk below converts them into factor data type:\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\nNow we check that both fields are in factor data type now:\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 20281, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#task-1-geovisualisation-and-analysis",
    "href": "Take-home_Ex1/Take-home_Ex1.html#task-1-geovisualisation-and-analysis",
    "title": "Take-Home Exercise 1: Geospatial Analytics for Public Good",
    "section": "Task 1: Geovisualisation and Analysis",
    "text": "Task 1: Geovisualisation and Analysis\nWith reference to the time intervals provided in the table below, we would like to compute the passenger trips generated by origin at the hexagon level.\n\n\n\nPeak hour period\nBus tap on time (in 24hr format)\n\n\n\n\nWeekday morning peak\n0600 to 0900\n\n\nWeekday afternoon peak\n1700 to 2000\n\n\nWeekend/holiday morning peak\n1100 to 1400\n\n\nWeekend/holiday evening peak\n1600 to 1900\n\n\n\n\nData Preparation\n\nFilter by peak hour period\nThe output of the code chunks below shows the number of passenger trips for each bus stop in each peak hour period:\nWeekday morning peak: 6am to 9am\n\norigin6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nWeekday afternoon peak: 5pm to 8pm\n\norigin17_20 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 17 &\n           TIME_PER_HOUR &lt;= 20) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nWeekend/holiday morning peak: 11am to 2pm\n\norigin11_14 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 11 &\n           TIME_PER_HOUR &lt;= 14) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nWeekend/holiday evening peak: 4pm to 7pm\n\norigin16_19 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 &\n           TIME_PER_HOUR &lt;= 19) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nWe save the outputs in rds format for future use:\n\nwrite_rds(origin6_9, \"data/rds/origin6_9.rds\")\nwrite_rds(origin17_20, \"data/rds/origin17_20.rds\")\nwrite_rds(origin11_14, \"data/rds/origin11_14.rds\")\nwrite_rds(origin16_19, \"data/rds/origin16_19.rds\")\n\n\n\nCreate Hexagon layer\nCreate hexagon layer over Bus Stops Location:\nThe code chunk below is used to first create a hexagon layer over the Bus Stops Location (busstops), then find the number of bus stops in each hexagon. We also remove hexagons where there are no bus stops.\nAn explanation of key functions used:\n\nst_make_grid: for hexagon, the argument cellsize refers to the distance between opposite edges. Since the task requires us to create a hexagon layer such that the perpendicular distance between the centre of the hexagon and its edges is 250m, this implies that the distance between opposite edges is 500m.\nst_sf: convert sfc_POLYGON object (returned by st_make_grid) to simple feature sf object.\nst_intersects: returns a list of which points are lying in each hexagon.\n\n\narea_honeycomb_grid = st_make_grid(busstop, c(500, 500), what = \"polygons\", square = FALSE)\n\n# Convert to sf object\nhoneycomb_grid_sf = st_sf(area_honeycomb_grid) %&gt;%\n  # add grid ID (giving each hexagon a unique ID)\n  mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))\n\n# count number of points (bus stops) in each grid/hexagon\nhoneycomb_grid_sf$n_colli = lengths(st_intersects(honeycomb_grid_sf, busstop))\n\n# remove grid/hexagons with value of 0 (i.e. no points inside that grid)\nhoneycomb_count = filter(honeycomb_grid_sf, n_colli &gt; 0)\n\n#Note: The n_colli column shows the number of bus stops in each grid/hexagon.\n\n\nst_geometry(honeycomb_count)\n\nGeometry set for 1524 features \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3720.122 ymin: 26193.43 xmax: 48720.12 ymax: 53184.55\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOLYGON ((3970.122 27925.48, 3720.122 28069.81,...\n\n\nPOLYGON ((4220.122 28358.49, 3970.122 28502.83,...\n\n\nPOLYGON ((4470.122 30523.55, 4220.122 30667.89,...\n\n\nPOLYGON ((4720.122 28358.49, 4470.122 28502.83,...\n\n\nPOLYGON ((4720.122 30090.54, 4470.122 30234.88,...\n\n\nWe also confirm that the EPSG code for honeycomb_count is correct (3414 for projected coordinate system SVY21):\n\nst_crs(honeycomb_count)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nGeospatial Data Wrangling\n\nCombining Bus Stop Location and Hexagon layer\nThe output of the code chunk below shows which bus stop is in which hexagon (BUS_STOP_N and grid_id) and the number of bus stops in that hexagon (n_colli).\n\nbusstop_hex &lt;- st_intersection(busstop, honeycomb_count) %&gt;%\n  select(BUS_STOP_N, grid_id, n_colli) %&gt;%\n  st_drop_geometry()\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n#BUS_STOP_N: Bus stop number\n#n_colli: no. of bus stops in each hexagon\n\nWe save the output:\n\nwrite_rds(busstop_hex, \"data/rds/busstop_hex.csv\")\n\n\n\nJoin data frames to get number of trips in each hexagon\nThe output of the code chunk below shows the total number of passenger trips in each hexagon (for Weekday morning peak: 6am to 9am):\n\nhextrips6_9 &lt;- left_join(origin6_9 , busstop_hex,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOT_TRIPS = sum(TRIPS))\n\nBefore continuing, it is good to check for duplicate records. The output of the code chunk below shows that there are no duplicate records:\n\nduplicate6_9 &lt;- hextrips6_9 %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nIf duplicated records are found, the code chunk below can be used to retain the unique records:\n\nunique_hextrips6_9 &lt;- unique(hextrips6_9)\n\nThe code chunks below follow a similar process for the other peak periods:\nWeekday afternoon peak: 5pm to 8pm\n\nhextrips17_20 &lt;- left_join(origin17_20 , busstop_hex,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOT_TRIPS = sum(TRIPS))\n\n# Only take unique records:\nunique_hextrips17_20 &lt;- unique(hextrips17_20)\n\nWeekend/holiday morning peak: 11am to 2pm\n\nhextrips11_14 &lt;- left_join(origin11_14 , busstop_hex,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOT_TRIPS = sum(TRIPS))\n\n# Only take unique records:\nunique_hextrips11_14 &lt;- unique(hextrips11_14)\n\nWeekend/holiday evening peak: 4pm to 7pm\n\nhextrips16_19 &lt;- left_join(origin16_19 , busstop_hex,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOT_TRIPS = sum(TRIPS))\n\n# Only take unique records:\nunique_hextrips16_19 &lt;- unique(hextrips16_19)\n\n\n\nPerform relational join with hexagon data to retain geometric information\nThe output of the code chunks below shows the following information for each peak hour period:\n\ngrid_id: the id for each hexagon\nn_colli: the number of bus stops in each hexagon\nTOT_TRIPS: the number of passenger trips in each hexagon\narea_honeycomb_grid: geometric information of each hexagon\n\nWeekday morning peak: 6am to 9am\n\nhexData6_9 &lt;- left_join(honeycomb_count, \n                            unique_hextrips6_9,\n                            by = c(\"grid_id\" = \"grid_id\"))\n\nWeekday afternoon peak: 5pm to 8pm\n\nhexData17_20 &lt;- left_join(honeycomb_count, \n                            unique_hextrips17_20,\n                            by = c(\"grid_id\" = \"grid_id\"))\n\nWeekend/holiday morning peak: 11am to 2pm\n\nhexData11_14 &lt;- left_join(honeycomb_count, \n                            unique_hextrips11_14,\n                            by = c(\"grid_id\" = \"grid_id\"))\n\nWeekend/holiday evening peak: 4pm to 7pm\n\nhexData16_19 &lt;- left_join(honeycomb_count, \n                            unique_hextrips16_19,\n                            by = c(\"grid_id\" = \"grid_id\"))\n\n\n\n\n\n\n\n\n\n\n\nGeospatial Visualisation\nWe would now like to display the geographical distribution of the passenger trips for each peak hour period:\nWeekday morning peak: 6am to 9am\n\ntm_shape(hexData6_9)+\n  tm_fill(\"TOT_TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at hexagon level on Weekday morning peak (6am to 9am)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\nWeekday afternoon peak: 5pm to 8pm\n\ntm_shape(hexData17_20)+\n  tm_fill(\"TOT_TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at hexagon level on Weekday afternoon peak (5pm to 8pm)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\nWeekend/holiday morning peak: 11am to 2pm\n\ntm_shape(hexData11_14)+\n  tm_fill(\"TOT_TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at hexagon level on Weekend morning peak (11am to 2pm)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\nWeekend/holiday evening peak: 4pm to 7pm\n\ntm_shape(hexData16_19)+\n  tm_fill(\"TOT_TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at hexagon level on Weekday evening peak (4pm to 7pm)\",\n            main.title.position = \"center\",\n            main.title.size = 0.7,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#task-2-local-indicators-of-spatial-association-lisa-analysis",
    "href": "Take-home_Ex1/Take-home_Ex1.html#task-2-local-indicators-of-spatial-association-lisa-analysis",
    "title": "Take-Home Exercise 1: Geospatial Analytics for Public Good",
    "section": "Task 2: Local Indicators of Spatial Association (LISA) Analysis",
    "text": "Task 2: Local Indicators of Spatial Association (LISA) Analysis\n\nDerive fixed distance spatial weights\nBefore we can derive the fixed distance weights, we need to determine the upper limit for distance band first.\nWeekday morning peak: 6am to 9am\n\ngeo6_9 &lt;- sf::st_geometry(hexData6_9)\nnb6_9 &lt;- st_knn(geo6_9, longlat = TRUE)\n\n! Polygon provided. Using point on surface.\n\ndists6_9 &lt;- unlist(st_nb_dists(geo6_9, nb6_9))\n\n! Polygon provided. Using point on surface.\n\n# st_nb_dists() to calculate the nearest neighbour distance. The output is a list of distances for each observation's neighbour list.\n\n\nsummary(dists6_9)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  500.0   500.0   500.0   505.8   500.0  4272.0 \n\n\nThe summary statistics report above shows that the maximum nearest neighbour distance is 4272. Thus, we can use a threshold of 4300 to ensure that each area will have at least one neighbour.\nWe compute the fixed distance weights using the code chunk below:\n\nwm_fd6_9 &lt;- hexData6_9 %&gt;%\n  mutate(nb = st_dist_band(geo6_9,\n                           upper = 4300),\n               wt = st_weights(nb),\n               .before = 1)\n\n# st_dist_band() is used to identify neighbours based on a distance band (i.e., 4300). The output is a list of neighbours nb.\n\n# st_weights() is then used to calculate polygon spatial weights of the nb list (default using row-standardised weights)\n\nThe code chunks below find a upper limit for distance band for the other peak periods:\nWeekday afternoon peak: 5pm to 8pm\n\ngeo17_20 &lt;- sf::st_geometry(hexData17_20)\nnb17_20 &lt;- st_knn(geo17_20, longlat = TRUE)\n\n! Polygon provided. Using point on surface.\n\ndists17_20 &lt;- unlist(st_nb_dists(geo17_20, nb17_20))\n\n! Polygon provided. Using point on surface.\n\n\n\nsummary(dists17_20)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  500.0   500.0   500.0   505.8   500.0  4272.0 \n\n\n\nwm_fd17_20 &lt;- hexData17_20 %&gt;%\n  mutate(nb = st_dist_band(geo17_20,\n                           upper = 4300),\n               wt = st_weights(nb),\n               .before = 1)\n\nWeekend/holiday morning peak: 11am to 2pm\n\ngeo11_14 &lt;- sf::st_geometry(hexData11_14)\nnb11_14 &lt;- st_knn(geo11_14, longlat = TRUE)\n\n! Polygon provided. Using point on surface.\n\ndists11_14 &lt;- unlist(st_nb_dists(geo11_14, nb11_14))\n\n! Polygon provided. Using point on surface.\n\n\n\nsummary(dists11_14)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  500.0   500.0   500.0   505.8   500.0  4272.0 \n\n\n\nwm_fd11_14 &lt;- hexData11_14 %&gt;%\n  mutate(nb = st_dist_band(geo11_14,\n                           upper = 4300),\n               wt = st_weights(nb),\n               .before = 1)\n\nWeekend/holiday evening peak: 4pm to 7pm\n\ngeo16_19 &lt;- sf::st_geometry(hexData16_19)\nnb16_19 &lt;- st_knn(geo16_19, longlat = TRUE)\n\n! Polygon provided. Using point on surface.\n\ndists16_19 &lt;- unlist(st_nb_dists(geo16_19, nb16_19))\n\n! Polygon provided. Using point on surface.\n\n\n\nsummary(dists16_19)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  500.0   500.0   500.0   505.8   500.0  4272.0 \n\n\n\nwm_fd16_19 &lt;- hexData16_19 %&gt;%\n  mutate(nb = st_dist_band(geo16_19,\n                           upper = 4300),\n               wt = st_weights(nb),\n               .before = 1)\n\n\n\nCompute local Moran’s I\nWeekday morning peak: 6am to 9am\n\nlisa6_9 &lt;- wm_fd6_9 %&gt;%\n  mutate(local_moran = local_moran(hexData6_9, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nWeekday afternoon peak: 5pm to 8pm\n\nlisa17_20 &lt;- wm_fd17_20 %&gt;%\n  mutate(local_moran = local_moran(hexData17_20, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nWeekend/holiday morning peak: 11am to 2pm\n\nlisa11_14 &lt;- wm_fd11_14 %&gt;%\n  mutate(local_moran = local_moran(hexData11_14, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nWeekend/holiday evening peak: 4pm to 7pm\n\nlisa16_19 &lt;- wm_fd16_19 %&gt;%\n  mutate(local_moran = local_moran(hexData16_19, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\n\n\nVisualise local Moran’s I\nWeekday morning peak: 6am to 9am\n\ntmap_mode(\"plot\")\ntm_shape(lisa6_9) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Weekday morning peak (6am to 9am)\",\n            main.title.size = 0.8)\n\nWeekday afternoon peak: 5pm to 8pm\n\ntmap_mode(\"plot\")\ntm_shape(lisa17_20) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Weekday afternoon peak (5pm to 8pm)\",\n            main.title.size = 0.8)\n\nWeekend/holiday morning peak: 11am to 2pm\n\ntmap_mode(\"plot\")\ntm_shape(lisa11_14) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Weekend/holiday morning peak (11am to 2pm)\",\n            main.title.size = 0.8)\n\nWeekend/holiday evening peak: 4pm to 7pm\n\ntmap_mode(\"plot\")\ntm_shape(lisa16_19) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Weekend/holiday evening peak (4pm to 7pm)\",\n            main.title.size = 0.8)\n\n\n\nVisualising LISA map\nWeekday morning peak: 6am to 9am\n\nlisa_sig6_9 &lt;- lisa6_9  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa6_9) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig6_9) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\nWeekday afternoon peak: 5pm to 8pm\n\nlisa_sig17_20 &lt;- lisa17_20  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa17_20) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig17_20) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\nWeekend/holiday morning peak: 11am to 2pm\n\nlisa_sig11_14 &lt;- lisa11_14  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa11_14) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig11_14) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\nWeekend/holiday evening peak: 4pm to 7pm\n\nlisa_sig16_19 &lt;- lisa16_19  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa16_19) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig16_19) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html",
    "href": "In-class_Ex3/In-class_Ex3.html",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "Spatial Interaction Models (SIMs) are mathematical models for estimating flows between spatial entities developed by Alan Wilson in the late 1960s and early 1970, with considerable uptake and refinement for transport modelling since then Boyce and Williams (2015).\nThere are four main types of traditional SIMs (Wilson 1971):\n\nUnconstrained\nProduction-constrained\nAttraction-constrained\nDoubly-constrained\n\nOrdinary least square (OLS), log-normal, Poisson and negative binomial (NB) regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables. In this chapter, we will use the appropriate R packages to calibrate SIM by using four regression methods."
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#overview",
    "href": "In-class_Ex3/In-class_Ex3.html#overview",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "Spatial Interaction Models (SIMs) are mathematical models for estimating flows between spatial entities developed by Alan Wilson in the late 1960s and early 1970, with considerable uptake and refinement for transport modelling since then Boyce and Williams (2015).\nThere are four main types of traditional SIMs (Wilson 1971):\n\nUnconstrained\nProduction-constrained\nAttraction-constrained\nDoubly-constrained\n\nOrdinary least square (OLS), log-normal, Poisson and negative binomial (NB) regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables. In this chapter, we will use the appropriate R packages to calibrate SIM by using four regression methods."
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#the-case-study-and-data",
    "href": "In-class_Ex3/In-class_Ex3.html#the-case-study-and-data",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "The Case Study and Data",
    "text": "The Case Study and Data\nIn this exercise, we are going to calibrate SIM to determine factors affecting the public bus passenger flows during the morning peak in Singapore."
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#getting-started",
    "href": "In-class_Ex3/In-class_Ex3.html#getting-started",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Getting Started",
    "text": "Getting Started\nFor the purpose of this exercise, these R packages will be used. They are:\n\nsf for importing, integrating, processing and transforming geospatial data.\ntidyverse for importing, integrating, wrangling and visualising data.\ntmap for creating thematic maps.\nDT for creating dynamic table\nreshape2: pioneer version of tidyverse (by the same developer!) but able to handle matrix\nggpbur: compose multiple plots into one diagram\n\n\npacman::p_load(tmap, sf, sp, DT,\n               performance, reshape2,\n               ggpubr, tidyverse)\n\n# don't need units package and stplanr package as mentioned in class"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#the-data",
    "href": "In-class_Ex3/In-class_Ex3.html#the-data",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "The Data",
    "text": "The Data\nThe following data will be used:\n\nod_data.rds, weekday morning peak passenger flows at planning subzone level.\nmpsz.rds, URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.\n\nBeside these two data sets, an additional attribute data file called pop.csv will be provided."
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#computing-distance-matrix",
    "href": "In-class_Ex3/In-class_Ex3.html#computing-distance-matrix",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Computing Distance Matrix",
    "text": "Computing Distance Matrix\nIn spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. For example, in the table below we can see an Euclidean distance of 3926.0025 between MESZ01 and RVSZ05, of 3939.1079 between MESZ01 and SRSZ01, and so on. By definition, an location’s distance from itself, which is shown in the main diagonal of the table, is 0. It is also a symmetric matrix.\nIn this section, we will learn how to compute a distance matrix by using URA Master Plan 2019 Planning Subzone boundary in which you saved as an rds file called mpsz.\nFirst, let us import mpsz.rds into R environment by using the code chunk below (Note: file from Hands-on Ex3):\n\nmpsz &lt;- read_rds(\"data/rds/mpsz.rds\")\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\nNotice that it is a sf tibble dataframe object class.\n\nConverting from sf data.table to SpatialPolygonsDataFrame\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took relatively longer time that sp method especially the data set is large. In view of this, sp method is used in the code chunks below.\nFirst as.Spatial() will be used to convert mpsz from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below.\n\nmpsz_sp &lt;- as(mpsz, \"Spatial\")\nmpsz_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 332 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR \n\n\n\n\nComputing the distance matrix\nNext, spDists() of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.\n\ndist &lt;- spDists(mpsz_sp, \n                longlat = FALSE)\nhead(dist, n=c(10, 10))\n\n           [,1]       [,2]      [,3]      [,4]       [,5]      [,6]      [,7]\n [1,]     0.000  3926.0025  3939.108 20252.964  2989.9839  1431.330 19211.836\n [2,]  3926.003     0.0000   305.737 16513.865   951.8314  5254.066 16242.523\n [3,]  3939.108   305.7370     0.000 16412.062  1045.9088  5299.849 16026.146\n [4,] 20252.964 16513.8648 16412.062     0.000 17450.3044 21665.795  7229.017\n [5,]  2989.984   951.8314  1045.909 17450.304     0.0000  4303.232 17020.916\n [6,]  1431.330  5254.0664  5299.849 21665.795  4303.2323     0.000 20617.082\n [7,] 19211.836 16242.5230 16026.146  7229.017 17020.9161 20617.082     0.000\n [8,] 14960.942 12749.4101 12477.871 11284.279 13336.0421 16281.453  5606.082\n [9,]  7515.256  7934.8082  7649.776 18427.503  7801.6163  8403.896 14810.930\n[10,]  6391.342  4975.0021  4669.295 15469.566  5226.8731  7707.091 13111.391\n           [,8]      [,9]     [,10]\n [1,] 14960.942  7515.256  6391.342\n [2,] 12749.410  7934.808  4975.002\n [3,] 12477.871  7649.776  4669.295\n [4,] 11284.279 18427.503 15469.566\n [5,] 13336.042  7801.616  5226.873\n [6,] 16281.453  8403.896  7707.091\n [7,]  5606.082 14810.930 13111.391\n [8,]     0.000  9472.024  8575.490\n [9,]  9472.024     0.000  3780.800\n[10,]  8575.490  3780.800     0.000\n\n\nNotice that the output dist is a matrix object class of R. Also notice that the column headers and row headers are not labeled with the planning subzone codes.\n\n\nLabelling column and row headers of a distance matrix\nFirst, we will create a list sorted according to the the distance matrix by planning sub-zone code.\n\nsz_names &lt;- mpsz$SUBZONE_C\n\nNext we will attach SUBZONE_C to row and column for distance matrix matching ahead\n\ncolnames(dist) &lt;- paste0(sz_names)\nrownames(dist) &lt;- paste0(sz_names)\n\n\n\nPivoting distance value by SUBZONE_C\nNext, we will pivot the distance matrix into a long table by using the row and column subzone codes as show in the code chunk below.\n\ndistPair &lt;- melt(dist) %&gt;%\n  rename(dist = value)\nhead(distPair, 10)\n\n     Var1   Var2      dist\n1  MESZ01 MESZ01     0.000\n2  RVSZ05 MESZ01  3926.003\n3  SRSZ01 MESZ01  3939.108\n4  WISZ01 MESZ01 20252.964\n5  MUSZ02 MESZ01  2989.984\n6  MPSZ05 MESZ01  1431.330\n7  WISZ03 MESZ01 19211.836\n8  WISZ02 MESZ01 14960.942\n9  SISZ02 MESZ01  7515.256\n10 SISZ01 MESZ01  6391.342\n\n\nNotice that the within zone distance is 0.\n\n\nUpdating intra-zonal distances\nIn this section, we are going to append a constant value to replace the intra-zonal distance of 0.\nFirst, we will select and find out the minimum value of the distance by using summary().\n\ndistPair %&gt;%\n  filter(dist &gt; 0) %&gt;%\n  summary()\n\n      Var1             Var2             dist        \n MESZ01 :   331   MESZ01 :   331   Min.   :  173.8  \n RVSZ05 :   331   RVSZ05 :   331   1st Qu.: 7149.5  \n SRSZ01 :   331   SRSZ01 :   331   Median :11890.0  \n WISZ01 :   331   WISZ01 :   331   Mean   :12229.4  \n MUSZ02 :   331   MUSZ02 :   331   3rd Qu.:16401.7  \n MPSZ05 :   331   MPSZ05 :   331   Max.   :49894.4  \n (Other):107906   (Other):107906                    \n\n\nNext, a constant distance value of 50m is added into intra-zones distance.\n\ndistPair$dist &lt;- ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n\nThe code chunk below will be used to check the resulting data frame.\n\ndistPair %&gt;%\n  summary()\n\n      Var1             Var2             dist      \n MESZ01 :   332   MESZ01 :   332   Min.   :   50  \n RVSZ05 :   332   RVSZ05 :   332   1st Qu.: 7097  \n SRSZ01 :   332   SRSZ01 :   332   Median :11864  \n WISZ01 :   332   WISZ01 :   332   Mean   :12193  \n MUSZ02 :   332   MUSZ02 :   332   3rd Qu.:16388  \n MPSZ05 :   332   MPSZ05 :   332   Max.   :49894  \n (Other):108232   (Other):108232                  \n\n\nThe code chunk below is used to rename the origin and destination fields.\n\ndistPair &lt;- distPair %&gt;%\n  rename(orig = Var1,\n         dest = Var2)\n\n\n# check that fields have been renamed:\ndistPair %&gt;%\n  summary()\n\n      orig             dest             dist      \n MESZ01 :   332   MESZ01 :   332   Min.   :   50  \n RVSZ05 :   332   RVSZ05 :   332   1st Qu.: 7097  \n SRSZ01 :   332   SRSZ01 :   332   Median :11864  \n WISZ01 :   332   WISZ01 :   332   Mean   :12193  \n MUSZ02 :   332   MUSZ02 :   332   3rd Qu.:16388  \n MPSZ05 :   332   MPSZ05 :   332   Max.   :49894  \n (Other):108232   (Other):108232                  \n\n\nLastly, the code chunk below is used to save the dataframe for future use.\n\nwrite_rds(distPair, \"data/rds/distPair.rds\")"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#preparing-flow-data",
    "href": "In-class_Ex3/In-class_Ex3.html#preparing-flow-data",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Preparing flow data",
    "text": "Preparing flow data\nThe code chunk below is used import od_data saved in Hands-on Ex3 into R environment.\n\nod_data &lt;- read_rds(\"data/rds/od_data.rds\")\n\nNext, we will compute the total passenger trip between and within planning subzones by using the code chunk below. The output is all flow_data.\n\nflow_data &lt;- od_data %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;% \n  summarize(TRIPS = sum(MORNING_PEAK)) \n\n`summarise()` has grouped output by 'ORIGIN_SZ'. You can override using the\n`.groups` argument.\n\n\nUse the code chunk below to display flow_data dataframe.\n\nhead(flow_data, 10)\n\n# A tibble: 10 × 3\n# Groups:   ORIGIN_SZ [1]\n   ORIGIN_SZ DESTIN_SZ TRIPS\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 AMSZ01    AMSZ01     2694\n 2 AMSZ01    AMSZ02    10591\n 3 AMSZ01    AMSZ03    14980\n 4 AMSZ01    AMSZ04     3106\n 5 AMSZ01    AMSZ05     7734\n 6 AMSZ01    AMSZ06     2306\n 7 AMSZ01    AMSZ07     1824\n 8 AMSZ01    AMSZ08     2734\n 9 AMSZ01    AMSZ09     2300\n10 AMSZ01    AMSZ10      164\n\n\n\nSeparating intra-flow from passenger volume df\nCode chunk below is used to add three new fields in flow_data dataframe.\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)\n\n\n\nCombining passenger volume data with distance value\nBefore we can join flow_data and distPair, we need to convert data value type of ORIGIN_SZ and DESTIN_SZ fields of flow_data dataframe into factor data type.\n\nflow_data$ORIGIN_SZ &lt;- as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ &lt;- as.factor(flow_data$DESTIN_SZ)\n\nNow, left_join() of dplyr will be used to join flow_data dataframe and distPair dataframe. The output is called flow_data1.\n\nflow_data1 &lt;- flow_data %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_SZ\" = \"orig\",\n                    \"DESTIN_SZ\" = \"dest\"))"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#preparing-origin-and-destination-attributes",
    "href": "In-class_Ex3/In-class_Ex3.html#preparing-origin-and-destination-attributes",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Preparing Origin and Destination Attributes",
    "text": "Preparing Origin and Destination Attributes\n\nImporting population data\n\npop &lt;- read_csv(\"data/aspatial/pop.csv\", show_col_types = FALSE)\n\n\n\nGeospatial data wrangling\n\npop &lt;- pop %&gt;%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %&gt;%\n  select(1:6) %&gt;%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)\n\n\n\nPreparing origin attribute\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %&gt;%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\n\n\nPreparing destination attribute\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %&gt;%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\nWe will call the output data file SIM_data. it is in rds data file format.\n\nwrite_rds(flow_data1, \"data/rds/SIM_data\")"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#calibrating-spatial-interaction-models",
    "href": "In-class_Ex3/In-class_Ex3.html#calibrating-spatial-interaction-models",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Calibrating Spatial Interaction Models",
    "text": "Calibrating Spatial Interaction Models\nIn this section, we will learn how to calibrate Spatial Interaction Models by using Poisson Regression method.\n\nImporting the modelling data\nFirstly, let us import the modelling data by using the code chunk below.\n\nSIM_data &lt;- read_rds(\"data/rds/SIM_data.rds\")\n\n\n\nVisualising the dependent variable\nFirstly, let us plot the distribution of the dependent variable (i.e. TRIPS) by using histogram method by using the code chunk below.\n\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nNotice that the distribution is highly skewed and does NOT resemble bell shape (also known as normal distribution).\nNext, let us visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model, namely distance.\n\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nNotice that their relationship hardly resemble linear relationship.\nOn the other hand, if we plot the scatter plot by using the log transformed version of both variables, we can see that their relationship resembles linear relationship more closely.\n\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nChecking for variables with zero values\nSince Poisson Regression is based of log and log 0 is undefined, it is important for us to ensure that no 0 values in the explanatory variables.\nIn the code chunk below, summary() of Base R is used to compute the summary statistics of all variables in SIM_data data frame.\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12 ORIGIN_AGE13_24 ORIGIN_AGE25_64\n Min.   :1   Min.   :  173.8   Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240   1st Qu.:  460   1st Qu.: 2210  \n Median :1   Median : 6121.0   Median : 710   Median : 1400   Median : 7030  \n Mean   :1   Mean   : 6951.8   Mean   :1037   Mean   : 2278   Mean   :10536  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500   3rd Qu.: 3282   3rd Qu.:15830  \n Max.   :1   Max.   :26135.8   Max.   :6340   Max.   :16380   Max.   :74610  \n DESTIN_AGE7_12 DESTIN_AGE13_24 DESTIN_AGE25_64\n Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.: 250   1st Qu.:  460   1st Qu.: 2210  \n Median : 720   Median : 1430   Median : 7120  \n Mean   :1040   Mean   : 2305   Mean   :10648  \n 3rd Qu.:1500   3rd Qu.: 3290   3rd Qu.:15830  \n Max.   :6340   Max.   :16380   Max.   :74610  \n\n\nThe print report above reveals that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64,DESTIN_AGE7_12, DESTIN_AGE13_24, DESTIN_AGE25_64 consist of 0 values.\nIn view of this, code chunk below will be used to replace zero values to 0.99\nNotes:\n\n0.99 is an arbitrary value. We can choose another value as well\nWe are doing feature engineering here\n\n\nSIM_data$DESTIN_AGE7_12 &lt;- ifelse(\n  SIM_data$DESTIN_AGE7_12 == 0,\n  0.99, SIM_data$DESTIN_AGE7_12)\nSIM_data$DESTIN_AGE13_24 &lt;- ifelse(\n  SIM_data$DESTIN_AGE13_24 == 0,\n  0.99, SIM_data$DESTIN_AGE13_24)\nSIM_data$DESTIN_AGE25_64 &lt;- ifelse(\n  SIM_data$DESTIN_AGE25_64 == 0,\n  0.99, SIM_data$DESTIN_AGE25_64)\nSIM_data$ORIGIN_AGE7_12 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE7_12 == 0,\n  0.99, SIM_data$ORIGIN_AGE7_12)\nSIM_data$ORIGIN_AGE13_24 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE13_24 == 0,\n  0.99, SIM_data$ORIGIN_AGE13_24)\nSIM_data$ORIGIN_AGE25_64 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE25_64 == 0,\n  0.99, SIM_data$ORIGIN_AGE25_64)\n\n\n# check that all 0 values have been replaced:\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12    ORIGIN_AGE13_24   \n Min.   :1   Min.   :  173.8   Min.   :   0.99   Min.   :    0.99  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240.00   1st Qu.:  460.00  \n Median :1   Median : 6121.0   Median : 710.00   Median : 1400.00  \n Mean   :1   Mean   : 6951.8   Mean   :1036.73   Mean   : 2278.59  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500.00   3rd Qu.: 3282.50  \n Max.   :1   Max.   :26135.8   Max.   :6340.00   Max.   :16380.00  \n ORIGIN_AGE25_64    DESTIN_AGE7_12    DESTIN_AGE13_24    DESTIN_AGE25_64   \n Min.   :    0.99   Min.   :   0.99   Min.   :    0.99   Min.   :    0.99  \n 1st Qu.: 2210.00   1st Qu.: 250.00   1st Qu.:  460.00   1st Qu.: 2210.00  \n Median : 7030.00   Median : 720.00   Median : 1430.00   Median : 7120.00  \n Mean   :10535.93   Mean   :1039.98   Mean   : 2305.33   Mean   :10647.95  \n 3rd Qu.:15830.00   3rd Qu.:1500.00   3rd Qu.: 3290.00   3rd Qu.:15830.00  \n Max.   :74610.00   Max.   :6340.00   Max.   :16380.00   Max.   :74610.00  \n\n\nNotice that all the 0 values have been replaced by 0.99.\n\n\nUnconstrained Spatial Interaction Model\nIn this section, you will learn how to calibrate an unconstrained spatial interaction model by using glm() of Base Stats. The explanatory variables are origin population by different age cohort, destination population by different age cohort (i.e. ORIGIN_AGE25_64) and distance between origin and destination in km (i.e. dist).\nThe code chunk used to calibrate to model is shown below:\n\nuncSIM &lt;- glm(formula = TRIPS ~ \n                log(ORIGIN_AGE25_64) + \n                log(DESTIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nuncSIM\n\n\nCall:  glm(formula = TRIPS ~ log(ORIGIN_AGE25_64) + log(DESTIN_AGE25_64) + \n    log(dist), family = poisson(link = \"log\"), data = SIM_data, \n    na.action = na.exclude)\n\nCoefficients:\n         (Intercept)  log(ORIGIN_AGE25_64)  log(DESTIN_AGE25_64)  \n            17.00287               0.21001               0.01289  \n           log(dist)  \n            -1.51785  \n\nDegrees of Freedom: 14273 Total (i.e. Null);  14270 Residual\nNull Deviance:      36120000 \nResidual Deviance: 19960000     AIC: 20040000\n\n\n\n\nR-squared function\nIn order to measure how much variation of the trips can be accounted by the model we will write a function to calculate R-Squared value as shown below.\n\nCalcRSquared &lt;- function(observed,estimated){\n  r &lt;- cor(observed,estimated)\n  R2 &lt;- r^2\n  R2\n}\n\nNext, we will compute the R-squared of the unconstrained SIM by using the code chunk below.\n\nCalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n\n[1] 0.1694734\n\n\n\nr2_mcfadden(uncSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.446\n  adj. R2: 0.446\n\n\n\n\nOrigin (Production) constrained SIM\nIn this section, we will fit an origin constrained SIM by using the code chunk below.\n\norcSIM &lt;- glm(formula = TRIPS ~ \n                 ORIGIN_SZ +\n                 log(DESTIN_AGE25_64) +\n                 log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(orcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(DESTIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.9309957  0.0054015  3689.887  &lt; 2e-16 ***\nORIGIN_SZAMSZ02       0.6805710  0.0052686   129.175  &lt; 2e-16 ***\nORIGIN_SZAMSZ03       0.3597850  0.0054884    65.554  &lt; 2e-16 ***\nORIGIN_SZAMSZ04      -0.1106566  0.0060027   -18.434  &lt; 2e-16 ***\nORIGIN_SZAMSZ05      -0.3140561  0.0067998   -46.186  &lt; 2e-16 ***\nORIGIN_SZAMSZ06       0.0634425  0.0060258    10.528  &lt; 2e-16 ***\nORIGIN_SZAMSZ07      -1.1301580  0.0110298  -102.464  &lt; 2e-16 ***\nORIGIN_SZAMSZ08      -0.6330394  0.0102949   -61.491  &lt; 2e-16 ***\nORIGIN_SZAMSZ09       0.1064915  0.0063450    16.784  &lt; 2e-16 ***\nORIGIN_SZAMSZ10       0.5061899  0.0053889    93.931  &lt; 2e-16 ***\nORIGIN_SZAMSZ11      -1.3167911  0.0144870   -90.895  &lt; 2e-16 ***\nORIGIN_SZAMSZ12      -1.5103004  0.0127453  -118.499  &lt; 2e-16 ***\nORIGIN_SZBDSZ01       1.3626004  0.0051433   264.929  &lt; 2e-16 ***\nORIGIN_SZBDSZ02       0.9554084  0.0059655   160.156  &lt; 2e-16 ***\nORIGIN_SZBDSZ03       1.1476190  0.0054278   211.433  &lt; 2e-16 ***\nORIGIN_SZBDSZ04       2.0110410  0.0046344   433.940  &lt; 2e-16 ***\nORIGIN_SZBDSZ05       1.0658940  0.0053976   197.477  &lt; 2e-16 ***\nORIGIN_SZBDSZ06       1.2719222  0.0054774   232.213  &lt; 2e-16 ***\nORIGIN_SZBDSZ07      -0.5053039  0.0111553   -45.297  &lt; 2e-16 ***\nORIGIN_SZBDSZ08      -0.3556193  0.0102947   -34.544  &lt; 2e-16 ***\nORIGIN_SZBKSZ01      -0.3606399  0.0075473   -47.784  &lt; 2e-16 ***\nORIGIN_SZBKSZ02       0.1357265  0.0061394    22.107  &lt; 2e-16 ***\nORIGIN_SZBKSZ03       0.4101999  0.0058983    69.545  &lt; 2e-16 ***\nORIGIN_SZBKSZ04      -0.3418645  0.0070764   -48.310  &lt; 2e-16 ***\nORIGIN_SZBKSZ05      -0.2986750  0.0074073   -40.322  &lt; 2e-16 ***\nORIGIN_SZBKSZ06      -0.2637855  0.0068739   -38.375  &lt; 2e-16 ***\nORIGIN_SZBKSZ07       0.5498323  0.0051476   106.813  &lt; 2e-16 ***\nORIGIN_SZBKSZ08      -0.0527393  0.0061457    -8.582  &lt; 2e-16 ***\nORIGIN_SZBKSZ09      -0.1564691  0.0067300   -23.249  &lt; 2e-16 ***\nORIGIN_SZBLSZ01      -1.7551329  0.0176599   -99.385  &lt; 2e-16 ***\nORIGIN_SZBLSZ02      -1.9493637  0.0213859   -91.152  &lt; 2e-16 ***\nORIGIN_SZBLSZ03      -2.9057732  0.0535995   -54.213  &lt; 2e-16 ***\nORIGIN_SZBLSZ04      -1.4672066  0.0254726   -57.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ01       0.1806064  0.0060563    29.821  &lt; 2e-16 ***\nORIGIN_SZBMSZ02      -1.4026549  0.0078244  -179.267  &lt; 2e-16 ***\nORIGIN_SZBMSZ03      -0.5976236  0.0063808   -93.660  &lt; 2e-16 ***\nORIGIN_SZBMSZ04      -0.5456513  0.0059061   -92.388  &lt; 2e-16 ***\nORIGIN_SZBMSZ05      -3.1095195  0.0188118  -165.297  &lt; 2e-16 ***\nORIGIN_SZBMSZ06      -3.0273827  0.0194319  -155.794  &lt; 2e-16 ***\nORIGIN_SZBMSZ07      -0.7378197  0.0066865  -110.345  &lt; 2e-16 ***\nORIGIN_SZBMSZ08      -0.9306150  0.0067188  -138.510  &lt; 2e-16 ***\nORIGIN_SZBMSZ09      -1.4137345  0.0101071  -139.876  &lt; 2e-16 ***\nORIGIN_SZBMSZ10      -1.7054195  0.0101582  -167.886  &lt; 2e-16 ***\nORIGIN_SZBMSZ11      -1.2418380  0.0076792  -161.714  &lt; 2e-16 ***\nORIGIN_SZBMSZ12      -1.3746537  0.0109769  -125.231  &lt; 2e-16 ***\nORIGIN_SZBMSZ13      -0.4339494  0.0069335   -62.587  &lt; 2e-16 ***\nORIGIN_SZBMSZ14      -0.9950458  0.0076302  -130.410  &lt; 2e-16 ***\nORIGIN_SZBMSZ15      -0.6544196  0.0068964   -94.892  &lt; 2e-16 ***\nORIGIN_SZBMSZ16      -1.5193747  0.0105329  -144.250  &lt; 2e-16 ***\nORIGIN_SZBMSZ17      -1.6536771  0.0180672   -91.529  &lt; 2e-16 ***\nORIGIN_SZBPSZ01       0.1484355  0.0064734    22.930  &lt; 2e-16 ***\nORIGIN_SZBPSZ02      -0.3602094  0.0073902   -48.741  &lt; 2e-16 ***\nORIGIN_SZBPSZ03      -0.1567975  0.0072226   -21.709  &lt; 2e-16 ***\nORIGIN_SZBPSZ04       0.4504873  0.0058418    77.115  &lt; 2e-16 ***\nORIGIN_SZBPSZ05       0.5028646  0.0053682    93.675  &lt; 2e-16 ***\nORIGIN_SZBPSZ06      -1.0125668  0.0105638   -95.853  &lt; 2e-16 ***\nORIGIN_SZBPSZ07      -0.3859065  0.0098561   -39.154  &lt; 2e-16 ***\nORIGIN_SZBSSZ01       0.1488497  0.0065504    22.724  &lt; 2e-16 ***\nORIGIN_SZBSSZ02       0.4269498  0.0055893    76.387  &lt; 2e-16 ***\nORIGIN_SZBSSZ03      -0.2437385  0.0062020   -39.300  &lt; 2e-16 ***\nORIGIN_SZBTSZ01       0.1987940  0.0066672    29.817  &lt; 2e-16 ***\nORIGIN_SZBTSZ02      -0.4571546  0.0090784   -50.356  &lt; 2e-16 ***\nORIGIN_SZBTSZ03      -0.2697243  0.0077941   -34.606  &lt; 2e-16 ***\nORIGIN_SZBTSZ04      -1.0997236  0.0115225   -95.441  &lt; 2e-16 ***\nORIGIN_SZBTSZ05      -1.0053122  0.0132594   -75.819  &lt; 2e-16 ***\nORIGIN_SZBTSZ06      -1.0841201  0.0102242  -106.035  &lt; 2e-16 ***\nORIGIN_SZBTSZ07      -2.3134497  0.0158499  -145.960  &lt; 2e-16 ***\nORIGIN_SZBTSZ08      -1.1581618  0.0121161   -95.589  &lt; 2e-16 ***\nORIGIN_SZCBSZ01      -1.0805930  0.0577831   -18.701  &lt; 2e-16 ***\nORIGIN_SZCCSZ01      -0.8145372  0.0152638   -53.364  &lt; 2e-16 ***\nORIGIN_SZCHSZ01       0.0377079  0.0133240     2.830 0.004654 ** \nORIGIN_SZCHSZ02      -0.6209553  0.0096388   -64.422  &lt; 2e-16 ***\nORIGIN_SZCHSZ03       1.6790244  0.0069559   241.381  &lt; 2e-16 ***\nORIGIN_SZCKSZ01       0.0839586  0.0059934    14.008  &lt; 2e-16 ***\nORIGIN_SZCKSZ02       0.4379511  0.0062289    70.309  &lt; 2e-16 ***\nORIGIN_SZCKSZ03       0.7956950  0.0051892   153.335  &lt; 2e-16 ***\nORIGIN_SZCKSZ04       1.2740323  0.0053165   239.637  &lt; 2e-16 ***\nORIGIN_SZCKSZ05       0.9326213  0.0061807   150.893  &lt; 2e-16 ***\nORIGIN_SZCKSZ06       0.3976273  0.0085639    46.431  &lt; 2e-16 ***\nORIGIN_SZCLSZ01      -0.7522917  0.0094655   -79.477  &lt; 2e-16 ***\nORIGIN_SZCLSZ02      -1.3937450  0.0153260   -90.940  &lt; 2e-16 ***\nORIGIN_SZCLSZ03      -0.7898683  0.0091016   -86.784  &lt; 2e-16 ***\nORIGIN_SZCLSZ04       0.8451512  0.0051258   164.882  &lt; 2e-16 ***\nORIGIN_SZCLSZ05      -1.6573818  0.0166091   -99.788  &lt; 2e-16 ***\nORIGIN_SZCLSZ06       0.9478181  0.0048182   196.716  &lt; 2e-16 ***\nORIGIN_SZCLSZ07      -0.2499753  0.0064632   -38.677  &lt; 2e-16 ***\nORIGIN_SZCLSZ08       0.1350119  0.0069296    19.483  &lt; 2e-16 ***\nORIGIN_SZCLSZ09      -1.3868782  0.0192743   -71.955  &lt; 2e-16 ***\nORIGIN_SZDTSZ02      -3.7535792  0.0871325   -43.079  &lt; 2e-16 ***\nORIGIN_SZDTSZ03      -3.8462041  0.0840156   -45.780  &lt; 2e-16 ***\nORIGIN_SZDTSZ13      -2.9738127  0.0349241   -85.151  &lt; 2e-16 ***\nORIGIN_SZGLSZ01      -1.5175198  0.0110135  -137.787  &lt; 2e-16 ***\nORIGIN_SZGLSZ02       0.2405712  0.0058742    40.954  &lt; 2e-16 ***\nORIGIN_SZGLSZ03       0.1940241  0.0061989    31.300  &lt; 2e-16 ***\nORIGIN_SZGLSZ04       1.0292572  0.0049028   209.931  &lt; 2e-16 ***\nORIGIN_SZGLSZ05       0.9864552  0.0050898   193.811  &lt; 2e-16 ***\nORIGIN_SZHGSZ01       0.3073609  0.0054307    56.597  &lt; 2e-16 ***\nORIGIN_SZHGSZ02       0.3827293  0.0054555    70.154  &lt; 2e-16 ***\nORIGIN_SZHGSZ03       0.2342580  0.0059240    39.544  &lt; 2e-16 ***\nORIGIN_SZHGSZ04       0.8750090  0.0049639   176.275  &lt; 2e-16 ***\nORIGIN_SZHGSZ05       1.1695280  0.0049468   236.420  &lt; 2e-16 ***\nORIGIN_SZHGSZ06      -0.0462411  0.0063805    -7.247 4.25e-13 ***\nORIGIN_SZHGSZ07       0.4488583  0.0055139    81.404  &lt; 2e-16 ***\nORIGIN_SZHGSZ08       0.2236095  0.0061279    36.490  &lt; 2e-16 ***\nORIGIN_SZHGSZ09      -1.6376674  0.0084442  -193.941  &lt; 2e-16 ***\nORIGIN_SZHGSZ10      -2.9849025  0.0501042   -59.574  &lt; 2e-16 ***\nORIGIN_SZJESZ01       0.3926525  0.0056268    69.783  &lt; 2e-16 ***\nORIGIN_SZJESZ02       0.1230160  0.0056864    21.633  &lt; 2e-16 ***\nORIGIN_SZJESZ03       0.0188276  0.0061020     3.085 0.002032 ** \nORIGIN_SZJESZ04      -1.3611618  0.0117184  -116.156  &lt; 2e-16 ***\nORIGIN_SZJESZ05      -2.0643662  0.0157083  -131.419  &lt; 2e-16 ***\nORIGIN_SZJESZ06       0.1556368  0.0055245    28.172  &lt; 2e-16 ***\nORIGIN_SZJESZ07      -1.7664532  0.0133171  -132.646  &lt; 2e-16 ***\nORIGIN_SZJESZ08      -0.9115981  0.0138203   -65.961  &lt; 2e-16 ***\nORIGIN_SZJESZ09       0.6121916  0.0060381   101.388  &lt; 2e-16 ***\nORIGIN_SZJESZ10      -1.1953045  0.0233216   -51.253  &lt; 2e-16 ***\nORIGIN_SZJESZ11      -1.4088748  0.0220921   -63.773  &lt; 2e-16 ***\nORIGIN_SZJWSZ01       0.5759093  0.0077741    74.081  &lt; 2e-16 ***\nORIGIN_SZJWSZ02       0.9769314  0.0053029   184.227  &lt; 2e-16 ***\nORIGIN_SZJWSZ03       1.3242695  0.0049068   269.882  &lt; 2e-16 ***\nORIGIN_SZJWSZ04       0.5621088  0.0057831    97.199  &lt; 2e-16 ***\nORIGIN_SZJWSZ05      -1.5744341  0.0146904  -107.174  &lt; 2e-16 ***\nORIGIN_SZJWSZ06      -0.9113320  0.0126913   -71.807  &lt; 2e-16 ***\nORIGIN_SZJWSZ07      -2.3083419  0.0357843   -64.507  &lt; 2e-16 ***\nORIGIN_SZJWSZ08       2.0114225  0.0047956   419.429  &lt; 2e-16 ***\nORIGIN_SZJWSZ09       1.9086705  0.0045255   421.759  &lt; 2e-16 ***\nORIGIN_SZKLSZ01       0.2743166  0.0056908    48.204  &lt; 2e-16 ***\nORIGIN_SZKLSZ02      -0.6443386  0.0074521   -86.463  &lt; 2e-16 ***\nORIGIN_SZKLSZ03      -0.3990113  0.0067213   -59.366  &lt; 2e-16 ***\nORIGIN_SZKLSZ04      -2.1413876  0.0138405  -154.719  &lt; 2e-16 ***\nORIGIN_SZKLSZ05      -1.0913697  0.0121512   -89.816  &lt; 2e-16 ***\nORIGIN_SZKLSZ06      -5.6240764  0.1857405   -30.279  &lt; 2e-16 ***\nORIGIN_SZKLSZ07      -1.1885897  0.0096830  -122.750  &lt; 2e-16 ***\nORIGIN_SZKLSZ08      -1.7018593  0.0114317  -148.872  &lt; 2e-16 ***\nORIGIN_SZLKSZ01      -1.6659670  0.0446420   -37.318  &lt; 2e-16 ***\nORIGIN_SZMDSZ01      -1.1210505  0.0318834   -35.161  &lt; 2e-16 ***\nORIGIN_SZMDSZ02      -0.5096299  0.0116645   -43.691  &lt; 2e-16 ***\nORIGIN_SZMDSZ03      -1.9187039  0.0198291   -96.762  &lt; 2e-16 ***\nORIGIN_SZMPSZ01      -0.5260512  0.0094201   -55.844  &lt; 2e-16 ***\nORIGIN_SZMPSZ02      -0.2905084  0.0077974   -37.257  &lt; 2e-16 ***\nORIGIN_SZMPSZ03       0.3342293  0.0063715    52.457  &lt; 2e-16 ***\nORIGIN_SZMUSZ02      -3.8337096  0.1105053   -34.693  &lt; 2e-16 ***\nORIGIN_SZNTSZ01      -2.9845040  0.0397028   -75.171  &lt; 2e-16 ***\nORIGIN_SZNTSZ02      -3.1812985  0.0249470  -127.522  &lt; 2e-16 ***\nORIGIN_SZNTSZ03      -0.9742991  0.0085424  -114.054  &lt; 2e-16 ***\nORIGIN_SZNTSZ05      -4.2086932  0.0579737   -72.597  &lt; 2e-16 ***\nORIGIN_SZNTSZ06      -4.5831822  0.0583494   -78.547  &lt; 2e-16 ***\nORIGIN_SZNVSZ01       0.3186962  0.0052944    60.195  &lt; 2e-16 ***\nORIGIN_SZNVSZ02      -0.5321136  0.0073747   -72.154  &lt; 2e-16 ***\nORIGIN_SZNVSZ03      -0.9911852  0.0090560  -109.451  &lt; 2e-16 ***\nORIGIN_SZNVSZ04      -0.8329721  0.0099590   -83.640  &lt; 2e-16 ***\nORIGIN_SZNVSZ05      -2.1460777  0.0182401  -117.657  &lt; 2e-16 ***\nORIGIN_SZPGSZ01      -0.5604078  0.0151515   -36.987  &lt; 2e-16 ***\nORIGIN_SZPGSZ02      -0.4025139  0.0085135   -47.279  &lt; 2e-16 ***\nORIGIN_SZPGSZ03       0.6975483  0.0055534   125.608  &lt; 2e-16 ***\nORIGIN_SZPGSZ04       1.2175486  0.0051080   238.363  &lt; 2e-16 ***\nORIGIN_SZPGSZ05       0.3895354  0.0069851    55.767  &lt; 2e-16 ***\nORIGIN_SZPLSZ01      -0.5572701  0.0134473   -41.441  &lt; 2e-16 ***\nORIGIN_SZPLSZ02      -0.9854214  0.0172337   -57.180  &lt; 2e-16 ***\nORIGIN_SZPLSZ03      -1.6991954  0.0472629   -35.952  &lt; 2e-16 ***\nORIGIN_SZPLSZ04      -2.2000217  0.0373580   -58.890  &lt; 2e-16 ***\nORIGIN_SZPLSZ05      -1.7086663  0.0260920   -65.486  &lt; 2e-16 ***\nORIGIN_SZPNSZ01       1.5292867  0.0055102   277.535  &lt; 2e-16 ***\nORIGIN_SZPNSZ02       0.7457519  0.0127815    58.346  &lt; 2e-16 ***\nORIGIN_SZPNSZ03      -1.3659046  0.0216180   -63.184  &lt; 2e-16 ***\nORIGIN_SZPNSZ04      -2.0025379  0.0360655   -55.525  &lt; 2e-16 ***\nORIGIN_SZPNSZ05      -0.9157959  0.0320955   -28.533  &lt; 2e-16 ***\nORIGIN_SZPRSZ01       0.0522611  0.0139142     3.756 0.000173 ***\nORIGIN_SZPRSZ02       1.3063371  0.0053809   242.774  &lt; 2e-16 ***\nORIGIN_SZPRSZ03       0.9963670  0.0054293   183.516  &lt; 2e-16 ***\nORIGIN_SZPRSZ04      -0.0300950  0.0088010    -3.419 0.000627 ***\nORIGIN_SZPRSZ05       1.6840313  0.0050839   331.245  &lt; 2e-16 ***\nORIGIN_SZPRSZ06      -0.8277202  0.0131296   -63.042  &lt; 2e-16 ***\nORIGIN_SZPRSZ07      -2.1698449  0.0177362  -122.340  &lt; 2e-16 ***\nORIGIN_SZPRSZ08       0.4559353  0.0072609    62.793  &lt; 2e-16 ***\nORIGIN_SZQTSZ01      -0.3517047  0.0078770   -44.650  &lt; 2e-16 ***\nORIGIN_SZQTSZ02      -0.8199353  0.0071544  -114.605  &lt; 2e-16 ***\nORIGIN_SZQTSZ03      -0.2457614  0.0065555   -37.490  &lt; 2e-16 ***\nORIGIN_SZQTSZ04      -1.2216614  0.0084050  -145.349  &lt; 2e-16 ***\nORIGIN_SZQTSZ05      -0.7219952  0.0072360   -99.778  &lt; 2e-16 ***\nORIGIN_SZQTSZ06      -0.6729363  0.0076658   -87.784  &lt; 2e-16 ***\nORIGIN_SZQTSZ07      -1.4497690  0.0109365  -132.563  &lt; 2e-16 ***\nORIGIN_SZQTSZ08      -0.2770151  0.0070193   -39.465  &lt; 2e-16 ***\nORIGIN_SZQTSZ09      -0.6157554  0.0078739   -78.202  &lt; 2e-16 ***\nORIGIN_SZQTSZ10      -0.3091547  0.0075471   -40.963  &lt; 2e-16 ***\nORIGIN_SZQTSZ11      -1.9698881  0.0151247  -130.243  &lt; 2e-16 ***\nORIGIN_SZQTSZ12      -2.6449643  0.0205857  -128.485  &lt; 2e-16 ***\nORIGIN_SZQTSZ13      -0.3754107  0.0088433   -42.452  &lt; 2e-16 ***\nORIGIN_SZQTSZ14      -1.6537473  0.0134378  -123.067  &lt; 2e-16 ***\nORIGIN_SZQTSZ15      -0.3435351  0.0131956   -26.034  &lt; 2e-16 ***\nORIGIN_SZRCSZ01      -1.7104390  0.0141179  -121.154  &lt; 2e-16 ***\nORIGIN_SZRCSZ06      -1.1250727  0.0094909  -118.542  &lt; 2e-16 ***\nORIGIN_SZRVSZ01      -3.0220116  0.0339694   -88.963  &lt; 2e-16 ***\nORIGIN_SZRVSZ02      -3.6040075  0.0297641  -121.086  &lt; 2e-16 ***\nORIGIN_SZRVSZ03      -3.2345594  0.0259149  -124.814  &lt; 2e-16 ***\nORIGIN_SZRVSZ04      -3.6900313  0.0575908   -64.073  &lt; 2e-16 ***\nORIGIN_SZRVSZ05      -2.9527570  0.0178582  -165.344  &lt; 2e-16 ***\nORIGIN_SZSBSZ01       0.0238445  0.0078563     3.035 0.002405 ** \nORIGIN_SZSBSZ02      -0.5780602  0.0093054   -62.121  &lt; 2e-16 ***\nORIGIN_SZSBSZ03       0.8961719  0.0054586   164.175  &lt; 2e-16 ***\nORIGIN_SZSBSZ04       0.8421798  0.0061888   136.080  &lt; 2e-16 ***\nORIGIN_SZSBSZ05      -0.1682984  0.0078342   -21.482  &lt; 2e-16 ***\nORIGIN_SZSBSZ06      -1.1482701  0.0196421   -58.460  &lt; 2e-16 ***\nORIGIN_SZSBSZ07      -0.8830317  0.0160709   -54.946  &lt; 2e-16 ***\nORIGIN_SZSBSZ08      -1.1039492  0.0174602   -63.226  &lt; 2e-16 ***\nORIGIN_SZSBSZ09      -0.5946691  0.0101961   -58.323  &lt; 2e-16 ***\nORIGIN_SZSESZ02       1.1144933  0.0050948   218.749  &lt; 2e-16 ***\nORIGIN_SZSESZ03       1.1058963  0.0049026   225.574  &lt; 2e-16 ***\nORIGIN_SZSESZ04       0.7427975  0.0056948   130.433  &lt; 2e-16 ***\nORIGIN_SZSESZ05      -0.2812684  0.0069596   -40.414  &lt; 2e-16 ***\nORIGIN_SZSESZ06       0.8168315  0.0055800   146.387  &lt; 2e-16 ***\nORIGIN_SZSESZ07      -2.2842043  0.0231232   -98.784  &lt; 2e-16 ***\nORIGIN_SZSGSZ01      -0.7313790  0.0098957   -73.909  &lt; 2e-16 ***\nORIGIN_SZSGSZ02      -1.1185406  0.0110919  -100.843  &lt; 2e-16 ***\nORIGIN_SZSGSZ03       0.1752618  0.0060508    28.965  &lt; 2e-16 ***\nORIGIN_SZSGSZ04       0.3764395  0.0056165    67.023  &lt; 2e-16 ***\nORIGIN_SZSGSZ05      -1.7203916  0.0118945  -144.637  &lt; 2e-16 ***\nORIGIN_SZSGSZ06       0.4630857  0.0052886    87.563  &lt; 2e-16 ***\nORIGIN_SZSGSZ07      -0.7051233  0.0073133   -96.417  &lt; 2e-16 ***\nORIGIN_SZSKSZ01       0.2053928  0.0100710    20.395  &lt; 2e-16 ***\nORIGIN_SZSKSZ02       1.2630428  0.0063490   198.935  &lt; 2e-16 ***\nORIGIN_SZSKSZ03      -0.3035297  0.0096788   -31.360  &lt; 2e-16 ***\nORIGIN_SZSKSZ04      -1.7952886  0.0359225   -49.977  &lt; 2e-16 ***\nORIGIN_SZSKSZ05      -0.3836861  0.0176686   -21.716  &lt; 2e-16 ***\nORIGIN_SZSLSZ01      -2.5916326  0.0348001   -74.472  &lt; 2e-16 ***\nORIGIN_SZSLSZ04      -0.2251549  0.0088517   -25.436  &lt; 2e-16 ***\nORIGIN_SZSRSZ01      -2.9590365  0.0173638  -170.414  &lt; 2e-16 ***\nORIGIN_SZTHSZ01      -1.9639893  0.0570321   -34.437  &lt; 2e-16 ***\nORIGIN_SZTHSZ03      -1.7281304  0.0272797   -63.349  &lt; 2e-16 ***\nORIGIN_SZTHSZ04      -2.7837906  0.0343179   -81.118  &lt; 2e-16 ***\nORIGIN_SZTHSZ06      -2.1800693  0.0205491  -106.091  &lt; 2e-16 ***\nORIGIN_SZTMSZ01       0.8228136  0.0066824   123.131  &lt; 2e-16 ***\nORIGIN_SZTMSZ02       2.3174781  0.0044978   515.243  &lt; 2e-16 ***\nORIGIN_SZTMSZ03       1.7061757  0.0048615   350.957  &lt; 2e-16 ***\nORIGIN_SZTMSZ04       1.2407899  0.0058389   212.504  &lt; 2e-16 ***\nORIGIN_SZTMSZ05      -0.1000526  0.0124079    -8.064 7.41e-16 ***\nORIGIN_SZTNSZ01      -2.0347519  0.0139596  -145.760  &lt; 2e-16 ***\nORIGIN_SZTNSZ02      -1.8682671  0.0107901  -173.146  &lt; 2e-16 ***\nORIGIN_SZTNSZ03      -2.1737183  0.0146759  -148.115  &lt; 2e-16 ***\nORIGIN_SZTNSZ04      -0.5006452  0.0081501   -61.428  &lt; 2e-16 ***\nORIGIN_SZTPSZ01      -0.6722487  0.0075606   -88.914  &lt; 2e-16 ***\nORIGIN_SZTPSZ02       0.4552916  0.0050191    90.711  &lt; 2e-16 ***\nORIGIN_SZTPSZ03      -0.7865781  0.0072250  -108.869  &lt; 2e-16 ***\nORIGIN_SZTPSZ04      -0.7049044  0.0066456  -106.071  &lt; 2e-16 ***\nORIGIN_SZTPSZ05      -0.5574925  0.0070366   -79.227  &lt; 2e-16 ***\nORIGIN_SZTPSZ06      -0.4247282  0.0068709   -61.815  &lt; 2e-16 ***\nORIGIN_SZTPSZ07      -0.2846984  0.0071030   -40.081  &lt; 2e-16 ***\nORIGIN_SZTPSZ08      -1.0898051  0.0110046   -99.031  &lt; 2e-16 ***\nORIGIN_SZTPSZ09      -0.8092746  0.0079160  -102.232  &lt; 2e-16 ***\nORIGIN_SZTPSZ10      -0.9332072  0.0086809  -107.502  &lt; 2e-16 ***\nORIGIN_SZTPSZ11      -0.0421981  0.0064343    -6.558 5.44e-11 ***\nORIGIN_SZTPSZ12      -0.6330081  0.0078324   -80.819  &lt; 2e-16 ***\nORIGIN_SZTSSZ01      -1.7650409  0.0517357   -34.116  &lt; 2e-16 ***\nORIGIN_SZTSSZ02       1.1707267  0.0094178   124.310  &lt; 2e-16 ***\nORIGIN_SZTSSZ03       0.6581679  0.0095894    68.635  &lt; 2e-16 ***\nORIGIN_SZTSSZ04       0.8736493  0.0104965    83.233  &lt; 2e-16 ***\nORIGIN_SZTSSZ05       0.0957248  0.0178709     5.356 8.49e-08 ***\nORIGIN_SZTSSZ06       1.7581609  0.0206810    85.013  &lt; 2e-16 ***\nORIGIN_SZWCSZ01       0.8097950  0.0105622    76.669  &lt; 2e-16 ***\nORIGIN_SZWCSZ02      -1.9966163  0.0345747   -57.748  &lt; 2e-16 ***\nORIGIN_SZWCSZ03      -5.0687420  0.1474971   -34.365  &lt; 2e-16 ***\nORIGIN_SZWDSZ01       1.4926003  0.0047216   316.124  &lt; 2e-16 ***\nORIGIN_SZWDSZ02       0.9916597  0.0055755   177.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ03       1.5918065  0.0052180   305.062  &lt; 2e-16 ***\nORIGIN_SZWDSZ04       1.3717152  0.0060516   226.669  &lt; 2e-16 ***\nORIGIN_SZWDSZ05       0.6700111  0.0062287   107.569  &lt; 2e-16 ***\nORIGIN_SZWDSZ06       0.8115996  0.0060947   133.165  &lt; 2e-16 ***\nORIGIN_SZWDSZ07      -0.6488914  0.0093567   -69.351  &lt; 2e-16 ***\nORIGIN_SZWDSZ08      -0.3610234  0.0096440   -37.435  &lt; 2e-16 ***\nORIGIN_SZWDSZ09       1.4445461  0.0052279   276.317  &lt; 2e-16 ***\nORIGIN_SZYSSZ01      -0.2039272  0.0069548   -29.322  &lt; 2e-16 ***\nORIGIN_SZYSSZ02       0.8707707  0.0058957   147.697  &lt; 2e-16 ***\nORIGIN_SZYSSZ03       1.8348842  0.0050377   364.231  &lt; 2e-16 ***\nORIGIN_SZYSSZ04       1.0780641  0.0052960   203.564  &lt; 2e-16 ***\nORIGIN_SZYSSZ05       0.3222765  0.0069700    46.237  &lt; 2e-16 ***\nORIGIN_SZYSSZ06      -0.4424689  0.0124866   -35.435  &lt; 2e-16 ***\nORIGIN_SZYSSZ07      -1.0267883  0.0155821   -65.895  &lt; 2e-16 ***\nORIGIN_SZYSSZ08       0.1833117  0.0070935    25.842  &lt; 2e-16 ***\nORIGIN_SZYSSZ09       1.0766070  0.0050451   213.396  &lt; 2e-16 ***\nlog(DESTIN_AGE25_64)  0.0295428  0.0001051   280.998  &lt; 2e-16 ***\nlog(dist)            -1.7024691  0.0004625 -3681.042  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12983718  on 13993  degrees of freedom\nAIC: 13068835\n\nNumber of Fisher Scoring iterations: 6\n\n\nWe can examine how the constraints hold for destinations this time.\n\nCalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)\n\n[1] 0.4029115\n\n\n\n\nDestination constrained\nIn this section, we will fit a destination constrained SIM by using the code chunk below.\n\ndecSIM &lt;- glm(formula = TRIPS ~ \n                DESTIN_SZ + \n                log(ORIGIN_AGE25_64) + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(decSIM)\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_SZ + log(ORIGIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.4822997  0.0050784  3836.298  &lt; 2e-16 ***\nDESTIN_SZAMSZ02       0.1263056  0.0049743    25.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ03       0.0421788  0.0049859     8.460  &lt; 2e-16 ***\nDESTIN_SZAMSZ04      -1.1668479  0.0074254  -157.143  &lt; 2e-16 ***\nDESTIN_SZAMSZ05      -1.2586639  0.0075854  -165.931  &lt; 2e-16 ***\nDESTIN_SZAMSZ06      -1.1414791  0.0073474  -155.359  &lt; 2e-16 ***\nDESTIN_SZAMSZ07      -1.5565804  0.0109476  -142.185  &lt; 2e-16 ***\nDESTIN_SZAMSZ08      -0.3990754  0.0074159   -53.813  &lt; 2e-16 ***\nDESTIN_SZAMSZ09      -1.0109118  0.0076802  -131.626  &lt; 2e-16 ***\nDESTIN_SZAMSZ10       0.0159285  0.0051765     3.077  0.00209 ** \nDESTIN_SZAMSZ11      -0.3653273  0.0094866   -38.510  &lt; 2e-16 ***\nDESTIN_SZAMSZ12       0.5297606  0.0053243    99.500  &lt; 2e-16 ***\nDESTIN_SZBDSZ01       1.0394822  0.0044226   235.037  &lt; 2e-16 ***\nDESTIN_SZBDSZ02       0.1956964  0.0059564    32.855  &lt; 2e-16 ***\nDESTIN_SZBDSZ03       0.3209267  0.0053718    59.742  &lt; 2e-16 ***\nDESTIN_SZBDSZ04       1.2429874  0.0043104   288.370  &lt; 2e-16 ***\nDESTIN_SZBDSZ05       0.8535842  0.0046360   184.122  &lt; 2e-16 ***\nDESTIN_SZBDSZ06       0.5181443  0.0053736    96.423  &lt; 2e-16 ***\nDESTIN_SZBDSZ07      -0.5849371  0.0110468   -52.951  &lt; 2e-16 ***\nDESTIN_SZBDSZ08      -1.2871050  0.0128623  -100.068  &lt; 2e-16 ***\nDESTIN_SZBKSZ01      -1.0633560  0.0077771  -136.730  &lt; 2e-16 ***\nDESTIN_SZBKSZ02      -0.4065316  0.0066712   -60.938  &lt; 2e-16 ***\nDESTIN_SZBKSZ03      -0.6815674  0.0066509  -102.477  &lt; 2e-16 ***\nDESTIN_SZBKSZ04      -0.4185485  0.0058306   -71.785  &lt; 2e-16 ***\nDESTIN_SZBKSZ05      -0.8887654  0.0073867  -120.319  &lt; 2e-16 ***\nDESTIN_SZBKSZ06      -0.9436078  0.0068625  -137.501  &lt; 2e-16 ***\nDESTIN_SZBKSZ07      -0.0067325  0.0048408    -1.391  0.16430    \nDESTIN_SZBKSZ08      -1.2680903  0.0079177  -160.160  &lt; 2e-16 ***\nDESTIN_SZBKSZ09      -0.0350151  0.0054287    -6.450 1.12e-10 ***\nDESTIN_SZBLSZ01      -0.3045203  0.0081978   -37.146  &lt; 2e-16 ***\nDESTIN_SZBLSZ02       0.6432424  0.0074449    86.400  &lt; 2e-16 ***\nDESTIN_SZBLSZ03       1.9595113  0.0084705   231.333  &lt; 2e-16 ***\nDESTIN_SZBLSZ04       0.0149756  0.0172081     0.870  0.38415    \nDESTIN_SZBMSZ01      -0.0378127  0.0055294    -6.838 8.00e-12 ***\nDESTIN_SZBMSZ02      -0.8458055  0.0054043  -156.505  &lt; 2e-16 ***\nDESTIN_SZBMSZ03      -1.1334399  0.0063720  -177.878  &lt; 2e-16 ***\nDESTIN_SZBMSZ04      -1.1164759  0.0057743  -193.353  &lt; 2e-16 ***\nDESTIN_SZBMSZ05      -1.1078742  0.0078703  -140.766  &lt; 2e-16 ***\nDESTIN_SZBMSZ06      -2.2787234  0.0155126  -146.895  &lt; 2e-16 ***\nDESTIN_SZBMSZ07      -0.2739089  0.0051924   -52.752  &lt; 2e-16 ***\nDESTIN_SZBMSZ08      -1.6825978  0.0071842  -234.209  &lt; 2e-16 ***\nDESTIN_SZBMSZ09      -3.0047801  0.0159980  -187.823  &lt; 2e-16 ***\nDESTIN_SZBMSZ10      -2.2232689  0.0096907  -229.423  &lt; 2e-16 ***\nDESTIN_SZBMSZ11      -1.9657136  0.0086445  -227.394  &lt; 2e-16 ***\nDESTIN_SZBMSZ12      -1.5359286  0.0089658  -171.310  &lt; 2e-16 ***\nDESTIN_SZBMSZ13      -0.5657561  0.0059960   -94.355  &lt; 2e-16 ***\nDESTIN_SZBMSZ14      -1.6904858  0.0084858  -199.214  &lt; 2e-16 ***\nDESTIN_SZBMSZ15      -1.5268383  0.0079959  -190.953  &lt; 2e-16 ***\nDESTIN_SZBMSZ16      -2.2045600  0.0130872  -168.452  &lt; 2e-16 ***\nDESTIN_SZBMSZ17      -2.2992381  0.0184895  -124.353  &lt; 2e-16 ***\nDESTIN_SZBPSZ01      -0.8549497  0.0065168  -131.191  &lt; 2e-16 ***\nDESTIN_SZBPSZ02      -1.7470549  0.0095751  -182.457  &lt; 2e-16 ***\nDESTIN_SZBPSZ03      -1.4015145  0.0090888  -154.203  &lt; 2e-16 ***\nDESTIN_SZBPSZ04      -0.5250632  0.0066496   -78.962  &lt; 2e-16 ***\nDESTIN_SZBPSZ05       0.3413171  0.0046404    73.553  &lt; 2e-16 ***\nDESTIN_SZBPSZ06      -0.8569188  0.0090795   -94.380  &lt; 2e-16 ***\nDESTIN_SZBPSZ07      -0.0751284  0.0089704    -8.375  &lt; 2e-16 ***\nDESTIN_SZBSSZ01       0.1015228  0.0055735    18.215  &lt; 2e-16 ***\nDESTIN_SZBSSZ02      -0.7066412  0.0063845  -110.682  &lt; 2e-16 ***\nDESTIN_SZBSSZ03       0.1622730  0.0046689    34.756  &lt; 2e-16 ***\nDESTIN_SZBTSZ01       0.5470615  0.0047984   114.009  &lt; 2e-16 ***\nDESTIN_SZBTSZ02      -0.1393371  0.0078266   -17.803  &lt; 2e-16 ***\nDESTIN_SZBTSZ03       0.1474771  0.0059428    24.816  &lt; 2e-16 ***\nDESTIN_SZBTSZ04      -1.2857827  0.0122000  -105.392  &lt; 2e-16 ***\nDESTIN_SZBTSZ05      -0.2629188  0.0081769   -32.154  &lt; 2e-16 ***\nDESTIN_SZBTSZ06      -0.8319920  0.0081401  -102.209  &lt; 2e-16 ***\nDESTIN_SZBTSZ07      -1.8829448  0.0121227  -155.324  &lt; 2e-16 ***\nDESTIN_SZBTSZ08      -1.5732123  0.0116752  -134.748  &lt; 2e-16 ***\nDESTIN_SZCBSZ01      -3.5334327  0.3333510   -10.600  &lt; 2e-16 ***\nDESTIN_SZCCSZ01      -0.2129306  0.0093782   -22.705  &lt; 2e-16 ***\nDESTIN_SZCHSZ01      -0.1494972  0.0113078   -13.221  &lt; 2e-16 ***\nDESTIN_SZCHSZ02       0.0041774  0.0063195     0.661  0.50860    \nDESTIN_SZCHSZ03       2.5565450  0.0046495   549.857  &lt; 2e-16 ***\nDESTIN_SZCKSZ01       0.0489719  0.0053801     9.102  &lt; 2e-16 ***\nDESTIN_SZCKSZ02      -0.3548993  0.0060671   -58.496  &lt; 2e-16 ***\nDESTIN_SZCKSZ03       0.5386351  0.0044913   119.928  &lt; 2e-16 ***\nDESTIN_SZCKSZ04      -0.4425512  0.0073837   -59.936  &lt; 2e-16 ***\nDESTIN_SZCKSZ05      -0.4092591  0.0077267   -52.967  &lt; 2e-16 ***\nDESTIN_SZCKSZ06       0.2207041  0.0074252    29.724  &lt; 2e-16 ***\nDESTIN_SZCLSZ01       0.2851460  0.0052362    54.457  &lt; 2e-16 ***\nDESTIN_SZCLSZ02      -1.9270528  0.0147688  -130.482  &lt; 2e-16 ***\nDESTIN_SZCLSZ03      -0.6266521  0.0086780   -72.212  &lt; 2e-16 ***\nDESTIN_SZCLSZ04      -0.1335581  0.0054216   -24.634  &lt; 2e-16 ***\nDESTIN_SZCLSZ05      -0.8912963  0.0096015   -92.829  &lt; 2e-16 ***\nDESTIN_SZCLSZ06       0.1781234  0.0048150    36.993  &lt; 2e-16 ***\nDESTIN_SZCLSZ07      -0.5609619  0.0062277   -90.075  &lt; 2e-16 ***\nDESTIN_SZCLSZ08      -0.3875308  0.0068390   -56.665  &lt; 2e-16 ***\nDESTIN_SZCLSZ09       0.2539453  0.0072623    34.968  &lt; 2e-16 ***\nDESTIN_SZDTSZ02      -2.5036295  0.0373421   -67.046  &lt; 2e-16 ***\nDESTIN_SZDTSZ03      -0.8956407  0.0149971   -59.721  &lt; 2e-16 ***\nDESTIN_SZDTSZ13      -1.6562176  0.0175441   -94.403  &lt; 2e-16 ***\nDESTIN_SZGLSZ01      -0.2716152  0.0056553   -48.029  &lt; 2e-16 ***\nDESTIN_SZGLSZ02      -0.1735665  0.0055548   -31.246  &lt; 2e-16 ***\nDESTIN_SZGLSZ03       0.7029507  0.0044934   156.441  &lt; 2e-16 ***\nDESTIN_SZGLSZ04       0.5788027  0.0045449   127.351  &lt; 2e-16 ***\nDESTIN_SZGLSZ05       0.6865291  0.0045131   152.118  &lt; 2e-16 ***\nDESTIN_SZHGSZ01       0.3275950  0.0043866    74.681  &lt; 2e-16 ***\nDESTIN_SZHGSZ02      -0.6326974  0.0063517   -99.610  &lt; 2e-16 ***\nDESTIN_SZHGSZ03      -1.0597982  0.0073914  -143.382  &lt; 2e-16 ***\nDESTIN_SZHGSZ04      -0.2267013  0.0052178   -43.448  &lt; 2e-16 ***\nDESTIN_SZHGSZ05      -0.3063050  0.0055452   -55.238  &lt; 2e-16 ***\nDESTIN_SZHGSZ06      -0.7483961  0.0065544  -114.182  &lt; 2e-16 ***\nDESTIN_SZHGSZ07       0.1096958  0.0051309    21.379  &lt; 2e-16 ***\nDESTIN_SZHGSZ08      -0.1374201  0.0056692   -24.240  &lt; 2e-16 ***\nDESTIN_SZHGSZ09       0.0775400  0.0060230    12.874  &lt; 2e-16 ***\nDESTIN_SZHGSZ10      -3.3017475  0.0289292  -114.132  &lt; 2e-16 ***\nDESTIN_SZJESZ01      -0.0489065  0.0057246    -8.543  &lt; 2e-16 ***\nDESTIN_SZJESZ02      -0.5101614  0.0060074   -84.921  &lt; 2e-16 ***\nDESTIN_SZJESZ03      -0.5328921  0.0064129   -83.097  &lt; 2e-16 ***\nDESTIN_SZJESZ04      -0.7348953  0.0082249   -89.351  &lt; 2e-16 ***\nDESTIN_SZJESZ05      -1.0864570  0.0111740   -97.231  &lt; 2e-16 ***\nDESTIN_SZJESZ06       0.2407920  0.0046801    51.451  &lt; 2e-16 ***\nDESTIN_SZJESZ07      -1.1523093  0.0090103  -127.888  &lt; 2e-16 ***\nDESTIN_SZJESZ08      -0.4627356  0.0094529   -48.952  &lt; 2e-16 ***\nDESTIN_SZJESZ09       0.0528616  0.0068126     7.759 8.53e-15 ***\nDESTIN_SZJESZ10       1.0240660  0.0084045   121.848  &lt; 2e-16 ***\nDESTIN_SZJESZ11       0.7875517  0.0076251   103.284  &lt; 2e-16 ***\nDESTIN_SZJWSZ01      -0.1533418  0.0076198   -20.124  &lt; 2e-16 ***\nDESTIN_SZJWSZ02      -0.0011019  0.0059389    -0.186  0.85280    \nDESTIN_SZJWSZ03       0.9063789  0.0046747   193.892  &lt; 2e-16 ***\nDESTIN_SZJWSZ04       0.7019286  0.0049743   141.112  &lt; 2e-16 ***\nDESTIN_SZJWSZ05      -0.5197057  0.0072971   -71.220  &lt; 2e-16 ***\nDESTIN_SZJWSZ06       0.3350986  0.0061171    54.780  &lt; 2e-16 ***\nDESTIN_SZJWSZ07      -0.5961960  0.0328336   -18.158  &lt; 2e-16 ***\nDESTIN_SZJWSZ08       0.8054662  0.0056006   143.819  &lt; 2e-16 ***\nDESTIN_SZJWSZ09       1.5860146  0.0040282   393.723  &lt; 2e-16 ***\nDESTIN_SZKLSZ01      -0.6500838  0.0063560  -102.279  &lt; 2e-16 ***\nDESTIN_SZKLSZ02      -0.7039434  0.0064465  -109.197  &lt; 2e-16 ***\nDESTIN_SZKLSZ03      -1.1972384  0.0075577  -158.413  &lt; 2e-16 ***\nDESTIN_SZKLSZ04      -1.7172228  0.0097573  -175.993  &lt; 2e-16 ***\nDESTIN_SZKLSZ05      -0.6042386  0.0093730   -64.466  &lt; 2e-16 ***\nDESTIN_SZKLSZ06      -3.0201496  0.0389503   -77.539  &lt; 2e-16 ***\nDESTIN_SZKLSZ07      -1.1522413  0.0076607  -150.409  &lt; 2e-16 ***\nDESTIN_SZKLSZ08      -0.6977825  0.0057610  -121.122  &lt; 2e-16 ***\nDESTIN_SZLKSZ01      -0.6895952  0.0268661   -25.668  &lt; 2e-16 ***\nDESTIN_SZMDSZ01      -0.7155951  0.0228203   -31.358  &lt; 2e-16 ***\nDESTIN_SZMDSZ02      -0.8153643  0.0123003   -66.288  &lt; 2e-16 ***\nDESTIN_SZMDSZ03      -2.7745226  0.0301326   -92.077  &lt; 2e-16 ***\nDESTIN_SZMPSZ01      -0.5492095  0.0087198   -62.984  &lt; 2e-16 ***\nDESTIN_SZMPSZ02      -0.6104744  0.0069346   -88.033  &lt; 2e-16 ***\nDESTIN_SZMPSZ03       0.2775047  0.0054964    50.489  &lt; 2e-16 ***\nDESTIN_SZMUSZ02      -2.6322870  0.0214943  -122.464  &lt; 2e-16 ***\nDESTIN_SZNTSZ01      -4.0762008  0.0531046   -76.758  &lt; 2e-16 ***\nDESTIN_SZNTSZ02      -1.9765545  0.0125659  -157.296  &lt; 2e-16 ***\nDESTIN_SZNTSZ03      -1.4563069  0.0085433  -170.462  &lt; 2e-16 ***\nDESTIN_SZNTSZ05      -2.0125598  0.0270737   -74.336  &lt; 2e-16 ***\nDESTIN_SZNTSZ06      -3.0145357  0.0504986   -59.695  &lt; 2e-16 ***\nDESTIN_SZNVSZ01      -0.4693625  0.0053866   -87.135  &lt; 2e-16 ***\nDESTIN_SZNVSZ02      -0.4525631  0.0060428   -74.894  &lt; 2e-16 ***\nDESTIN_SZNVSZ03      -0.4821492  0.0064725   -74.492  &lt; 2e-16 ***\nDESTIN_SZNVSZ04      -1.8929756  0.0128397  -147.432  &lt; 2e-16 ***\nDESTIN_SZNVSZ05      -1.4501752  0.0099737  -145.400  &lt; 2e-16 ***\nDESTIN_SZPGSZ01      -1.2305867  0.0174321   -70.593  &lt; 2e-16 ***\nDESTIN_SZPGSZ02      -0.8232919  0.0080153  -102.715  &lt; 2e-16 ***\nDESTIN_SZPGSZ03       0.2138480  0.0050850    42.054  &lt; 2e-16 ***\nDESTIN_SZPGSZ04       0.1045757  0.0053579    19.518  &lt; 2e-16 ***\nDESTIN_SZPGSZ05      -0.7542450  0.0088883   -84.858  &lt; 2e-16 ***\nDESTIN_SZPLSZ01      -0.0098642  0.0080428    -1.226  0.22003    \nDESTIN_SZPLSZ02      -1.2630412  0.0152594   -82.771  &lt; 2e-16 ***\nDESTIN_SZPLSZ03      -0.1554479  0.0108611   -14.312  &lt; 2e-16 ***\nDESTIN_SZPLSZ04      -1.5505819  0.0114768  -135.105  &lt; 2e-16 ***\nDESTIN_SZPLSZ05      -0.2417805  0.0130391   -18.543  &lt; 2e-16 ***\nDESTIN_SZPNSZ01       0.7926715  0.0073628   107.659  &lt; 2e-16 ***\nDESTIN_SZPNSZ02       2.1914920  0.0073537   298.013  &lt; 2e-16 ***\nDESTIN_SZPNSZ03       1.0246845  0.0086874   117.951  &lt; 2e-16 ***\nDESTIN_SZPNSZ04       2.5522612  0.0091789   278.057  &lt; 2e-16 ***\nDESTIN_SZPNSZ05       1.7995301  0.0138562   129.872  &lt; 2e-16 ***\nDESTIN_SZPRSZ01      -0.6576686  0.0096037   -68.481  &lt; 2e-16 ***\nDESTIN_SZPRSZ02       0.3113532  0.0059851    52.021  &lt; 2e-16 ***\nDESTIN_SZPRSZ03       0.9255296  0.0044779   206.687  &lt; 2e-16 ***\nDESTIN_SZPRSZ04      -0.0028578  0.0093218    -0.307  0.75917    \nDESTIN_SZPRSZ05       0.2457863  0.0058261    42.187  &lt; 2e-16 ***\nDESTIN_SZPRSZ06       0.3692137  0.0064542    57.205  &lt; 2e-16 ***\nDESTIN_SZPRSZ07      -1.6733306  0.0138440  -120.871  &lt; 2e-16 ***\nDESTIN_SZPRSZ08      -0.2221048  0.0074846   -29.675  &lt; 2e-16 ***\nDESTIN_SZQTSZ01      -1.0185488  0.0093179  -109.311  &lt; 2e-16 ***\nDESTIN_SZQTSZ02      -1.2802688  0.0081670  -156.761  &lt; 2e-16 ***\nDESTIN_SZQTSZ03      -1.3322708  0.0079106  -168.415  &lt; 2e-16 ***\nDESTIN_SZQTSZ04      -1.1803631  0.0077366  -152.568  &lt; 2e-16 ***\nDESTIN_SZQTSZ05      -1.2215818  0.0072829  -167.734  &lt; 2e-16 ***\nDESTIN_SZQTSZ06      -1.3213145  0.0074858  -176.509  &lt; 2e-16 ***\nDESTIN_SZQTSZ07      -1.6426306  0.0123347  -133.171  &lt; 2e-16 ***\nDESTIN_SZQTSZ08      -0.2224169  0.0058405   -38.082  &lt; 2e-16 ***\nDESTIN_SZQTSZ09      -0.8142678  0.0069796  -116.665  &lt; 2e-16 ***\nDESTIN_SZQTSZ10      -0.1090496  0.0062573   -17.428  &lt; 2e-16 ***\nDESTIN_SZQTSZ11      -0.0108951  0.0061145    -1.782  0.07477 .  \nDESTIN_SZQTSZ12      -0.8582515  0.0090243   -95.105  &lt; 2e-16 ***\nDESTIN_SZQTSZ13       0.1834409  0.0065231    28.122  &lt; 2e-16 ***\nDESTIN_SZQTSZ14       0.1994454  0.0073615    27.093  &lt; 2e-16 ***\nDESTIN_SZQTSZ15       0.6740197  0.0088699    75.990  &lt; 2e-16 ***\nDESTIN_SZRCSZ01      -0.7746427  0.0079375   -97.593  &lt; 2e-16 ***\nDESTIN_SZRCSZ06      -1.4394098  0.0209931   -68.566  &lt; 2e-16 ***\nDESTIN_SZRVSZ01      -2.6060495  0.0175759  -148.274  &lt; 2e-16 ***\nDESTIN_SZRVSZ02      -2.5823769  0.0354706   -72.803  &lt; 2e-16 ***\nDESTIN_SZRVSZ03      -2.5890601  0.0152644  -169.614  &lt; 2e-16 ***\nDESTIN_SZRVSZ04      -2.2277482  0.0165661  -134.477  &lt; 2e-16 ***\nDESTIN_SZRVSZ05      -3.8610445  0.0298251  -129.456  &lt; 2e-16 ***\nDESTIN_SZSBSZ01      -1.2035529  0.0103954  -115.777  &lt; 2e-16 ***\nDESTIN_SZSBSZ02      -1.0267199  0.0085239  -120.452  &lt; 2e-16 ***\nDESTIN_SZSBSZ03       0.5977382  0.0050336   118.750  &lt; 2e-16 ***\nDESTIN_SZSBSZ04       0.5362769  0.0060573    88.534  &lt; 2e-16 ***\nDESTIN_SZSBSZ05      -1.0440525  0.0089622  -116.495  &lt; 2e-16 ***\nDESTIN_SZSBSZ06      -1.3939595  0.0246679   -56.509  &lt; 2e-16 ***\nDESTIN_SZSBSZ07       0.1029116  0.0235414     4.372 1.23e-05 ***\nDESTIN_SZSBSZ08       1.3564902  0.0060529   224.105  &lt; 2e-16 ***\nDESTIN_SZSBSZ09       0.4573712  0.0056585    80.829  &lt; 2e-16 ***\nDESTIN_SZSESZ02      -0.1553609  0.0056716   -27.393  &lt; 2e-16 ***\nDESTIN_SZSESZ03       0.5412776  0.0043801   123.576  &lt; 2e-16 ***\nDESTIN_SZSESZ04      -0.6382091  0.0065411   -97.568  &lt; 2e-16 ***\nDESTIN_SZSESZ05      -0.3332093  0.0055002   -60.581  &lt; 2e-16 ***\nDESTIN_SZSESZ06      -0.3085951  0.0072340   -42.659  &lt; 2e-16 ***\nDESTIN_SZSESZ07      -2.6237684  0.0245753  -106.764  &lt; 2e-16 ***\nDESTIN_SZSGSZ01      -0.1062372  0.0066634   -15.943  &lt; 2e-16 ***\nDESTIN_SZSGSZ02      -0.0475568  0.0058908    -8.073 6.85e-16 ***\nDESTIN_SZSGSZ03      -0.2118402  0.0055056   -38.477  &lt; 2e-16 ***\nDESTIN_SZSGSZ04      -0.1099618  0.0054841   -20.051  &lt; 2e-16 ***\nDESTIN_SZSGSZ05      -2.1556963  0.0113821  -189.394  &lt; 2e-16 ***\nDESTIN_SZSGSZ06       0.4416352  0.0043842   100.734  &lt; 2e-16 ***\nDESTIN_SZSGSZ07      -0.3949335  0.0059250   -66.655  &lt; 2e-16 ***\nDESTIN_SZSISZ01      -1.2847094  0.0288610   -44.514  &lt; 2e-16 ***\nDESTIN_SZSKSZ01       0.3089834  0.0082924    37.261  &lt; 2e-16 ***\nDESTIN_SZSKSZ02       1.4139309  0.0059981   235.729  &lt; 2e-16 ***\nDESTIN_SZSKSZ03       0.2427688  0.0067373    36.034  &lt; 2e-16 ***\nDESTIN_SZSKSZ04      -0.2527488  0.0161286   -15.671  &lt; 2e-16 ***\nDESTIN_SZSKSZ05       0.6046051  0.0122766    49.249  &lt; 2e-16 ***\nDESTIN_SZSLSZ01      -0.3927387  0.0099790   -39.356  &lt; 2e-16 ***\nDESTIN_SZSLSZ04      -0.5942110  0.0086225   -68.914  &lt; 2e-16 ***\nDESTIN_SZSRSZ01      -2.6855766  0.0138707  -193.615  &lt; 2e-16 ***\nDESTIN_SZTHSZ01      -3.2750084  0.0402668   -81.333  &lt; 2e-16 ***\nDESTIN_SZTHSZ03      -1.7964408  0.0261810   -68.616  &lt; 2e-16 ***\nDESTIN_SZTHSZ04      -2.6323994  0.0241831  -108.853  &lt; 2e-16 ***\nDESTIN_SZTHSZ06      -1.9444390  0.0166052  -117.098  &lt; 2e-16 ***\nDESTIN_SZTMSZ01       0.3856054  0.0063086    61.123  &lt; 2e-16 ***\nDESTIN_SZTMSZ02       1.8586526  0.0039229   473.790  &lt; 2e-16 ***\nDESTIN_SZTMSZ03       1.2601385  0.0044018   286.278  &lt; 2e-16 ***\nDESTIN_SZTMSZ04       1.5884327  0.0043362   366.316  &lt; 2e-16 ***\nDESTIN_SZTMSZ05       1.0377553  0.0063271   164.018  &lt; 2e-16 ***\nDESTIN_SZTNSZ01      -0.9954275  0.0080345  -123.895  &lt; 2e-16 ***\nDESTIN_SZTNSZ02      -2.1032696  0.0109228  -192.557  &lt; 2e-16 ***\nDESTIN_SZTNSZ03      -2.0044892  0.0129215  -155.128  &lt; 2e-16 ***\nDESTIN_SZTNSZ04      -0.9750326  0.0081677  -119.377  &lt; 2e-16 ***\nDESTIN_SZTPSZ01      -0.7788383  0.0068769  -113.254  &lt; 2e-16 ***\nDESTIN_SZTPSZ02       0.2866080  0.0042843    66.898  &lt; 2e-16 ***\nDESTIN_SZTPSZ03      -0.8749841  0.0065470  -133.646  &lt; 2e-16 ***\nDESTIN_SZTPSZ04      -1.6852792  0.0081488  -206.812  &lt; 2e-16 ***\nDESTIN_SZTPSZ05      -1.3721346  0.0068230  -201.104  &lt; 2e-16 ***\nDESTIN_SZTPSZ06      -0.7832133  0.0069164  -113.239  &lt; 2e-16 ***\nDESTIN_SZTPSZ07      -2.3109126  0.0130830  -176.635  &lt; 2e-16 ***\nDESTIN_SZTPSZ08      -1.6406531  0.0104897  -156.406  &lt; 2e-16 ***\nDESTIN_SZTPSZ09      -0.5636273  0.0076848   -73.343  &lt; 2e-16 ***\nDESTIN_SZTPSZ10      -1.5640843  0.0099984  -156.433  &lt; 2e-16 ***\nDESTIN_SZTPSZ11      -0.3700482  0.0059834   -61.846  &lt; 2e-16 ***\nDESTIN_SZTPSZ12      -0.8828228  0.0072302  -122.102  &lt; 2e-16 ***\nDESTIN_SZTSSZ01       0.3529526  0.0221887    15.907  &lt; 2e-16 ***\nDESTIN_SZTSSZ02       1.0265792  0.0153515    66.871  &lt; 2e-16 ***\nDESTIN_SZTSSZ03       1.9647347  0.0092388   212.662  &lt; 2e-16 ***\nDESTIN_SZTSSZ04       1.8649836  0.0089976   207.275  &lt; 2e-16 ***\nDESTIN_SZTSSZ05       2.8437058  0.0085738   331.673  &lt; 2e-16 ***\nDESTIN_SZTSSZ06       3.4238870  0.0161304   212.263  &lt; 2e-16 ***\nDESTIN_SZWCSZ01       2.9550693  0.0051690   571.689  &lt; 2e-16 ***\nDESTIN_SZWCSZ02      -0.8214103  0.0129213   -63.570  &lt; 2e-16 ***\nDESTIN_SZWCSZ03      -1.7393427  0.0347472   -50.057  &lt; 2e-16 ***\nDESTIN_SZWDSZ01       1.3424417  0.0039957   335.972  &lt; 2e-16 ***\nDESTIN_SZWDSZ02      -0.2103694  0.0068601   -30.666  &lt; 2e-16 ***\nDESTIN_SZWDSZ03       0.8268551  0.0051363   160.983  &lt; 2e-16 ***\nDESTIN_SZWDSZ04      -0.0643997  0.0079076    -8.144 3.82e-16 ***\nDESTIN_SZWDSZ05       0.0451985  0.0075732     5.968 2.40e-09 ***\nDESTIN_SZWDSZ06       0.6981330  0.0051936   134.423  &lt; 2e-16 ***\nDESTIN_SZWDSZ07      -0.0403233  0.0067749    -5.952 2.65e-09 ***\nDESTIN_SZWDSZ08       0.2850631  0.0069225    41.179  &lt; 2e-16 ***\nDESTIN_SZWDSZ09       1.3016106  0.0050365   258.433  &lt; 2e-16 ***\nDESTIN_SZYSSZ01       0.7598564  0.0044144   172.133  &lt; 2e-16 ***\nDESTIN_SZYSSZ02       0.2648061  0.0058239    45.469  &lt; 2e-16 ***\nDESTIN_SZYSSZ03      -0.0412163  0.0068337    -6.031 1.63e-09 ***\nDESTIN_SZYSSZ04      -0.0561054  0.0060829    -9.223  &lt; 2e-16 ***\nDESTIN_SZYSSZ05      -0.9970159  0.0121827   -81.839  &lt; 2e-16 ***\nDESTIN_SZYSSZ06      -1.3808376  0.0125738  -109.819  &lt; 2e-16 ***\nDESTIN_SZYSSZ07      -0.7128364  0.0165296   -43.125  &lt; 2e-16 ***\nDESTIN_SZYSSZ08       0.9409510  0.0045886   205.064  &lt; 2e-16 ***\nDESTIN_SZYSSZ09       0.3738436  0.0047971    77.930  &lt; 2e-16 ***\nlog(ORIGIN_AGE25_64)  0.1928847  0.0001667  1157.214  &lt; 2e-16 ***\nlog(dist)            -1.7828141  0.0004794 -3718.501  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12319763  on 13992  degrees of freedom\nAIC: 12404881\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations this time.\n\nCalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)\n\n[1] 0.496166\n\n\n\n\nDoubly constrained\nIn this section, we will fit a doubly constrained SIM by using the code chunk below.\n\ndbcSIM &lt;- glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(dbcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(dist), family = poisson(link = \"log\"), \n    data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     21.9587595  0.0066831  3285.715  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  0.4778050  0.0054127    88.275  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.2895973  0.0055517    52.163  &lt; 2e-16 ***\nORIGIN_SZAMSZ04 -0.2628080  0.0060720   -43.282  &lt; 2e-16 ***\nORIGIN_SZAMSZ05 -0.2631404  0.0069008   -38.132  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.1722337  0.0062028    27.767  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.9883200  0.0111224   -88.859  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.4052821  0.0104095   -38.934  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.0356290  0.0064816     5.497 3.86e-08 ***\nORIGIN_SZAMSZ10  0.4815569  0.0055521    86.735  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.4440079  0.0146079   -98.851  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7862677  0.0128071  -139.475  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8653749  0.0054381   159.132  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.0841000  0.0062834    13.385  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.3158343  0.0057510    54.918  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4556701  0.0049986   291.215  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.6363125  0.0057193   111.257  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.6749341  0.0058650   115.078  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -1.2176407  0.0113698  -107.095  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -0.9803580  0.0105604   -92.833  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.2919642  0.0080763   -36.151  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.4609570  0.0067997    67.791  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.6273448  0.0065989    95.068  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.2499063  0.0076555   -32.644  &lt; 2e-16 ***\nORIGIN_SZBKSZ05 -0.2628428  0.0078905   -33.311  &lt; 2e-16 ***\nORIGIN_SZBKSZ06 -0.2174034  0.0075134   -28.936  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7094093  0.0058574   121.114  &lt; 2e-16 ***\nORIGIN_SZBKSZ08 -0.1614362  0.0067626   -23.872  &lt; 2e-16 ***\nORIGIN_SZBKSZ09 -0.2739085  0.0072969   -37.537  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -2.4281074  0.0181172  -134.022  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.7305447  0.0219341  -124.489  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -3.3071431  0.0540398   -61.198  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.4550671  0.0263946   -93.014  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.1198976  0.0065964    18.176  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.3908667  0.0083230  -167.112  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.6999122  0.0069754  -100.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ04 -0.2691159  0.0066184   -40.662  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -2.6163780  0.0190989  -136.991  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -2.9729956  0.0197182  -150.774  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.7309916  0.0072407  -100.956  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -1.0019514  0.0073169  -136.936  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -1.3667460  0.0105325  -129.764  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -1.6907268  0.0106687  -158.476  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -1.2288802  0.0082919  -148.202  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -1.6517767  0.0115101  -143.507  &lt; 2e-16 ***\nORIGIN_SZBMSZ13 -0.7251351  0.0075289   -96.314  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -1.1534912  0.0082629  -139.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ15 -0.5476774  0.0075710   -72.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -1.5195034  0.0111459  -136.329  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.6026767  0.0184419   -86.904  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5571291  0.0071866    77.523  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.0523197  0.0082259     6.360 2.01e-10 ***\nORIGIN_SZBPSZ03  0.2942047  0.0080482    36.555  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.6246296  0.0065878    94.816  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.8663708  0.0060852   142.372  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -0.9896182  0.0109551   -90.334  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.5219250  0.0101830   -51.255  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.3299588  0.0066440    49.663  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.2851357  0.0057077    49.956  &lt; 2e-16 ***\nORIGIN_SZBSSZ03 -0.2084740  0.0063364   -32.901  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.1425664  0.0071103    20.051  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.5591999  0.0093616   -59.733  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.3648190  0.0081677   -44.666  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -1.4555078  0.0120138  -121.152  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -0.8635510  0.0133848   -64.517  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -1.1383111  0.0106421  -106.963  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -2.3477669  0.0160858  -145.953  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.2918779  0.0124862  -103.464  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -3.3713588  0.0578683   -58.259  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -0.6029242  0.0153385   -39.308  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -0.7641380  0.0135100   -56.561  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.8400736  0.0101951   -82.400  &lt; 2e-16 ***\nORIGIN_SZCHSZ03  1.2753127  0.0072576   175.720  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.2470943  0.0067135    36.806  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  0.5793581  0.0070498    82.181  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  1.0795767  0.0060642   178.025  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.4947920  0.0063122   236.808  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  0.7457580  0.0074071   100.681  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  0.5760952  0.0094861    60.730  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.9061335  0.0098617   -91.884  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.7609479  0.0156124  -112.791  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -1.0081325  0.0095171  -105.929  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.6181200  0.0057953   106.659  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -2.0462335  0.0168934  -121.127  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.7902389  0.0055680   141.924  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.5472929  0.0071001   -77.082  &lt; 2e-16 ***\nORIGIN_SZCLSZ08 -0.2197650  0.0077460   -28.372  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -1.8175782  0.0195989   -92.739  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -3.7618796  0.0872098   -43.136  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -3.4514766  0.0840812   -41.049  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -3.0627578  0.0352485   -86.891  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.8055929  0.0111938  -161.303  &lt; 2e-16 ***\nORIGIN_SZGLSZ02 -0.1588829  0.0061413   -25.871  &lt; 2e-16 ***\nORIGIN_SZGLSZ03 -0.2508524  0.0064276   -39.027  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.8819358  0.0051993   169.627  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.6062778  0.0053735   112.828  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.3841503  0.0056776    67.660  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.3962330  0.0057579    68.815  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.2159531  0.0061671    35.017  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.7831941  0.0052216   149.992  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.1741558  0.0051799   226.677  &lt; 2e-16 ***\nORIGIN_SZHGSZ06 -0.1891403  0.0065556   -28.852  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.3105421  0.0057186    54.304  &lt; 2e-16 ***\nORIGIN_SZHGSZ08 -0.0766364  0.0063474   -12.074  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -1.2211107  0.0101434  -120.384  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.4844709  0.0504793   -69.028  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4916496  0.0063444    77.493  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.1343893  0.0063762    21.077  &lt; 2e-16 ***\nORIGIN_SZJESZ03 -0.2761723  0.0068085   -40.563  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.5932744  0.0121402  -131.240  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.3041311  0.0160245  -143.788  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.2811076  0.0062495    44.981  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.9413956  0.0136276  -142.461  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -1.3315645  0.0143168   -93.007  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.4418314  0.0069208    63.841  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -1.5551555  0.0236523   -65.751  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -1.8888230  0.0224630   -84.086  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.2564586  0.0084699    30.279  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.6899398  0.0061751   111.729  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.4761229  0.0057392   257.198  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.5701272  0.0065749    86.713  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -2.1253657  0.0150769  -140.968  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.5307265  0.0131906  -116.047  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.8801618  0.0360772   -79.833  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  1.4428820  0.0059638   241.938  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.8968475  0.0055649   340.860  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.1116580  0.0059844    18.658  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.9618787  0.0077344  -124.364  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.7070626  0.0070275  -100.613  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -2.2742765  0.0139991  -162.459  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -1.1907262  0.0123719   -96.244  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -5.9774897  0.1857994   -32.172  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -1.4258369  0.0103083  -138.320  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -1.7625888  0.0116107  -151.808  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.0541388  0.0448216   -45.829  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -0.8571117  0.0321054   -26.697  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.6034597  0.0120724   -49.987  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -2.1681163  0.0201078  -107.825  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.9331562  0.0096218   -96.984  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -1.0268229  0.0081379  -126.178  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0054001  0.0066875     0.807 0.419385    \nORIGIN_SZMUSZ02 -3.6269863  0.1105492   -32.809  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -3.0593717  0.0399843   -76.514  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -3.3331415  0.0251754  -132.397  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.8351522  0.0090372   -92.413  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -4.2082472  0.0583343   -72.140  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.8549296  0.0593793   -64.920  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.2789069  0.0056024    49.784  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.6036857  0.0077126   -78.273  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0072683  0.0092678  -108.685  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -0.8723996  0.0101399   -86.037  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.1552928  0.0183064  -117.734  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.0520607  0.0157846     3.298 0.000973 ***\nORIGIN_SZPGSZ02 -0.3481687  0.0089328   -38.976  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  0.9095292  0.0058835   154.590  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.3653717  0.0054727   249.489  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.3762720  0.0073841    50.957  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.9142754  0.0136552   -66.954  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.0987582  0.0175891   -62.468  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -2.3427113  0.0474176   -49.406  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -2.9140779  0.0374458   -77.821  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.2381965  0.0261572   -85.567  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9659006  0.0075177   128.484  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -0.0158348  0.0143869    -1.101 0.271053    \nORIGIN_SZPNSZ03 -2.1837321  0.0224396   -97.316  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -3.2481509  0.0370762   -87.608  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -2.0450679  0.0328165   -62.318  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6701245  0.0141567   -47.336  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.7931907  0.0058079   136.570  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.4249094  0.0058610    72.498  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.8529967  0.0090997   -93.739  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  0.7865479  0.0055282   142.278  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -1.3303664  0.0134512   -98.903  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -3.0458370  0.0181514  -167.802  &lt; 2e-16 ***\nORIGIN_SZPRSZ08 -0.5342399  0.0075966   -70.327  &lt; 2e-16 ***\nORIGIN_SZQTSZ01 -0.2548930  0.0086485   -29.473  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.8662439  0.0076549  -113.162  &lt; 2e-16 ***\nORIGIN_SZQTSZ03 -0.0890168  0.0072455   -12.286  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.4634370  0.0089384  -163.724  &lt; 2e-16 ***\nORIGIN_SZQTSZ05 -0.6535669  0.0077612   -84.210  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.8275765  0.0081835  -101.128  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.5369800  0.0112808  -136.248  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.4437979  0.0075302   -58.936  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.8184934  0.0083589   -97.918  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.6906597  0.0080980   -85.288  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -2.3251162  0.0154191  -150.795  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -3.0442790  0.0208985  -145.670  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.7241013  0.0093441   -77.493  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.8225351  0.0138207  -131.870  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -0.8720806  0.0138589   -62.926  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -1.8063415  0.0144295  -125.184  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.5370905  0.0101573   -52.877  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.7426167  0.0341386   -80.338  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -3.0827269  0.0302299  -101.976  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -2.9133853  0.0262543  -110.968  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -3.4220022  0.0582209   -58.776  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -2.6206257  0.0197470  -132.710  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.1010337  0.0085117    11.870  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.8810456  0.0098244   -89.680  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.8303668  0.0063009   131.785  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.3489128  0.0071456    48.829  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.3182914  0.0085560   -37.201  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -0.9074308  0.0200035   -45.364  &lt; 2e-16 ***\nORIGIN_SZSBSZ07 -0.2217124  0.0167188   -13.261  &lt; 2e-16 ***\nORIGIN_SZSBSZ08 -1.3007367  0.0178771   -72.760  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -0.9813703  0.0107885   -90.965  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1283424  0.0054209   208.146  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2389996  0.0051926   238.610  &lt; 2e-16 ***\nORIGIN_SZSESZ04  0.7535119  0.0060371   124.814  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.2347978  0.0071482   -32.847  &lt; 2e-16 ***\nORIGIN_SZSESZ06  0.9520620  0.0057572   165.368  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -2.4296685  0.0231677  -104.873  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.6995899  0.0099969   -69.980  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.2602157  0.0111471  -113.053  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.0725860  0.0061970    11.713  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.2738315  0.0057524    47.603  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -2.0207710  0.0119838  -168.625  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.4885608  0.0054646    89.404  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.8892155  0.0075074  -118.445  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.3682754  0.0108025   -34.092  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  1.1826086  0.0071388   165.659  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.3230177  0.0101683   -31.767  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.8504236  0.0362400   -51.060  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -0.2759035  0.0185157   -14.901  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.2757902  0.0348766   -65.253  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.0899820  0.0090356    -9.959  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -2.1460151  0.0187871  -114.228  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.6851549  0.0571841   -46.956  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -1.0121495  0.0275551   -36.732  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.6129645  0.0345167   -75.701  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7229100  0.0208134   -82.779  &lt; 2e-16 ***\nORIGIN_SZTMSZ01 -0.2254986  0.0070312   -32.071  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.7271575  0.0049219   350.914  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  0.9891319  0.0052266   189.250  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.2018090  0.0062114    32.490  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -1.1882870  0.0125842   -94.427  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.6122620  0.0141911  -113.611  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -1.5630967  0.0112227  -139.280  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -2.0739538  0.0149298  -138.914  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.2816960  0.0085295   -33.026  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.7822239  0.0077901  -100.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5735478  0.0053042   108.131  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.8748650  0.0074202  -117.903  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.8537831  0.0069792  -122.332  &lt; 2e-16 ***\nORIGIN_SZTPSZ05 -0.5581114  0.0077012   -72.471  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.0262001  0.0075241     3.482 0.000497 ***\nORIGIN_SZTPSZ07 -0.5969952  0.0074272   -80.380  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -1.0537959  0.0111297   -94.683  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.9588508  0.0081314  -117.920  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -1.1177249  0.0089403  -125.021  &lt; 2e-16 ***\nORIGIN_SZTPSZ11 -0.2799677  0.0067135   -41.702  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.8898871  0.0080215  -110.938  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -2.6146463  0.0521606   -50.127  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.1682588  0.0119965    14.026  &lt; 2e-16 ***\nORIGIN_SZTSSZ03  0.2587653  0.0123809    20.900  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.5473825  0.0135215   -40.482  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -0.9967379  0.0206068   -48.369  &lt; 2e-16 ***\nORIGIN_SZTSSZ06  0.4933147  0.0229597    21.486  &lt; 2e-16 ***\nORIGIN_SZWCSZ01  1.2524706  0.0111133   112.700  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.8544820  0.0347805   -82.071  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -5.1277334  0.1475585   -34.751  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  1.4725308  0.0056496   260.645  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.1571680  0.0064909    24.214  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.2584097  0.0061471   204.717  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  0.8578765  0.0069277   123.833  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.1702728  0.0069687    24.434  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.1736910  0.0069507    24.989  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -1.5610176  0.0100803  -154.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.9490906  0.0102047   -93.005  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.2107011  0.0062294   194.354  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.3324158  0.0074537   -44.598  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.8177113  0.0066108   123.693  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  1.6751777  0.0058470   286.503  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.8130044  0.0059025   137.738  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.3678420  0.0072431    50.785  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.6024384  0.0126722   -47.540  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.7631918  0.0158478   -48.157  &lt; 2e-16 ***\nORIGIN_SZYSSZ08  0.2141930  0.0076154    28.126  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.0809368  0.0057973   186.457  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0761304  0.0051207    14.867  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.0143394  0.0050755     2.825 0.004724 ** \nDESTIN_SZAMSZ04 -1.2516780  0.0074947  -167.008  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -1.2312375  0.0076598  -160.741  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -1.0333412  0.0075283  -137.261  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5338249  0.0110036  -139.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.3751665  0.0075358   -49.784  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.1633493  0.0077556  -150.001  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1017717  0.0053151    19.148  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.8840362  0.0097007   -91.131  &lt; 2e-16 ***\nDESTIN_SZAMSZ12  0.1628123  0.0055220    29.484  &lt; 2e-16 ***\nDESTIN_SZBDSZ01  1.0040794  0.0047922   209.523  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.2478149  0.0063085   -39.283  &lt; 2e-16 ***\nDESTIN_SZBDSZ03  0.1016088  0.0057420    17.696  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  1.1082928  0.0047747   232.116  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.8737933  0.0050593   172.712  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.2897032  0.0058244    49.740  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.9026193  0.0113656   -79.416  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.7063577  0.0131234  -130.024  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.3892839  0.0083307  -166.767  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.6661120  0.0073464   -90.672  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -0.9536826  0.0073196  -130.292  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.6655610  0.0065868  -101.044  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.9053119  0.0079264  -114.215  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.2622159  0.0075079  -168.119  &lt; 2e-16 ***\nDESTIN_SZBKSZ07 -0.0423370  0.0056686    -7.469 8.10e-14 ***\nDESTIN_SZBKSZ08 -1.3811240  0.0084985  -162.515  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.0797012  0.0061428   -12.975  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.8859670  0.0088108  -100.555  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.1362723  0.0082167    16.585  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.2037396  0.0093508   128.732  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.9316219  0.0178080   -52.315  &lt; 2e-16 ***\nDESTIN_SZBMSZ01  0.7188470  0.0061160   117.536  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.0597895  0.0061206    -9.769  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.2427075  0.0069937   -34.704  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.0622494  0.0065569    -9.494  &lt; 2e-16 ***\nDESTIN_SZBMSZ05 -0.2857019  0.0086450   -33.048  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.3486558  0.0158904   -84.872  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.4549687  0.0058315    78.020  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.8730268  0.0077814  -112.195  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -2.0319890  0.0163038  -124.633  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.4319101  0.0102616  -139.541  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.2429176  0.0092250  -134.733  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.8526549  0.0096009   -88.810  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.1399907  0.0066885    20.930  &lt; 2e-16 ***\nDESTIN_SZBMSZ14 -1.0103155  0.0091377  -110.566  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.6819769  0.0086179   -79.135  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.4468308  0.0134051  -107.931  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.5312175  0.0186843   -81.952  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -1.1726725  0.0073257  -160.077  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -2.1072012  0.0103320  -203.949  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.6944911  0.0098520  -171.995  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.7664610  0.0074458  -102.939  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.1358370  0.0056258    24.145  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -1.2425471  0.0096942  -128.175  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.1666192  0.0094969   -17.545  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.3857894  0.0057261    67.374  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.5293265  0.0064886   -81.578  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.3909966  0.0048540    80.551  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.7114965  0.0054528   130.482  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.0487084  0.0082474    -5.906 3.51e-09 ***\nDESTIN_SZBTSZ03  0.5539032  0.0064423    85.979  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -0.7120734  0.0128676   -55.339  &lt; 2e-16 ***\nDESTIN_SZBTSZ05  0.2176097  0.0086791    25.073  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.2167084  0.0084925   -25.518  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.4045618  0.0124363  -112.940  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.8213918  0.0120793   -68.000  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.7340877  0.3333916   -17.199  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.0304192  0.0095920    -3.171 0.001518 ** \nDESTIN_SZCHSZ01 -0.2598507  0.0115311   -22.535  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.3497750  0.0068334    51.186  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  2.4550172  0.0050883   482.481  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.4691744  0.0063130   -74.319  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -0.9557084  0.0069331  -137.847  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.0442112  0.0057117     7.740 9.91e-15 ***\nDESTIN_SZCKSZ04 -0.8592063  0.0081238  -105.764  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.1745333  0.0087305  -134.532  &lt; 2e-16 ***\nDESTIN_SZCKSZ06 -0.4982877  0.0085514   -58.269  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.2665065  0.0059712    44.632  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -1.9758876  0.0150823  -131.007  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.9051310  0.0091479   -98.944  &lt; 2e-16 ***\nDESTIN_SZCLSZ04 -0.0828732  0.0061559   -13.462  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -1.1414780  0.0100760  -113.287  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.3229402  0.0056269    57.392  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.4833612  0.0069777   -69.272  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.3219670  0.0075615   -42.580  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.0564166  0.0080703     6.991 2.74e-12 ***\nDESTIN_SZDTSZ02 -1.6384236  0.0374725   -43.723  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -0.4021571  0.0152716   -26.334  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.2799441  0.0177095   -72.274  &lt; 2e-16 ***\nDESTIN_SZGLSZ01 -0.0190303  0.0060665    -3.137 0.001707 ** \nDESTIN_SZGLSZ02 -0.0308469  0.0058724    -5.253 1.50e-07 ***\nDESTIN_SZGLSZ03  0.6927638  0.0048456   142.969  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.9325848  0.0049183   189.616  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.8480056  0.0048801   173.768  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.0652969  0.0047795    13.662  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.9498251  0.0066577  -142.667  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.4372499  0.0076387  -188.154  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.5236292  0.0055353   -94.599  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5420295  0.0058099   -93.295  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.9054730  0.0067581  -133.983  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.0215109  0.0054019     3.982 6.83e-05 ***\nDESTIN_SZHGSZ08 -0.0490979  0.0059206    -8.293  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0711560  0.0062875   -11.317  &lt; 2e-16 ***\nDESTIN_SZHGSZ10 -3.5807154  0.0290642  -123.200  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.4023638  0.0065057   -61.848  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.7654353  0.0067096  -114.081  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.8778812  0.0071238  -123.232  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -1.1998075  0.0088733  -135.215  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -1.5623652  0.0116898  -133.652  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.2311474  0.0055595    41.577  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -1.2753348  0.0094838  -134.475  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.7654533  0.0099306   -77.081  &lt; 2e-16 ***\nDESTIN_SZJESZ09  0.1637628  0.0074164    22.081  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.7394958  0.0091249    81.041  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.5157364  0.0086546    59.591  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -1.0165204  0.0083025  -122.435  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8530646  0.0067851  -125.727  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.5176135  0.0056449    91.695  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.3427105  0.0058499    58.584  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -1.1695940  0.0080069  -146.073  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.7466462  0.0070240  -106.299  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -3.0124535  0.0333481   -90.334  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.4253502  0.0066584   -63.881  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  0.9428005  0.0053190   177.251  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.2965013  0.0066422   -44.639  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.4921137  0.0067689   -72.702  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.8489213  0.0078294  -108.427  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.2656342  0.0099918  -126.667  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.3570126  0.0096300   -37.073  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -2.4764906  0.0390868   -63.359  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.7316189  0.0080994   -90.330  &lt; 2e-16 ***\nDESTIN_SZKLSZ08 -0.1115398  0.0061168   -18.235  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.4940710  0.0271518   -55.027  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.6101440  0.0231238   -69.631  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -0.9339318  0.0126277   -73.959  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -3.4868547  0.0303657  -114.829  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.4518483  0.0089869   -50.279  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.5868264  0.0073193   -80.176  &lt; 2e-16 ***\nDESTIN_SZMPSZ03  0.4805365  0.0059041    81.391  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.3837581  0.0218713   -63.268  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -3.0694691  0.0533346   -57.551  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.4992973  0.0130358  -115.014  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -0.5221236  0.0089923   -58.064  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -1.9751162  0.0282369   -69.948  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.9959411  0.0511214   -78.166  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1126966  0.0057077   -19.745  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.0259250  0.0064427    -4.024 5.72e-05 ***\nDESTIN_SZNVSZ03 -0.0123214  0.0067692    -1.820 0.068725 .  \nDESTIN_SZNVSZ04 -1.3371298  0.0130261  -102.650  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -0.9686333  0.0101539   -95.395  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -1.1798309  0.0180543   -65.349  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -1.3289737  0.0085335  -155.736  &lt; 2e-16 ***\nDESTIN_SZPGSZ03 -0.1661373  0.0055166   -30.116  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.3046408  0.0058469   -52.103  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.5412612  0.0093261  -165.264  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.3439667  0.0083504   -41.192  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7574919  0.0154244  -113.942  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.3455776  0.0112089   -30.831  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -2.0749385  0.0141153  -146.999  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.4855216  0.0134069   -36.214  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.0117816  0.0083558     1.410 0.158543    \nDESTIN_SZPNSZ02  0.7389858  0.0089823    82.272  &lt; 2e-16 ***\nDESTIN_SZPNSZ03 -0.4708719  0.0098588   -47.761  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.3156771  0.0111200   118.316  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  0.9881886  0.0153169    64.516  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.0678999  0.0098295  -108.642  &lt; 2e-16 ***\nDESTIN_SZPRSZ02  0.0650279  0.0063927    10.172  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6348138  0.0050147   126.592  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.3640286  0.0097572   -37.309  &lt; 2e-16 ***\nDESTIN_SZPRSZ05  0.0380410  0.0062577     6.079 1.21e-09 ***\nDESTIN_SZPRSZ06  0.3153712  0.0068742    45.877  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.6669973  0.0145573  -114.513  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.6170648  0.0078424   -78.683  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -0.5496582  0.0098285   -55.925  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -0.7318114  0.0086807   -84.303  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5893064  0.0084789   -69.503  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.7103906  0.0085341   -83.242  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.4721472  0.0078164   -60.405  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.6591466  0.0080069   -82.322  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -0.9540454  0.0126807   -75.236  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.4508867  0.0064870    69.507  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.4061810  0.0075485   -53.810  &lt; 2e-16 ***\nDESTIN_SZQTSZ10  0.1351889  0.0068202    19.822  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.3181553  0.0067958    46.816  &lt; 2e-16 ***\nDESTIN_SZQTSZ12 -0.1055766  0.0095576   -11.046  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.5199663  0.0071928    72.290  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.6086332  0.0078537    77.496  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  1.3906866  0.0092250   150.753  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.0862091  0.0085363   -10.099  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.0186282  0.0211113   -48.250  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5294454  0.0179337   -85.283  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.3607754  0.0355628   -66.383  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.5266254  0.0156276   -97.688  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.0986565  0.0168695   -65.127  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -2.4004418  0.0320917   -74.799  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -1.4023966  0.0109496  -128.078  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -1.3899893  0.0090891  -152.929  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.4509008  0.0059864    75.321  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.1796309  0.0070142    25.610  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -1.3159699  0.0096485  -136.391  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.7705263  0.0253064   -69.964  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -0.7471529  0.0238628   -31.310  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  0.7884520  0.0069638   113.221  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.0131702  0.0066350     1.985 0.047150 *  \nDESTIN_SZSESZ02 -0.7247347  0.0060626  -119.541  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.1032728  0.0048330    21.368  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -1.0992420  0.0068328  -160.878  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.8374712  0.0058155  -144.006  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.5531619  0.0074766   -73.985  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.0328672  0.0246371  -123.101  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.1933777  0.0068235   -28.340  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.3000845  0.0060284   -49.779  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4322879  0.0057308   -75.433  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.1214792  0.0056548   -21.482  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -2.0309074  0.0114993  -176.611  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.6592095  0.0046364   142.182  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4618538  0.0062027   -74.460  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5227257  0.0293399   -17.816  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4797341  0.0091087   -52.668  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.8477357  0.0067821   124.996  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.2477566  0.0074817   -33.115  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -1.3315992  0.0167055   -79.710  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.3519096  0.0131326   -26.797  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.8570431  0.0102100   -83.941  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.9949105  0.0088280  -112.699  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.0260696  0.0154393   -66.458  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -4.2040410  0.0404795  -103.856  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.4907000  0.0264056   -94.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -3.0701470  0.0244975  -125.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -2.5308161  0.0169699  -149.135  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.2354889  0.0067201   -35.042  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.7379292  0.0044573   389.906  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.9112458  0.0048718   187.043  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  1.0731075  0.0048626   220.685  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.6398583  0.0067321    95.046  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3500456  0.0083835   -41.754  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0573515  0.0112412   -94.060  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.4069979  0.0132733  -106.002  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.3616604  0.0085207   -42.445  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.5919243  0.0071153   -83.190  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.7083350  0.0046540   152.198  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.5746433  0.0069625   -82.534  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5821259  0.0084517  -187.196  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -1.1796256  0.0073039  -161.505  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.3968272  0.0077295   -51.339  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -2.1796617  0.0135199  -161.219  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.2568483  0.0107267  -117.170  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2446623  0.0080840   -30.265  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -1.2542191  0.0102049  -122.904  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.0886883  0.0062888   -14.102  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.7211823  0.0075086   -96.048  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -1.6271921  0.0238498   -68.227  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.3340439  0.0169137   -19.750  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.3924580  0.0111060    35.338  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.4169932  0.0114926    36.283  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.3206287  0.0120381   109.704  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  2.4023725  0.0192840   124.579  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  2.0697378  0.0061379   337.206  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -2.0934025  0.0134782  -155.318  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -3.0670149  0.0349748   -87.692  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  1.0113215  0.0051461   196.522  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -1.3383793  0.0076482  -174.993  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.3394361  0.0060396    56.202  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.8324928  0.0086019   -96.780  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.8279090  0.0083251   -99.447  &lt; 2e-16 ***\nDESTIN_SZWDSZ06 -0.2252899  0.0061074   -36.888  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -1.3638599  0.0077990  -174.877  &lt; 2e-16 ***\nDESTIN_SZWDSZ08 -0.4350176  0.0077566   -56.083  &lt; 2e-16 ***\nDESTIN_SZWDSZ09  0.5461048  0.0060745    89.901  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.0243093  0.0053476     4.546 5.47e-06 ***\nDESTIN_SZYSSZ02 -0.3398962  0.0065947   -51.540  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -0.3694187  0.0074032   -49.900  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.5222848  0.0067396   -77.495  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.5460539  0.0124899  -123.784  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.5556892  0.0127640  -121.881  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.8673403  0.0167723   -51.713  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.5389364  0.0052540   102.577  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1199483  0.0055235    21.716  &lt; 2e-16 ***\nlog(dist)       -1.8906989  0.0005319 -3554.786  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance:  8091747  on 13715  degrees of freedom\nAIC: 8177420\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations this time.\n\nCalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n\n[1] 0.6883675\n\n\nNotice that there is a relatively greater improvement in the R2 value.\n\n\nModel comparison\nAnother useful model performance measure for continuous dependent variable is Root Mean Squared Error. In this sub-section, you will learn how to use compare_performance() of performance package\nFirst of all, let us create a list called model_list by using the code chunk below.\n\nmodel_list &lt;- list(unconstrained=uncSIM,\n                   originConstrained=orcSIM,\n                   destinationConstrained=decSIM,\n                   doublyConstrained=dbcSIM)\n\nNext, we will compute the RMSE of all the models in model_list file by using the code chunk below.\n\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                   | Model |     RMSE\n-----------------------------------------\nunconstrained          |   glm | 2429.978\noriginConstrained      |   glm | 2057.579\ndestinationConstrained |   glm | 1891.724\ndoublyConstrained      |   glm | 1487.111\n\n\nThe print above reveals that doubly constrained SIM is the best model among all the four SIMs because it has the smallest RMSE value of 1487.111.\n\n\nVisualising fitted\nIn this section, we will learn how to visualise the observed values and the fitted values.\nFirstly we will extract the fitted values from each model by using the code chunk below.\n\ndf &lt;- as.data.frame(uncSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\nNext, we will join the values to SIM_data data frame.\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(uncTRIPS = \"uncSIM$fitted.values\")\n\nRepeat the same step by for Origin Constrained SIM (i.e. orcSIM)\n\ndf &lt;- as.data.frame(orcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(orcTRIPS = \"orcSIM$fitted.values\")\n\nRepeat the same step by for Destination Constrained SIM (i.e. decSIM):\n\ndf &lt;- as.data.frame(decSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(decTRIPS = \"decSIM$fitted.values\")\n\nRepeat the same step by for Doubly Constrained SIM (i.e. dbcSIM):\n\ndf &lt;- as.data.frame(dbcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM$fitted.values\")\n\n\nunc_p &lt;- ggplot(data = SIM_data,\n                aes(x = uncTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p &lt;- ggplot(data = SIM_data,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p &lt;- ggplot(data = SIM_data,\n                aes(x = decTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p &lt;- ggplot(data = SIM_data,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2C.html",
    "href": "In-class_Ex2/In-class_Ex2C.html",
    "title": "In-class Exercise 2C: Emerging Hot Spot Analysis: sfdep methods",
    "section": "",
    "text": "Emerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time. The analysis consist of four main steps:\n\nBuilding a space-time cube,\nCalculating Getis-Ord local Gi* statistic for each bin by using an FDR correction,\nEvaluating these hot and cold spot trends by using Mann-Kendall trend test,\nCategorising each study area location by referring to the resultant trend z-score and p-value for each location with data, and with the hot spot z-score and p-value for each bin."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2C.html#installing-and-loading-the-r-packages",
    "href": "In-class_Ex2/In-class_Ex2C.html#installing-and-loading-the-r-packages",
    "title": "In-class Exercise 2C: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Installing and Loading the R Packages",
    "text": "Installing and Loading the R Packages\nAs usual, p_load() of pacman package will be used to check if the necessary packages have been installed in R, if yes, load the packages on R environment.\nFive R packages are need for this in-class exercise, they are: sf, sfdep, tmap, plotly and tidyverse.\n\npacman::p_load(sf, sfdep, tmap, plotly, tidyverse, zoo)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2C.html#importing-geospatial-data",
    "href": "In-class_Ex2/In-class_Ex2C.html#importing-geospatial-data",
    "title": "In-class Exercise 2C: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Importing geospatial data",
    "text": "Importing geospatial data\nIn the code chunk below, st_read() of sf package is used to import Hunan shapefile into R.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\PeiShan0502\\ISSS624\\In-class_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2C.html#importing-attribute-table",
    "href": "In-class_Ex2/In-class_Ex2C.html#importing-attribute-table",
    "title": "In-class Exercise 2C: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Importing attribute table",
    "text": "Importing attribute table\nIn the code chunk below, read_csv() of readr is used to import Hunan_GDPPC.csv into R.\n\nGDPPC &lt;- read_csv(\"data/aspatial/Hunan_GDPPC.csv\", show_col_types = FALSE)\n\n\nglimpse(GDPPC)\n\nRows: 1,496\nColumns: 3\n$ Year   &lt;dbl&gt; 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 200…\n$ County &lt;chr&gt; \"Longshan\", \"Changsha\", \"Wangcheng\", \"Ningxiang\", \"Liuyang\", \"Z…\n$ GDPPC  &lt;dbl&gt; 3469, 24612, 14659, 11687, 13406, 8546, 10944, 8040, 7383, 1168…"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2C.html#computing-gi",
    "href": "In-class_Ex2/In-class_Ex2C.html#computing-gi",
    "title": "In-class Exercise 2C: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Computing Gi*",
    "text": "Computing Gi*\nNext, we will compute the local Gi* statistics.\n\nDeriving the spatial weights\nThe code chunk below will be used to identify neighbors and to derive an inverse distance weights.\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\nNotes:\n\nactivate() of dplyr package is used to activate the geometry context\nmutate() of dplyr package is used to create two new columns nb and wt.\nThen we will activate the data context again and copy over the nb and wt columns to each time-slice using set_nbs() and set_wts()\n\nrow order is very important so do not rearrange the observations after using set_nbs() or set_wts().\n\n\nNote that this dataset now has neighbors and weights for each time-slice.\n\nhead(GDPPC_nb)\n\nspacetime ────\n\n\nContext:`data`\n\n\n88 locations `County`\n\n\n17 time periods `Year`\n\n\n── data context ────────────────────────────────────────────────────────────────\n\n\n# A tibble: 6 × 5\n   Year County  GDPPC nb        wt       \n  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1  2005 Anxiang  8184 &lt;int [6]&gt; &lt;dbl [6]&gt;\n2  2005 Hanshou  6560 &lt;int [6]&gt; &lt;dbl [6]&gt;\n3  2005 Jinshi   9956 &lt;int [5]&gt; &lt;dbl [5]&gt;\n4  2005 Li       8394 &lt;int [5]&gt; &lt;dbl [5]&gt;\n5  2005 Linli    8850 &lt;int [5]&gt; &lt;dbl [5]&gt;\n6  2005 Shimen   9244 &lt;int [6]&gt; &lt;dbl [6]&gt;"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2C.html#computing-gi-1",
    "href": "In-class_Ex2/In-class_Ex2C.html#computing-gi-1",
    "title": "In-class Exercise 2C: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Computing Gi*",
    "text": "Computing Gi*\nWe can use these new columns to manually calculate the local Gi* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. After which, we use unnest() to unnest gi_star column of the newly created gi_starts data.frame.\n\ngi_stars &lt;- GDPPC_nb %&gt;% \n  group_by(Year) %&gt;% \n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;% \n  tidyr::unnest(gi_star)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2C.html#arrange-to-show-significant-emerging-hotcold-spots",
    "href": "In-class_Ex2/In-class_Ex2C.html#arrange-to-show-significant-emerging-hotcold-spots",
    "title": "In-class Exercise 2C: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Arrange to show significant emerging hot/cold spots",
    "text": "Arrange to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:5)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2C.html#performing-emerging-hotspot-analysis",
    "href": "In-class_Ex2/In-class_Ex2C.html#performing-emerging-hotspot-analysis",
    "title": "In-class Exercise 2C: Emerging Hot Spot Analysis: sfdep methods",
    "section": "Performing Emerging Hotspot Analysis",
    "text": "Performing Emerging Hotspot Analysis\nLastly, we will perform EHSA analysis by using emerging_hotspot_analysis() of sfdep package. It takes a spacetime object x (i.e. GDPPC_st), and the quoted name of the variable of interest (i.e. GDPPC) for .var argument. The k argument is used to specify the number of time lags which is set to 1 by default. Lastly, nsim map numbers of simulation to be performed.\n\nehsa &lt;- emerging_hotspot_analysis(\n  x = GDPPC_st, \n  .var = \"GDPPC\", \n  k = 1, \n  nsim = 99\n)\n\n\nVisualising the distribution of EHSA classes\nIn the code chunk below, ggplot2 functions is used to reveal the distribution of EHSA classes as a bar chart.\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\nFigure above shows that sporadic cold spots class has the high numbers of county.\n\n\nVisualising EHSA\nIn this section, we will learn how to visualise the geographic distribution EHSA classes. However, before we can do so, we need to join both hunan and ehsa together by using the code chunk below.\n\nhunan_ehsa &lt;- hunan %&gt;%\n  left_join(ehsa,\n            by = join_by(County == location))\n\nNext, tmap functions will be used to plot a categorical choropleth map by using the code chunk below.\n\nehsa_sig &lt;- hunan_ehsa  %&gt;%\n  filter(p_value &lt; 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(hunan_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html",
    "href": "In-class_Ex2/In-class_Ex2B.html",
    "title": "In-Class Exercise 2B: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "",
    "text": "This in-class exercise introduces an alternative R package to spdep package, called sfdep package."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#overview",
    "href": "In-class_Ex2/In-class_Ex2B.html#overview",
    "title": "In-Class Exercise 2B: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "",
    "text": "This in-class exercise introduces an alternative R package to spdep package, called sfdep package."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#getting-started",
    "href": "In-class_Ex2/In-class_Ex2B.html#getting-started",
    "title": "In-Class Exercise 2B: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and Loading the R Packages\nFour R packages will be used for this in-class exercise, they are, sf, sfdep, tmap, tidyverse.\n\npacman::p_load(sf, sfdep, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#the-data",
    "href": "In-class_Ex2/In-class_Ex2B.html#the-data",
    "title": "In-Class Exercise 2B: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "The Data",
    "text": "The Data\nFor the purpose of this in-class exercise, the Hunan data sets will be used. There are two data sets:\n\nHunan, a geospatial data set in ESRI shapefile format, and\nHunan_2012, an attribute data in csv format.\n\n\nImport geospatial data\nuses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\PeiShan0502\\ISSS624\\In-class_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting attribute table\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\", show_col_types = FALSE)\n\n\n\nCombining both data frame by using left join\n\nhunan_GDPPC &lt;- left_join(hunan, hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n\nPlotting a choropleth map\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#global-measures-of-spatial-association",
    "href": "In-class_Ex2/In-class_Ex2B.html#global-measures-of-spatial-association",
    "title": "In-Class Exercise 2B: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "Global Measures of Spatial Association",
    "text": "Global Measures of Spatial Association\n\nStep 1: Deriving contiguity weights: Queen’s method\nIn the code chunk below, queen method is used to derive the contiguity weights.\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\nComputing Global Moran’ I\nIn the code chunk below, global_moran() function is used to compute the Moran’s I value. Different from spdep package, the output is a tibble data.frame.\n\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\n\n\nPerforming Global Moran’s I test\nIn general, Moran’s I test will be performed instead of just computing the Moran’s I statistics. With sfdep package, Moran’s I test can be performed by using global_moran_test() as shown in the code chunk below.\n\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\nPerforming Global Moran’I permutation test\nIn practice, monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by globel_moran_perm()\nIt is always a good practice to use set.seed() before performing simulation. This is to ensure that the computation is reproducible.\n\nset.seed(1234)\n\nNext, global_moran_perm() is used to perform Monte Carlo simulation.\n\nglobal_moran_perm(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nThe report above show that the p-value is smaller than alpha value of 0.05. Hence, reject the null hypothesis that the spatial patterns spatial independent. Because the Moran’s I statistics is greater than 0. We can infer the spatial distribution shows sign of clustering.\nNote that the number of simulations is alway equal to nsim + 1. If nsim = 99, this means 100 simulation will be performed."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#computing-local-morans-i",
    "href": "In-class_Ex2/In-class_Ex2B.html#computing-local-morans-i",
    "title": "In-Class Exercise 2B: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "Computing local Moran’s I",
    "text": "Computing local Moran’s I\nIn this section, you will learn how to compute Local Moran’s I of GDPPC at county level by using local_moran() of sfdep package.\n\nlisa &lt;- wm_q %&gt;% \n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nThe output of local_moran() is a sf data.frame containing the columns ii, eii, var_ii, z_ii, p_ii, p_ii_sim, and p_folded_sim.\n\nii: local moran statistic\neii: expectation of local moran statistic; for localmoran_permthe permutation sample means\nvar_ii: variance of local moran statistic; for localmoran_permthe permutation sample standard deviations\nz_ii: standard deviate of local moran statistic; for localmoran_perm based on permutation sample means and standard deviations p_ii: p-value of local moran statistic using pnorm(); for localmoran_perm using standard deviatse based on permutation sample means and standard deviations p_ii_sim: For localmoran_perm(), rank() and punif() of observed statistic rank for [0, 1] p-values using alternative= -p_folded_sim: the simulation folded [0, 0.5] range ranked p-value (based on https://github.com/pysal/esda/blob/4a63e0b5df1e754b17b5f1205b cadcbecc5e061/esda/crand.py#L211-L213)\nskewness: For localmoran_perm, the output of e1071::skewness() for the permutation samples underlying the standard deviates\nkurtosis: For localmoran_perm, the output of e1071::kurtosis() for the permutation samples underlying the standard deviates.\n\nNote: unnest() of tidyr package is used to expand a list-column containing data frames into rows and columns.\n\nVisualising local Moran’s I\nIn this code chunk below, tmap functions are used prepare a choropleth map by using value in the ii field.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nVisualising p-value of local Moran’s I\nIn the code chunk below, tmap functions are used prepare a choropleth map by using value in the p_ii_sim field.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\n\n\n\nFor p-values, the appropriate classification should be 0.001, 0.01, 0.05 and not significant instead of using default classification scheme.\n\n\nVisualising local Moran’s I and p-value\nFor effective comparison, it will be better for us to plot both maps next to each other as shown below.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nVisualising LISA map\nLISA map is a categorical map showing outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low cluaters. In fact, LISA map is an interpreted map by combining local Moran’s I of geographical areas and their respective p-values.\nIn lisa sf data.frame, we can find three fields contain the LISA categories. They are mean, median and pysal. In general, classification in mean will be used as shown in the code chunk below.\n\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii &lt; 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#hot-spot-and-cold-spot-area-analysis-hcsa",
    "href": "In-class_Ex2/In-class_Ex2B.html#hot-spot-and-cold-spot-area-analysis-hcsa",
    "title": "In-Class Exercise 2B: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "Hot Spot and Cold Spot Area Analysis (HCSA)",
    "text": "Hot Spot and Cold Spot Area Analysis (HCSA)\nHCSA uses spatial weights to identify locations of statistically significant hot spots and cold spots in an spatially weighted attribute that are in proximity to one another based on a calculated distance. The analysis groups features when similar high (hot) or low (cold) values are found in a cluster. The polygon features usually represent administration boundaries or a custom grid structure."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#computing-local-gi-statistics",
    "href": "In-class_Ex2/In-class_Ex2B.html#computing-local-gi-statistics",
    "title": "In-Class Exercise 2B: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "Computing local Gi* statistics",
    "text": "Computing local Gi* statistics\nWe derive an inverse distance weights matrix:\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\nNext, local_gstar_perm() of sfdep package will be used to compute local Gi* statistics as shown in the code chunk below.\n\nHCSA &lt;- wm_idw %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 17\n   gi_star   e_gi    var_gi p_value   p_sim p_folded_sim skewness kurtosis nb   \n     &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;nb&gt; \n 1  0.0416 0.0114   6.41e-6  0.0493 9.61e-1         0.7      0.35    0.875 &lt;int&gt;\n 2 -0.333  0.0106   3.84e-6 -0.0941 9.25e-1         1        0.5     0.661 &lt;int&gt;\n 3  0.281  0.0126   7.51e-6 -0.151  8.80e-1         0.9      0.45    0.640 &lt;int&gt;\n 4  0.411  0.0118   9.22e-6  0.264  7.92e-1         0.6      0.3     0.853 &lt;int&gt;\n 5  0.387  0.0115   9.56e-6  0.339  7.34e-1         0.62     0.31    1.07  &lt;int&gt;\n 6 -0.368  0.0118   5.91e-6 -0.583  5.60e-1         0.72     0.36    0.594 &lt;int&gt;\n 7  3.56   0.0151   7.31e-6  2.61   9.01e-3         0.06     0.03    1.09  &lt;int&gt;\n 8  2.52   0.0136   6.14e-6  1.49   1.35e-1         0.2      0.1     1.12  &lt;int&gt;\n 9  4.56   0.0144   5.84e-6  3.53   4.17e-4         0.04     0.02    1.23  &lt;int&gt;\n10  1.16   0.0104   3.70e-6  1.82   6.86e-2         0.12     0.06    0.416 &lt;int&gt;\n# ℹ 78 more rows\n# ℹ 8 more variables: wts &lt;list&gt;, NAME_2 &lt;chr&gt;, ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;,\n#   ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;, geometry &lt;POLYGON [°]&gt;\n\n\n\nVisualising Gi*\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nVisualising p-value of HCSA\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nVisuaising local HCSA\nFor effective comparison, we plot both maps next to each other as shown below.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(HCSA) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nWarning: Values have found that are less than the lowest break\n\n\nWarning: Values have found that are higher than the highest break\n\n\nVariable(s) \"p_value\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#visualising-hot-spot-and-cold-spot-areas",
    "href": "In-class_Ex2/In-class_Ex2B.html#visualising-hot-spot-and-cold-spot-areas",
    "title": "In-Class Exercise 2B: Global and Local Measures of Spatial Association - sfdep methods",
    "section": "Visualising hot spot and cold spot areas",
    "text": "Visualising hot spot and cold spot areas\nNow, we are ready to plot the significant (i.e. p-values less than 0.05) hot spot and cold spot areas by using appropriate tmap functions as shown below.\n\nHCSA_sig &lt;- HCSA  %&gt;%\n  filter(p_sim &lt; 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nFigure above reveals that there is one hot spot area and two cold spot areas. Interestingly, the hot spot areas coincide with the High-high cluster identifies by using local Moran’s I method in the earlier sub-section."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "Welcome to ISSS624 Applied Geospatial Analytics!\nIn this webpage, I am going to share with you my learning journey of geospatial analytics :)"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "",
    "text": "Spatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.\nEach spatial interaction, as an analogy for a set of movements, is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin/destination matrix, or a spatial interaction matrix.\nIn this hands-on exercise, you will learn how to build an OD matrix by using Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall. By the end of this hands-on exercise, you will be able:\n\nto import and extract OD data for a selected time interval,\nto import and save geospatial data (i.e. bus stops and mpsz) into sf tibble data frame objects,\nto populate planning subzone code into bus stops sf tibble data frame,\nto construct desire lines geospatial data from the OD data, and\nto visualise passenger volume by origin and destination bus stops by using the desire lines data."
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#overview",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#overview",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "",
    "text": "Spatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.\nEach spatial interaction, as an analogy for a set of movements, is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin/destination matrix, or a spatial interaction matrix.\nIn this hands-on exercise, you will learn how to build an OD matrix by using Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall. By the end of this hands-on exercise, you will be able:\n\nto import and extract OD data for a selected time interval,\nto import and save geospatial data (i.e. bus stops and mpsz) into sf tibble data frame objects,\nto populate planning subzone code into bus stops sf tibble data frame,\nto construct desire lines geospatial data from the OD data, and\nto visualise passenger volume by origin and destination bus stops by using the desire lines data."
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "Getting Started",
    "text": "Getting Started\nFor the purpose of this exercise, these R packages will be used:\n\nsf for importing, integrating, processing and transforming geospatial data.\ntidyverse for importing, integrating, wrangling and visualising data.\ntmap for creating thematic maps.\n\n\npacman::p_load(tmap, sf, DT, stplanr,\n               performance,\n               ggpubr, tidyverse)\n\nalso installing the dependencies 'BH', 'nabor', 'od', 'pbapply'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3/PACKAGES'\n\n\npackage 'BH' successfully unpacked and MD5 sums checked\npackage 'nabor' successfully unpacked and MD5 sums checked\npackage 'od' successfully unpacked and MD5 sums checked\npackage 'pbapply' successfully unpacked and MD5 sums checked\npackage 'stplanr' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\peish\\AppData\\Local\\Temp\\RtmpwXxJDp\\downloaded_packages\n\n\n\nstplanr installed"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#preparing-the-flow-data",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#preparing-the-flow-data",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "Preparing the Flow Data",
    "text": "Preparing the Flow Data\n\nImporting the OD data\nFirstly, we will import the Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall by using read_csv() of readr package.\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\nRows: 5694297 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): YEAR_MONTH, DAY_TYPE, PT_TYPE, ORIGIN_PT_CODE, DESTINATION_PT_CODE\ndbl (2): TIME_PER_HOUR, TOTAL_TRIPS\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLet’s display the odbus tibble data table by using the code chunk below.\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nA quick check of odbus tibble data frame shows that the values in ORIGIN_PT_CODE and DESTINATION_PT_CODE are in numeric data type. Hence, the code chunk below is used to convert these data values into character data type.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\n\n\nExtracting the study data\nFor the purpose of this exercise, we will extract commuting flows on weekday and between 6 and 9 o’clock.\n\nodbus6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n`summarise()` has grouped output by 'ORIGIN_PT_CODE'. You can override using\nthe `.groups` argument.\n\n\nTable below shows the content of odbus6_9\n\ndatatable(odbus6_9)\n\nWarning in instance$preRenderHook(instance): It seems your data is too big for\nclient-side DataTables. You may consider server-side processing:\nhttps://rstudio.github.io/DT/server.html\n\n\n\n\n\n\n\nWe will save the output in rds format for future use:\n\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\n\nThe code chunk below will be used to import the saved odbus6_9.rds into R environment.\n\nodbus6_9 &lt;- read_rds(\"data/rds/odbus6_9.rds\")"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#working-with-geospatial-data",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#working-with-geospatial-data",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "Working with Geospatial Data",
    "text": "Working with Geospatial Data\nFor the purpose of this exercise, two geospatial data sets will be used. They are:\n\nBusStop: This data provides the location of bus stop as at last quarter of 2022.\nMPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.\n\nBoth data sets are in ESRI shapefile format.\n\nImporting geospatial data\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\PeiShan0502\\ISSS624\\Hands-on_Ex3\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\PeiShan0502\\ISSS624\\Hands-on_Ex3\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\n\nst_read() function of sf package is used to import the shapefile into R as sf data frame.\nst_transform() function of sf package is used to transform the projection to crs 3414.\n\nThe code chunk below will be used to write mpsz sf tibble data frame into an rds file for future use.\n\nmpsz &lt;- write_rds(mpsz, \"data/rds/mpsz.rds\")"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "Geospatial data wrangling",
    "text": "Geospatial data wrangling\n\nCombining Busstop and mpsz\nCode chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n\n\nst_intersection() is used to perform point and polygon overly and the output will be in point sf object.\nselect() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.\nfive bus stops are excluded in the resultant data frame because they are outside of Singapore boundary.\n\n\ndatatable(busstop_mpsz)\n\n\n\n\n\n\nBefore we continue, we save the output in rds format:\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.rds\")  \n\nNext, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus6_9 data frame.\n\nod_data &lt;- left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\nWarning in left_join(odbus6_9, busstop_mpsz, by = c(ORIGIN_PT_CODE = \"BUS_STOP_N\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 25632 of `x` matches multiple rows in `y`.\nℹ Row 673 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nBefore continue, it is a good practice for us to check for duplicate records.\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\nod_data &lt;- unique(od_data)\n\nIt will be a good practice to confirm if the duplicating records issue has been addressed fully.\nNext, we will update od_data data frame with the planning subzone codes.\n\nod_data &lt;- left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\nWarning in left_join(od_data, busstop_mpsz, by = c(DESTIN_BS = \"BUS_STOP_N\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 167 of `x` matches multiple rows in `y`.\nℹ Row 672 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nod_data &lt;- unique(od_data)\n\n\nod_data &lt;- od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\n`summarise()` has grouped output by 'ORIGIN_SZ'. You can override using the\n`.groups` argument.\n\n\nWe then save the output into rds file format:\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")\n\n\nod_data &lt;- read_rds(\"data/rds/od_data.rds\")"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#visualising-spatial-interaction",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#visualising-spatial-interaction",
    "title": "Hands-on Exercise 3: Processing and Visualising Flow Data",
    "section": "Visualising Spatial Interaction",
    "text": "Visualising Spatial Interaction\nIn this section, you will learn how to prepare a desire line by using stplanr package.\n\nRemoving intra-zonal flows\nWe will not plot the intra-zonal flows. The code chunk below will be used to remove intra-zonal flows.\n\nod_data1 &lt;- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]\n\n\n\nCreating desire lines\nIn this code chunk below, od2line() of stplanr package is used to create the desire lines.\n\nflowLine &lt;- od2line(flow = od_data1, \n                    zones = mpsz,\n                    zone_code = \"SUBZONE_C\")\n\nCreating centroids representing desire line start and end points.\n\n\n\n\nVisualising the desire lines\nTo visualise the resulting desire lines, the code chunk below is used.\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\nWarning in g$scale * (w_legend/maxW): longer object length is not a multiple of\nshorter object length\n\n\nWarning in g$scale * (x/maxW): longer object length is not a multiple of\nshorter object length\n\n\n\n\n\nWhen the flow data are very messy and highly skewed like the one shown above, it is wiser to focus on selected flows, for example flow greater than or equal to 5000 as shown below.\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \n  filter(MORNING_PEAK &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\nWarning in g$scale * (w_legend/maxW): longer object length is not a multiple of\nshorter object length\n\n\nWarning in g$scale * (x/maxW): longer object length is not a multiple of\nshorter object length"
  },
  {
    "objectID": "Hands-on_Ex3/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex3/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "",
    "text": "In this in-class exercise, we will prepare a choropleth map showing the distribution of passenger trips at planning sub-zone by integrating Passenger Volume by Origin Destination Bus Stops and bus stop data sets downloaded from LTA DataMall and Planning Sub-zone boundary of URA Master Plan 2019 downloaded from data.gov.sg.\nThese are the specific tasks:\n\nimport Passenger Volume by Origin Destination Bus Stops data set downloaded fromLTA DataMall in RStudio environment,\nimport geospatial data in ESRI shapefile format into sf data frame format,\ndata wrangling by using appropriate functions from tidyverse and sf packages, and\nvisualise distribution of passenger trips using tmap methods and functions."
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#the-task",
    "href": "In-class_Ex1/In-class_Ex1.html#the-task",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "",
    "text": "In this in-class exercise, we will prepare a choropleth map showing the distribution of passenger trips at planning sub-zone by integrating Passenger Volume by Origin Destination Bus Stops and bus stop data sets downloaded from LTA DataMall and Planning Sub-zone boundary of URA Master Plan 2019 downloaded from data.gov.sg.\nThese are the specific tasks:\n\nimport Passenger Volume by Origin Destination Bus Stops data set downloaded fromLTA DataMall in RStudio environment,\nimport geospatial data in ESRI shapefile format into sf data frame format,\ndata wrangling by using appropriate functions from tidyverse and sf packages, and\nvisualise distribution of passenger trips using tmap methods and functions."
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#getting-started",
    "href": "In-class_Ex1/In-class_Ex1.html#getting-started",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "Getting Started",
    "text": "Getting Started\npackages we are using:\n\ntidyverse for non-spatial data handling,\nsf for geospatial data handling,\ntmap for thematic mapping, and\nknitr for creating html table.\n\n\npacman::p_load(tidyverse, sf, tmap, knitr)"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#importing-the-od-data",
    "href": "In-class_Ex1/In-class_Ex1.html#importing-the-od-data",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "Importing the OD data",
    "text": "Importing the OD data\nFirst, we import the Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall by using read_csv() of readr package.\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\", show_col_types = FALSE)\n\nA quick check of odbus tibble data frame shows that the values in ORIGIN_PT_CODE and DESTINATION_PT_CODE are in numeric data type.\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"4406…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"1722…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\nSo we convert them to factor data type:\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\nCheck that both of them are in factor data type now:\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 44069, 20281, 2…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\n\nExtracting the study data\nFor the purpose of this exercise, we will extract commuting flows during the weekday morning peak. Call the output tibble data table as origin7_9.\n\norigin7_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\nkable(head(origin7_9))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n1617\n\n\n01013\n813\n\n\n01019\n1620\n\n\n01029\n2383\n\n\n01039\n2727\n\n\n01059\n1415\n\n\n\n\n\nWe will save the output in rds format for future use.\n\nwrite_rds(origin7_9, \"data/rds/origin7_9.rds\")\n\nThe code chunk below will be used to import the saved origin7_9.rds into R environment.\n\norigin7_9 &lt;- read_rds(\"data/rds/origin7_9.rds\")"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#working-with-geospatial-data",
    "href": "In-class_Ex1/In-class_Ex1.html#working-with-geospatial-data",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "Working with Geospatial Data",
    "text": "Working with Geospatial Data\nIn this section, we will import two shapefiles into RStudio, namely\n\nBusStop: This data provides the location of bus stop as at last quarter of 2022.\nMPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.\n\nImporting BusStop data:\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\PeiShan0502\\ISSS624\\In-class_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nThe structure of busstop sf tibble data frame should look as below.\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\nImport MPSZ-2019 data set:\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\PeiShan0502\\ISSS624\\In-class_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nThe structure of mpsz sf tibble data frame should look as below.\n\nglimpse(mpsz)\n\nRows: 332\nColumns: 7\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#geospatial-data-wrangling",
    "href": "In-class_Ex1/In-class_Ex1.html#geospatial-data-wrangling",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "Geospatial data wrangling",
    "text": "Geospatial data wrangling\n\nCombining Busstop and mpsz\nCode chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n\nThings to note:\n\nst_intersection() is used to perform point and polygon overly and the output will be in point sf object.\nselect() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.\nfive bus stops are excluded in the resultant data frame because they are outside of Singapore boundary.\n\nBefore moving to the next step, it is wise to save the output into rds format.\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.csv\")  \n\nNext, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus7_9 data frame.\n\norigin_SZ &lt;- left_join(origin7_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C) %&gt;%\n  group_by(ORIGIN_SZ) %&gt;%\n  summarise(TOT_TRIPS = sum(TRIPS))\n\nBefore continuing, it is a good practice for us to check for duplicating records.\n\nduplicate &lt;- origin_SZ %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\norigin_data &lt;- unique(origin_SZ)\n\nIt will be a good practice to confirm if the duplicating records issue has been addressed fully.\n\norigintrip_SZ &lt;- left_join(mpsz, \n                           origin_SZ,\n                           by = c(\"SUBZONE_C\" = \"ORIGIN_SZ\"))"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#choropleth-visualisation",
    "href": "In-class_Ex1/In-class_Ex1.html#choropleth-visualisation",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "Choropleth Visualisation",
    "text": "Choropleth Visualisation\nNow, we will prepare a choropleth map showing the distribution of passenger trips at planning subzone level.\n\ntm_shape(origintrip_SZ)+\n  tm_fill(\"TOT_TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at planning sub-zone level\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from URA\\n and Passenger trips data from LTA\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nCreating interactive map\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(origintrip_SZ)+\n  tm_fill(\"TOT_TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at planning sub-zone level\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from URA\\n and Passenger trips data from LTA\", \n             position = c(\"left\", \"bottom\"))\n\nCredits not supported in view mode.\n\n\nCompass not supported in view mode.\n\n\nWarning: The shape origintrip_SZ is invalid (after reprojection). See\nsf::st_is_valid"
  },
  {
    "objectID": "In-class_Ex1/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex1/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html",
    "href": "In-class_Ex2/In-class_Ex2A.html",
    "title": "In-Class Exercise 2A: Spatial Weights - sfdep methods",
    "section": "",
    "text": "This in-class exercise introduces an alternative R package to spdep package, called sfdep package."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#overview",
    "href": "In-class_Ex2/In-class_Ex2A.html#overview",
    "title": "In-Class Exercise 2A: Spatial Weights - sfdep methods",
    "section": "",
    "text": "This in-class exercise introduces an alternative R package to spdep package, called sfdep package."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#getting-started",
    "href": "In-class_Ex2/In-class_Ex2A.html#getting-started",
    "title": "In-Class Exercise 2A: Spatial Weights - sfdep methods",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and Loading the R Packages\nFour R packages will be used for this in-class exercise, they are, sf, sfdep, tmap, tidyverse. we will also use knitr package to create html table:\n\npacman::p_load(sf, sfdep, tmap, tidyverse, knitr)\n\nEither pacman::p_load(…) or load the pacman package first, then just need to write p_load(…)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#the-data",
    "href": "In-class_Ex2/In-class_Ex2A.html#the-data",
    "title": "In-Class Exercise 2A: Spatial Weights - sfdep methods",
    "section": "The Data",
    "text": "The Data\nFor the purpose of this in-class exercise, the Hunan data sets will be used. There are two data sets:\n\nHunan, a geospatial data set in ESRI shapefile format, and\nHunan_2012, an attribute data in csv format.\n\n\nImport geospatial data\nuses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\PeiShan0502\\ISSS624\\In-class_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImport attribute table\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCombining both data frame by using left join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\n\nShow the code\nhunan_GDPPC &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n\nJoining with `by = join_by(County)`\n\n\nIn order to retain the geospatial properties, the left data frame must be the sf data frame (i.e., hunan). if do right join, then all the geometric properties will be lost.\nNotice that the column with geometric feature is automatically retained (left_join of tidyverse package). if use left_join of Base R package, then column with geometric feature would be dropped.\n\n\nPlot Choropleth Map\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#deriving-contiguity-spatial-weights",
    "href": "In-class_Ex2/In-class_Ex2A.html#deriving-contiguity-spatial-weights",
    "title": "In-Class Exercise 2A: Spatial Weights - sfdep methods",
    "section": "Deriving Contiguity Spatial Weights",
    "text": "Deriving Contiguity Spatial Weights\nThere are two types of spatial weights, contiguity weights and distance-based weights. Here, we will learn how to derive contiguity spatial weights using sfdep.\nTwo steps required:\n\nidentifying contiguity neighbour list by st_contiguity() of sfdep package, and\nderiving the contiguity spatial weights by using st_weights() of sfdep package\n\nIn this section, we will learn how to derive the contiguity neighbour list and contiguity spatial weights separately. Then, we will learn how to combine both steps into a single process.\n\nDeriving contiguity weights: Queen’s method\nIn the code chunk below, st_contiguity() is used to derive a contiguity neighbour list by using Queen’s method.\n\nnb_queen &lt;- hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         .before = 1)\n\nNote: By default, queen argument is TRUE. If you do not specify queen = FALSE, this function will return a list of first order neighbours by using the Queen criteria. Rooks method will be used to identify the first order neighbour if queen = FALSE is used.\n\nsummary(nb_queen$nb)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan province. The most connected area unit has 11 neighbours. There are two are units with only one neighbour.\nTo view the content of the data table, you can either display the output data frame on RStudio data viewer or by printing out the first ten records by using the code chunk below.\n\nnb_queen\n\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb   NAME_2  ID_3    NAME_3   ENGTYPE_3\n1                 2, 3, 4, 57, 85  Changde 21098   Anxiang      County\n2               1, 57, 58, 78, 85  Changde 21100   Hanshou      County\n3                     1, 4, 5, 85  Changde 21101    Jinshi County City\n4                      1, 3, 5, 6  Changde 21102        Li      County\n5                     3, 4, 6, 85  Changde 21103     Linli      County\n6                4, 5, 69, 75, 85  Changde 21104    Shimen      County\n7                  67, 71, 74, 84 Changsha 21109   Liuyang County City\n8       9, 46, 47, 56, 78, 80, 86 Changsha 21110 Ningxiang      County\n9           8, 66, 68, 78, 84, 86 Changsha 21111 Wangcheng      County\n10 16, 17, 19, 20, 22, 70, 72, 73 Chenzhou 21112     Anren      County\n      County GDPPC                       geometry\n1    Anxiang 23667 POLYGON ((112.0625 29.75523...\n2    Hanshou 20981 POLYGON ((112.2288 29.11684...\n3     Jinshi 34592 POLYGON ((111.8927 29.6013,...\n4         Li 24473 POLYGON ((111.3731 29.94649...\n5      Linli 25554 POLYGON ((111.6324 29.76288...\n6     Shimen 27137 POLYGON ((110.8825 30.11675...\n7    Liuyang 63118 POLYGON ((113.9905 28.5682,...\n8  Ningxiang 62202 POLYGON ((112.7181 28.38299...\n9  Wangcheng 70666 POLYGON ((112.7914 28.52688...\n10     Anren 12761 POLYGON ((113.1757 26.82734...\n\n\nThe print shows that polygon 1 has five neighbours. They are polygons number 2, 3, 4, 57,and 85.\nOne of the advantage of sfdep over spdep is that the output is an sf tibble data frame.\nTo display nb_queen sf tibble data frame in a table display, we use this code chunk below:\n\nkable(head(nb_queen,\n           n=10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 57, 85\nChangde\n21098\nAnxiang\nCounty\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 57, 58, 78, 85\nChangde\n21100\nHanshou\nCounty\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 85\nChangde\n21101\nJinshi\nCounty City\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\nChangde\n21102\nLi\nCounty\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n3, 4, 6, 85\nChangde\n21103\nLinli\nCounty\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69, 75, 85\nChangde\n21104\nShimen\nCounty\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n67, 71, 74, 84\nChangsha\n21109\nLiuyang\nCounty City\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n9, 46, 47, 56, 78, 80, 86\nChangsha\n21110\nNingxiang\nCounty\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 66, 68, 78, 84, 86\nChangsha\n21111\nWangcheng\nCounty\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 17, 19, 20, 22, 70, 72, 73\nChenzhou\n21112\nAnren\nCounty\nAnren\n12761\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\n\n\nIdentify contiguity neighbours: Rooks’ method\nTo derive a contiguity neighbour list using Rooks’ method:\n\nnb_rook &lt;- hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry,\n                            queen = FALSE),\n         .before = 1)\n\n\n\nIdentifying higher order neighbors\nThere are times that we need to identify high order contiguity neighbours. To accomplish the task, st_nb_lag_cumul() should be used as shown in the code chunk below.\n\nnb2_queen &lt;-  hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         nb2 = st_nb_lag_cumul(nb, 2),\n         .before = 1)\n\nNote that if the order is 2, the result contains both 1st and 2nd order neighbors as shown on the print below.\n\nnb2_queen\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                        nb2\n1                                     2, 3, 4, 5, 6, 32, 56, 57, 58, 64, 69, 75, 76, 78, 85\n2                           1, 3, 4, 5, 6, 8, 9, 32, 56, 57, 58, 64, 68, 69, 75, 76, 78, 85\n3                                                 1, 2, 4, 5, 6, 32, 56, 57, 69, 75, 78, 85\n4                                                             1, 2, 3, 5, 6, 57, 69, 75, 85\n5                                                 1, 2, 3, 4, 6, 32, 56, 57, 69, 75, 78, 85\n6                                         1, 2, 3, 4, 5, 32, 53, 55, 56, 57, 69, 75, 78, 85\n7                                                     9, 19, 66, 67, 71, 73, 74, 76, 84, 86\n8  2, 9, 19, 21, 31, 32, 34, 35, 36, 41, 45, 46, 47, 56, 58, 66, 68, 74, 78, 80, 84, 85, 86\n9               2, 7, 8, 19, 21, 35, 46, 47, 56, 58, 66, 67, 68, 74, 76, 78, 80, 84, 85, 86\n10               11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 70, 71, 72, 73, 74, 82, 83, 86\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#deriving-contiguity-weights-queens-method-1",
    "href": "In-class_Ex2/In-class_Ex2A.html#deriving-contiguity-weights-queens-method-1",
    "title": "In-Class Exercise 2A: Spatial Weights - sfdep methods",
    "section": "Deriving contiguity weights: Queen’s method",
    "text": "Deriving contiguity weights: Queen’s method\nNow we compute contiguity weights using st_weights() of sfdep package.\nIn the code chunk below, queen method is used to derive the contiguity weights.\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, \n                         style = \"W\"),\n         .before = 1)\n\nNotice that st_weights() provides three arguments, they are:\n\nnb: A neighbour list object created by st_neighbours()\nstyle: Default “W” for row standardised weights.\nallow_zero: if TRUE, assigns zero as lagged value to zone without neighbours.\n\nNote: .before: if it’s equal to 1, it will add the nb column and wt column as the first two columns in the wm_q data table.\n\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#distance-based-weights",
    "href": "In-class_Ex2/In-class_Ex2A.html#distance-based-weights",
    "title": "In-Class Exercise 2A: Spatial Weights - sfdep methods",
    "section": "Distance-based Weights",
    "text": "Distance-based Weights\nThere are three popularly used distance-based spatial weights, they are:\n\nfixed distance weights,\nadaptive distance weights, and\ninverse distance weights (IDW).\n\n\nDeriving fixed distance weights\nBefore we can derive the fixed distance weights, we need to determine the upper limit for distance band by using the steps below:\n\ngeo &lt;- sf::st_geometry(hunan_GDPPC)\nnb &lt;- st_knn(geo, longlat = TRUE)\n\n! Polygon provided. Using point on surface.\n\n\nWarning in st_point_on_surface.sfc(geometry): st_point_on_surface may not give\ncorrect results for longitude/latitude data\n\ndists &lt;- unlist(st_nb_dists(geo, nb))\n\n! Polygon provided. Using point on surface.\n\n\nWarning in st_point_on_surface.sfc(geometry): st_point_on_surface may not give\ncorrect results for longitude/latitude data\n\n\nNote:\n\nst_nb_dists() of sfdep is used to calculate the nearest neighbour distance. The output is a list of distances for each observation’s neighbors list.\nunlist() of Base R is then used to return the output as a vector so that the summary statistics of the nearest neighbour distances can be derived.\n\nNow, we will derive summary statistics of the nearest neighbour distances vector (i.e., dists) by using the code chunk below:\n\nsummary(dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.56   29.11   36.89   37.34   43.21   65.80 \n\n\nThe summary statistics report above shows that the maximum nearest neighbour distance is 65.80km. By using a threshold value of 66km will ensure that each area will have at least one neighbour.\nNow we will go ahead to compute the fixed distance weights by using the code chunk below.\n\nwm_fd &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_dist_band(geometry,\n                           upper = 66),\n               wt = st_weights(nb),\n               .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `nb = st_dist_band(geometry, upper = 66)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\nNote:\n\nst_dists_band() of sfdep is used to identify neighbors based on a distance band (i.e. 66km). The output is a list of neighbours (i.e. nb).\nst_weights() is then used to calculate polygon spatial weights of the nb list. Note that:\n\nthe default style argument is set to “W” for row standardized weights, and\nthe default allow_zero is set to TRUE, assigns zero as lagged value to zone without neighbors.\n\n\n\n\nDeriving adaptive distance weights\nIn this section, we will derive an adaptive spatial weights by using the code chunk below.\n\nwm_ad &lt;- hunan_GDPPC %&gt;% \n  mutate(nb = st_knn(geometry,\n                     k=8),\n         wt = st_weights(nb),\n               .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `nb = st_knn(geometry, k = 8)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\nNote:\n\nst_knn() of sfdep is used to identify neighbors based on k (i.e. k = 8 indicates the nearest eight neighbours). The output is a list of neighbours (i.e. nb).\nst_weights() is then used to calculate polygon spatial weights of the nb list. Note that:\n\nthe default style argument is set to “W” for row standardized weights, and\nthe default allow_zero is set to TRUE, assigns zero as lagged value to zone without neighbors.\n\n\n\n\nDeriving inverse distance weights\nIn this section, we will derive an inverse distance weights by using the code chunk below.\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\nNote:\n\nst_contiguity() of sfdep is used to identify the neighbours by using contiguity criteria. The output is a list of neighbours (i.e. nb).\nst_inverse_distance() is then used to calculate inverse distance weights of neighbours on the nb list."
  },
  {
    "objectID": "In-class_Ex3/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex3/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html",
    "href": "Take-home_Ex2/Take-home_Ex2.html",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models - Case Study of Singapore public bus commuter flows",
    "section": "",
    "text": "What are the driving forces behind urban dwellers to weak up early in morning to commute from their home locations to their work places? What are the impact of removing a public bus service on the commuters reside along the corridor of the bus route?\nAs transport infrastructures such as public buses, mass rapid transits, public utilities and roads become digital, the data sets obtained can be used as a framework for tracking movement patterns through space and time. This is particularly true with the recent trend of massive deployment of pervasive computing technologies such as GPS on the vehicles and SMART cards used by public transport commuters.\nHowever, despite increasing amounts of open data available for public consumption, there has not been significant practice research carried out to show how these disparate data sources can be integrated, analysed, and modelled to support policy making decisions. There is also a general lack of practical research to show how Geospatial Data Science and Analysis (GDSA) can be used to support decision making."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#background",
    "href": "Take-home_Ex2/Take-home_Ex2.html#background",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models - Case Study of Singapore public bus commuter flows",
    "section": "",
    "text": "What are the driving forces behind urban dwellers to weak up early in morning to commute from their home locations to their work places? What are the impact of removing a public bus service on the commuters reside along the corridor of the bus route?\nAs transport infrastructures such as public buses, mass rapid transits, public utilities and roads become digital, the data sets obtained can be used as a framework for tracking movement patterns through space and time. This is particularly true with the recent trend of massive deployment of pervasive computing technologies such as GPS on the vehicles and SMART cards used by public transport commuters.\nHowever, despite increasing amounts of open data available for public consumption, there has not been significant practice research carried out to show how these disparate data sources can be integrated, analysed, and modelled to support policy making decisions. There is also a general lack of practical research to show how Geospatial Data Science and Analysis (GDSA) can be used to support decision making."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#objective",
    "href": "Take-home_Ex2/Take-home_Ex2.html#objective",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models - Case Study of Singapore public bus commuter flows",
    "section": "Objective",
    "text": "Objective\nWe would like to conduct a case study to demonstrate the potential value of GDSA to do the following:\n\nintegrate publicly available data from multiple sources for building a spatial interaction model\nso as to determine factors affecting urban mobility patterns of public bus transit."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "href": "Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models - Case Study of Singapore public bus commuter flows",
    "section": "Getting Started",
    "text": "Getting Started\nIn this take-home exercise, the following R packages will be used:\n\nsf for geospatial data handling (importing, integrating, processing, and transforming geospatial data)\ntidyverse for non-spatial data handling (importing, integrating, wrangling, and visualising data)\ntmap for thematic mapping\nknitr for creating html table.\nDT for creating dynamic html table\nperformance for computing model comparison matrices such as rmse.\nggpubr for creating publication quality statistical graphics.\nreshape2 for handling matrices\n\n\npacman::p_load(sf, sp, sfdep, tidyverse, tmap, knitr, DT, stplanr, performance, ggpubr, reshape2, httr, dplyr)"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#the-data",
    "href": "Take-home_Ex2/Take-home_Ex2.html#the-data",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models - Case Study of Singapore public bus commuter flows",
    "section": "The Data",
    "text": "The Data\n\nImporting geospatial data\nFor this take-home exercise, two geospatial data sets will be used:\n\nBusStop: This data provides the location of bus stop as at last quarter of 2022.\nMPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.\n\nFirstly, we import Bus Stops Location from LTA DataMall. This provides information about all the bus stops currently being serviced by buses, including the bus stop code (identifier) and location coordinates:\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\PeiShan0502\\ISSS624\\Take-home_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nFrom the output, we can see that busstop is in SVY21 coordinates system. To learn more, we can apply glimpse() of dplyr package:\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\nThere might be duplicated bus stops. We keep only the unique bus stops using the code chunk below:\n\nbusstop &lt;- busstop %&gt;%\n  distinct(BUS_STOP_N,\n           .keep_all = TRUE)\n\n\nglimpse(busstop)\n\nRows: 5,145\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\nThere are 5,145 unique bus stops, lesser than the 5,161 bus stops we had when we first imported the BusStop data set. This implies that there were 16 bus stops that were duplicated in the BusStop data set.\nNext, we import the MPSZ-2019 data set as well:\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\PeiShan0502\\ISSS624\\Take-home_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\n\n\nImporting aspatial data\nNext, we will import origin_destination_bus_202310.csv into R by using read_csv() of readr package. The output is R data frame class. This data set returns the number of trips by weekdays and weekends from the origin to destination bus stops in October 2023:\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\", show_col_types = FALSE)\n\nSimilarly, we can use glimpse() to see all the columns and their data type in the R data frame:\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nThe fields ORIGIN_PT_CODE and DESTINATION_PT_CODE represent the bus stop number at the origin and destination. They need to be converted into factor data type so that we can geocode/georeference with the Bus Stops Location geospatial data later.\nThe code chunk below converts them into factor data type:\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\nNow we check that both fields are in factor data type now:\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 20281, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#task-1-geospatial-data-science",
    "href": "Take-home_Ex2/Take-home_Ex2.html#task-1-geospatial-data-science",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models - Case Study of Singapore public bus commuter flows",
    "section": "Task 1: Geospatial Data Science",
    "text": "Task 1: Geospatial Data Science\nSub-Task 1: Derive an analytical hexagon data of 375m (this distance is the perpendicular distance between the centre of the hexagon and its edges) to represent the traffic analysis zone (TAZ).\n\nData Preparation\n\nFilter by peak hour period\nThe output of the code chunks below shows the number of passenger trips for each bus stop in the weekday morning peak period (6am to 9am), a time period where there is expected to have high spatial interaction flows as students need to go to school to study, and employees need to go to their workplace to work:\n\nodbus6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n`summarise()` has grouped output by 'ORIGIN_PT_CODE'. You can override using\nthe `.groups` argument.\n\n# summarise() has grouped the output by 'ORIGIN_PT_CODE'.\n\nWe save the output in rds format for future use:\n\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\n\n\n\nDerive Analytical Hexagon layer of 375m to represent Traffic Analysis Zone (TAZ)\nCreate hexagon layer over Bus Stops Location:\nThe code chunk below is used to first create a hexagon layer over the Bus Stops Location (busstops), then find the number of bus stops in each hexagon. We also remove hexagons where there are no bus stops.\nAn explanation of key functions used:\n\nst_make_grid: for hexagon, the argument cellsize refers to the distance between opposite edges. Since the task requires us to create a hexagon layer such that the perpendicular distance between the centre of the hexagon and its edges is 375m, this implies that the distance between opposite edges is 750m.\nst_sf: convert sfc_POLYGON object (returned by st_make_grid) to simple feature sf object.\nst_intersects: returns a list of which points are lying in each hexagon.\n\n\n# creates hexagon grid (an sfc polygon object)\narea_honeycomb_grid = st_make_grid(busstop, c(750, 750), what = \"polygons\", square = FALSE)\n\n# Convert hexagon grid to sf object\nhoneycomb_grid_sf = st_sf(area_honeycomb_grid) %&gt;%\n  # add grid ID (giving each hexagon a unique ID)\n  mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))\n\n# count number of points (bus stops) in each grid/hexagon\nhoneycomb_grid_sf$n_colli = lengths(st_intersects(honeycomb_grid_sf, busstop))\n\n# remove grid/hexagons with value of 0 (i.e. no points inside that grid)\nhoneycomb_count = filter(honeycomb_grid_sf, n_colli &gt; 0)\n\n#Note: The n_colli column shows the number of bus stops in each grid/hexagon.\n\n\nst_geometry(honeycomb_count)\n\nGeometry set for 834 features \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3595.122 ymin: 26049.09 xmax: 48595.12 ymax: 53545.39\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOLYGON ((3970.122 27348.13, 3595.122 27564.63,...\n\n\nPOLYGON ((4345.122 27997.65, 3970.122 28214.15,...\n\n\nPOLYGON ((4345.122 30595.72, 3970.122 30812.23,...\n\n\nPOLYGON ((4720.122 28647.16, 4345.122 28863.67,...\n\n\nPOLYGON ((4720.122 29946.2, 4345.122 30162.71, ...\n\n\nWe also confirm that the EPSG code for honeycomb_count is correct (3414 for projected coordinate system SVY21):\n\nst_crs(honeycomb_count)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nSub-Task 2: With reference to the time intervals provided in the table below, construct an O-D matrix of commuter flows for a time interval of your choice by integrating Passenger Volume by Origin Destination Bus Stops and Bus Stop Location from LTA DataMall. The O-D matrix must be aggregated at the analytics hexagon level.\n\n\n\nPeak hour period\nBus tap on time (in 24hr format)\n\n\n\n\nWeekday morning peak\n0600 to 0900\n\n\nWeekday afternoon peak\n1700 to 2000\n\n\nWeekend/holiday morning peak\n1100 to 1400\n\n\nWeekend/holiday evening peak\n1600 to 1900\n\n\n\nWe construct an Origin-Destination (O-D) matrix of commuter flows for the weekday morning peak (6am to 9am). The steps required are:\n\nCombine Bus Stop Location and Hexagon layer\nConstruct an O-D matrix aggregated at the analytical hexagon level.\n\n\n\n\nGeospatial Data Wrangling\n\nCombining Bus Stop Location and Hexagon layer\nThe code chunk below performs points and hexagon overlap using st_intersection().\nThe output shows which bus stop (BUS_STOP_N) is in which hexagon (grid_id), location description of bus stop (LOC_DESC), and the number of bus stops in that hexagon (n_colli).\n\nbusstop_hex &lt;- st_intersection(busstop, honeycomb_count) %&gt;%\n  select(BUS_STOP_N, LOC_DESC, grid_id, n_colli) %&gt;%\n  st_drop_geometry()\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n#BUS_STOP_N: Bus stop number\n#n_colli: no. of bus stops in each hexagon\n\n\ndatatable(busstop_hex)\n\n\n\n\n\n\nBefore moving to next step, we save the output just in case:\n\nwrite_rds(busstop_hex, \"data/rds/busstop_hex.rds\")  \n\n\n\nConstruct O-D matrix\nNext, we perform left join between odbus6_9 and busstop_hex. The resultant data frame od_data shows the number of trips for each bus stop, which hexagon the bus stop is in, and the number of bus stops in that hexagon:\n\nod_data &lt;- left_join(odbus6_9, busstop_hex, \n                     by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(origin_num_BS = n_colli,\n         ORIGIN_BS = ORIGIN_PT_CODE,\n         DESTINATION_BS = DESTINATION_PT_CODE,\n         origin_grid_id = grid_id,\n         origin_LOC_DESC = LOC_DESC)\n\nWe confirm that there are no duplicates before proceeding:\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;% \n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate\n\n# A tibble: 0 × 6\n# ℹ 6 variables: ORIGIN_BS &lt;chr&gt;, DESTINATION_BS &lt;fct&gt;, TRIPS &lt;dbl&gt;,\n#   origin_LOC_DESC &lt;chr&gt;, origin_grid_id &lt;int&gt;, origin_num_BS &lt;int&gt;\n\n\nWe perform another left join, this time between od_data and busstop_hex to get ‘destination_grid_id’ and ‘DESTINATION_LOC_DESC’ :\n\nod_data2 &lt;- left_join(od_data , busstop_hex,\n            by = c(\"DESTINATION_BS\" = \"BUS_STOP_N\")) %&gt;%\n  rename(DESTINATION_LOC_DESC = LOC_DESC,\n         destination_grid_id = grid_id,\n         destination_num_BS = n_colli)\n\nBefore continuing, we check whether there are any duplicating records:\n\nduplicate &lt;- od_data2 %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate\n\n# A tibble: 0 × 9\n# ℹ 9 variables: ORIGIN_BS &lt;chr&gt;, DESTINATION_BS &lt;chr&gt;, TRIPS &lt;dbl&gt;,\n#   origin_LOC_DESC &lt;chr&gt;, origin_grid_id &lt;int&gt;, origin_num_BS &lt;int&gt;,\n#   DESTINATION_LOC_DESC &lt;chr&gt;, destination_grid_id &lt;int&gt;,\n#   destination_num_BS &lt;int&gt;\n\n\nThe output above confirms that there are no duplicating records.\nThe next step is to group by origin_grid_id and destination_grid_id to create a new field called morning_peak_trips which calculates the number of trips between hexagon i (origin) and hexagon j (destination).\n\nod_data3 &lt;- od_data2 %&gt;%\n  group_by(origin_grid_id, destination_grid_id) %&gt;%\n  summarise(morning_peak_trips = sum(TRIPS))\n\n`summarise()` has grouped output by 'origin_grid_id'. You can override using\nthe `.groups` argument.\n\nod_data3\n\n# A tibble: 66,639 × 3\n# Groups:   origin_grid_id [818]\n   origin_grid_id destination_grid_id morning_peak_trips\n            &lt;int&gt;               &lt;int&gt;              &lt;dbl&gt;\n 1             23                  67                  1\n 2             23                  87                  1\n 3             23                 128                  4\n 4             23                 154                  3\n 5             23                 175                 93\n 6             23                 176                  1\n 7             44                  23                  1\n 8             44                  67                  2\n 9             44                  86                  1\n10             44                  88                  2\n# ℹ 66,629 more rows\n\n\n\ndatatable(od_data3)\n\nWarning in instance$preRenderHook(instance): It seems your data is too big for\nclient-side DataTables. You may consider server-side processing:\nhttps://rstudio.github.io/DT/server.html\n\n\n\n\n\n\n\n\n\nCompute Distance Matrix at Hexagon level\nas.Spatial() will be used to convert honeycomb_count from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below. We use sp method instead of sf method as computing distance matrix using sf function usually takes longer than sp method especially for large data set.\n\nhoneycomb_sp &lt;- as(honeycomb_count, \"Spatial\")\nhoneycomb_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 834 \nextent      : 3595.122, 48595.12, 26049.09, 53545.39  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       : grid_id, n_colli \nmin values  :      23,       1 \nmax values  :    2505,      19 \n\n\nNext, spDists() of sp package will be used to compute the Euclidean distance between the centroids of the hexagons. We will print the first 10 rows of the distance matrix:\n\ndist &lt;- spDists(honeycomb_sp, \n                longlat = FALSE)\nhead(dist, n=c(10, 10))\n\n          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8]\n [1,]    0.000  750.000 3269.174 1500.000 2704.163 3968.627 1299.038 2250.000\n [2,]  750.000    0.000 2598.076  750.000 1984.313 3269.174  750.000 1500.000\n [3,] 3269.174 2598.076    0.000 1984.313  750.000  750.000 2704.163 1500.000\n [4,] 1500.000  750.000 1984.313    0.000 1299.038 2598.076  750.000  750.000\n [5,] 2704.163 1984.313  750.000 1299.038    0.000 1299.038 1984.313  750.000\n [6,] 3968.627 3269.174  750.000 2598.076 1299.038    0.000 3269.174 1984.313\n [7,] 1299.038  750.000 2704.163  750.000 1984.313 3269.174    0.000 1299.038\n [8,] 2250.000 1500.000 1500.000  750.000  750.000 1984.313 1299.038    0.000\n [9,] 3436.932 2704.163  750.000 1984.313  750.000  750.000 2598.076 1299.038\n[10,] 4683.748 3968.627 1500.000 3269.174 1984.313  750.000 3897.114 2598.076\n          [,9]    [,10]\n [1,] 3436.932 4683.748\n [2,] 2704.163 3968.627\n [3,]  750.000 1500.000\n [4,] 1984.313 3269.174\n [5,]  750.000 1984.313\n [6,]  750.000  750.000\n [7,] 2598.076 3897.114\n [8,] 1299.038 2598.076\n [9,]    0.000 1299.038\n[10,] 1299.038    0.000\n\n\nNotice that the output dist is a matrix object class of R. Also notice that the column headers and row headers are not labeled with the grid ids (origin_grid_id and destination_grid_id)\n\n\nLabelling column and row headers of a distance matrix\nFirst, we will create a list sorted according to the distance matrix by hexagon grid ids:\n\ngrid_ids &lt;- honeycomb_count$grid_id\n\ncolnames(dist) &lt;- paste0(grid_ids)\nrownames(dist) &lt;- paste0(grid_ids)\n\nWe check that the column and row headers of the distance matrix have been labelled:\n\nhead(dist, n=c(10, 10))\n\n         23       44       46       66       67       68       86       87\n23    0.000  750.000 3269.174 1500.000 2704.163 3968.627 1299.038 2250.000\n44  750.000    0.000 2598.076  750.000 1984.313 3269.174  750.000 1500.000\n46 3269.174 2598.076    0.000 1984.313  750.000  750.000 2704.163 1500.000\n66 1500.000  750.000 1984.313    0.000 1299.038 2598.076  750.000  750.000\n67 2704.163 1984.313  750.000 1299.038    0.000 1299.038 1984.313  750.000\n68 3968.627 3269.174  750.000 2598.076 1299.038    0.000 3269.174 1984.313\n86 1299.038  750.000 2704.163  750.000 1984.313 3269.174    0.000 1299.038\n87 2250.000 1500.000 1500.000  750.000  750.000 1984.313 1299.038    0.000\n88 3436.932 2704.163  750.000 1984.313  750.000  750.000 2598.076 1299.038\n89 4683.748 3968.627 1500.000 3269.174 1984.313  750.000 3897.114 2598.076\n         88       89\n23 3436.932 4683.748\n44 2704.163 3968.627\n46  750.000 1500.000\n66 1984.313 3269.174\n67  750.000 1984.313\n68  750.000  750.000\n86 2598.076 3897.114\n87 1299.038 2598.076\n88    0.000 1299.038\n89 1299.038    0.000\n\n\nNext, we will pivot the distance matrix into a long table by using the row and column grid_ids as show in the code chunk below:\n\ndistPair &lt;- melt(dist) %&gt;%\n  rename(dist = value)\n\nhead(distPair, 10)\n\n   Var1 Var2     dist\n1    23   23    0.000\n2    44   23  750.000\n3    46   23 3269.174\n4    66   23 1500.000\n5    67   23 2704.163\n6    68   23 3968.627\n7    86   23 1299.038\n8    87   23 2250.000\n9    88   23 3436.932\n10   89   23 4683.748\n\n\nNote that the within-zone (intra-zonal) distance is zero.\n\n\nUpdating intra-zonal distances\nWe are going to append a constant value to replace the intra-zonal distance of 0.\nFirst, we will select and find out the minimum value of the distance by using summary().\n\ndistPair %&gt;%\n  filter(dist &gt; 0) %&gt;%\n  summary()\n\n      Var1           Var2           dist      \n Min.   :  23   Min.   :  23   Min.   :  750  \n 1st Qu.: 871   1st Qu.: 871   1st Qu.: 8352  \n Median :1324   Median :1324   Median :13332  \n Mean   :1269   Mean   :1269   Mean   :14162  \n 3rd Qu.:1688   3rd Qu.:1688   3rd Qu.:18929  \n Max.   :2505   Max.   :2505   Max.   :44680  \n\n\nThe output of the above code chunk shows that the minimum distance is 750m. With reference to this result, any values smaller than 750m can be used to represent intra-zonal distance. 750m divided by 2 will give us 375m. So we can choose an arbitrary value 300m to replace the intra-zonal distances of 0.\n\ndistPair$dist &lt;- ifelse(distPair$dist == 0,\n                        300, distPair$dist)\n\nFurthermore, we also need to rename the origin and destination fields:\n\ndistPair &lt;- distPair %&gt;%\n  rename(origin_grid_id = Var1,\n         destination_grid_id = Var2)\n\n\n# check resultant distPair dataframe\n\ndistPair %&gt;%\n  summary()\n\n origin_grid_id destination_grid_id      dist      \n Min.   :  23   Min.   :  23        Min.   :  300  \n 1st Qu.: 871   1st Qu.: 871        1st Qu.: 8250  \n Median :1324   Median :1324        Median :13332  \n Mean   :1269   Mean   :1269        Mean   :14145  \n 3rd Qu.:1688   3rd Qu.:1688        3rd Qu.:18929  \n Max.   :2505   Max.   :2505        Max.   :44680  \n\n\nWe save this data frame for future use:\n\nwrite_rds(distPair, \"data/rds/distPair.rds\") \n\n\n\n\nPreparing flow data\nSub-Task 3: Display the O-D flows of the passenger trips by using appropriate geovisualisation methods (not more than 5 maps).\nIn this section, we will compute the number of TRIPS between and within each hexagon (origins and destinations) by using the code chunk below:\n\nflow_data &lt;- od_data3 %&gt;%\n  group_by(origin_grid_id, destination_grid_id) %&gt;% \n  summarize(TRIPS = sum(morning_peak_trips)) \n\n`summarise()` has grouped output by 'origin_grid_id'. You can override using\nthe `.groups` argument.\n\n# view first 10 rows of flow_data dataframe\nhead(flow_data, 10)\n\n# A tibble: 10 × 3\n# Groups:   origin_grid_id [2]\n   origin_grid_id destination_grid_id TRIPS\n            &lt;int&gt;               &lt;int&gt; &lt;dbl&gt;\n 1             23                  67     1\n 2             23                  87     1\n 3             23                 128     4\n 4             23                 154     3\n 5             23                 175    93\n 6             23                 176     1\n 7             44                  23     1\n 8             44                  67     2\n 9             44                  86     1\n10             44                  88     2\n\n\n\nSeparating intra-flow from flow_data dataframe\nThe code chunk below is used to add two new fields into flow_data dataframe:\n\nFlowNoIntra = 0 if origin_grid_id = destination_grid_id, else FlowNoIntra = TRIPS.\noffset = 0.000001 if origin_grid_id = destination_grid_id, else offset = 1.\n\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$origin_grid_id == flow_data$destination_grid_id, \n  0, flow_data$TRIPS)\nflow_data$offset &lt;- ifelse(\n  flow_data$origin_grid_id == flow_data$destination_grid_id, \n  0.000001, 1)\n\nAccording to the syntax used to derive values in FlowNoIntra field, all intra-zonal flow will be given a value of 0 or else the original flow values will be inserted.\nNext, inter-zonal flow will be selected from flow_data and save into a new output data.frame called inter_zonal_flow by using the code chunk below.\n\ninter_zonal_flow &lt;- flow_data %&gt;%\n  filter(FlowNoIntra &gt; 0)\n\n\n\nCombining flow_data with distance value\nBefore we can join inter_zonal_flow and distPair, we need to ensure that the data type of origin_grid_id and destination_grid_id is factor data type.\nCheck data type of inter_zonal_flow:\n\nglimpse(inter_zonal_flow)\n\nRows: 65,030\nColumns: 5\nGroups: origin_grid_id [816]\n$ origin_grid_id      &lt;int&gt; 23, 23, 23, 23, 23, 23, 44, 44, 44, 44, 44, 44, 44…\n$ destination_grid_id &lt;int&gt; 67, 87, 128, 154, 175, 176, 23, 67, 86, 88, 128, 1…\n$ TRIPS               &lt;dbl&gt; 1, 1, 4, 3, 93, 1, 1, 2, 1, 2, 3, 1, 2, 40, 1, 1, …\n$ FlowNoIntra         &lt;dbl&gt; 1, 1, 4, 3, 93, 1, 1, 2, 1, 2, 3, 1, 2, 40, 1, 1, …\n$ offset              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n\n\nCheck data type of distPair:\n\nglimpse(distPair)\n\nRows: 695,556\nColumns: 3\n$ origin_grid_id      &lt;int&gt; 23, 44, 46, 66, 67, 68, 86, 87, 88, 89, 90, 109, 1…\n$ destination_grid_id &lt;int&gt; 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23…\n$ dist                &lt;dbl&gt; 300.000, 750.000, 3269.174, 1500.000, 2704.163, 39…\n\n\nAs shown by the outputs above, the origin_grid_id and destination_grid_id is currently in integer data type. We need to convert them into factor data type:\n\ninter_zonal_flow$origin_grid_id &lt;- as.factor(inter_zonal_flow$origin_grid_id)\ninter_zonal_flow$destination_grid_id &lt;- as.factor(inter_zonal_flow$destination_grid_id)\n\ndistPair$origin_grid_id &lt;- as.factor(distPair$origin_grid_id)\ndistPair$destination_grid_id &lt;- as.factor(distPair$destination_grid_id)\n\n\nglimpse(inter_zonal_flow)\n\nRows: 65,030\nColumns: 5\nGroups: origin_grid_id [816]\n$ origin_grid_id      &lt;fct&gt; 23, 23, 23, 23, 23, 23, 44, 44, 44, 44, 44, 44, 44…\n$ destination_grid_id &lt;fct&gt; 67, 87, 128, 154, 175, 176, 23, 67, 86, 88, 128, 1…\n$ TRIPS               &lt;dbl&gt; 1, 1, 4, 3, 93, 1, 1, 2, 1, 2, 3, 1, 2, 40, 1, 1, …\n$ FlowNoIntra         &lt;dbl&gt; 1, 1, 4, 3, 93, 1, 1, 2, 1, 2, 3, 1, 2, 40, 1, 1, …\n$ offset              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n\n\n\nglimpse(distPair)\n\nRows: 695,556\nColumns: 3\n$ origin_grid_id      &lt;fct&gt; 23, 44, 46, 66, 67, 68, 86, 87, 88, 89, 90, 109, 1…\n$ destination_grid_id &lt;fct&gt; 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23…\n$ dist                &lt;dbl&gt; 300.000, 750.000, 3269.174, 1500.000, 2704.163, 39…\n\n\nNow, left_join() of dplyr will be used to combine inter_zonal_flow dataframe and distPair dataframe. The output is called flow_data1.\n\nflow_data1 &lt;- inter_zonal_flow %&gt;%\n  left_join (distPair,\n             by = c(\"origin_grid_id\" = \"origin_grid_id\",\n                    \"destination_grid_id\" = \"destination_grid_id\"))\n\nThe flow_data1 dataframe contains origin_grid_id, destination_grid_id, the number of trips from origin to destination, and the distance between origin and destination.\n\n\n\nVisualise Origin-Destination flows of weekday morning peak period\nWe will not plot the intra-zonal flows. The code chunk below will be used to remove intra-zonal flows.\n\nod_data4 &lt;- od_data3[od_data3$origin_grid_id != od_data3$destination_grid_id,]\n\n\nCreating desire lines\nIn this code chunk below, od2line() of stplanr package is used to create the desire lines.\n\nflowLine &lt;- od2line(flow = flow_data1, \n                    zones = honeycomb_count,\n                    zone_code = 'grid_id')\n\nCreating centroids representing desire line start and end points.\n\n\n\n\nVisualising the desire lines\nTo visualise the resulting desire lines, the code chunk below is used:\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3) +\n    tm_layout(main.title = 'All O-D Flows on Weekday Morning Peak Hours',\n            main.title.position = 'center',\n            main.title.size = 1,\n            main.title.fontface = 'bold')\n\nThe above map looks very messy. We focus only on selected flows, for example flows greater than or equal to 5000 as shown below:\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \n  filter(TRIPS &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3) +\n  tm_layout(main.title = 'O-D Flows &gt;= 5000 on Weekday Morning Peak Hours',\n            main.title.position = 'center',\n            main.title.size = 1,\n            main.title.fontface = 'bold')\n\nWe change this to an interactive map so that we can click into the map to see the details of each region and the flows between regions:\n\ntmap_mode('view')\ntmap_options(check.and.fix = TRUE)\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \n  filter(TRIPS &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3) +\n  tm_layout(main.title = 'O-D Flows &gt;= 5000 on Weekday Morning Peak Hours',\n            main.title.position = 'center',\n            main.title.size = 1,\n            main.title.fontface = 'bold')\n\nFrom the above map, we observe the following occurrences:\n\nThere are many flows occurring between West and South of Singapore, as well as North and East of Singapore.\n\n\n\nPreparing Origin and Destination Attributes\nSub-Task: Assemble at least three propulsive and three attractiveness variables by using aspatial and geospatial from publicly available sources.\nThese are potential attractiveness variables:\n\nThe location of schools could be an attractiveness variable as during the weekday morning peak hours of 6am to 9am, students would need to go to school for lessons.\nLocations of businesses, retail, and financial services is also a potential attractiveness variable as working adults would need to travel to their workplaces during the weekday morning peak hours.\n\nOne of the modes of transport that students and working adults can take to go to school is via bus. Thus, we will be using the Bus Stop Location geospatial data set that is already imported.\n\nGeospatial data sets\nWe will import the Business, Retails, and FinServ geospatial data sets that have been provided by Prof Kam:\n\nbusiness &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = 'Business')\n\nReading layer `Business' from data source \n  `C:\\PeiShan0502\\ISSS624\\Take-home_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\n\nfin &lt;- st_read(dsn = \"data/geospatial\",\n               layer = 'FinServ')\n\nReading layer `FinServ' from data source \n  `C:\\PeiShan0502\\ISSS624\\Take-home_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 3320 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4881.527 ymin: 25171.88 xmax: 46526.16 ymax: 49338.02\nProjected CRS: SVY21 / Singapore TM\n\n\n\nretail &lt;- st_read(dsn = \"data/geospatial\",\n                  layer = 'Retails')\n\nReading layer `Retails' from data source \n  `C:\\PeiShan0502\\ISSS624\\Take-home_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 37635 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4737.982 ymin: 25171.88 xmax: 48265.04 ymax: 50135.28\nProjected CRS: SVY21 / Singapore TM\n\n\n\n\nAspatial data sets\nWe import the General information of schools data set of School Directory and Information which was downloaded from data.gov.sg.\n\nsch &lt;- read_csv('data/aspatial/Generalinformationofschools.csv', show_col_types = FALSE)\n\nGeocoding using SLA API\nAddress geocoding, or simply geocoding, is the process of taking a aspatial description of a location, such as an address or postcode, and returning geographic coordinates, frequently latitude/longitude pair, to identify a location on the Earth’s surface.\nSingapore Land Authority (SLA) supports an online geocoding service called OneMap API. The Search API looks up the address data or 6-digit postal code for an entered value. It then returns both latitude, longitude and x,y coordinates of the searched location.\nThe code chunks below will perform geocoding using SLA OneMap API. The input data will be in csv file format. It will be read into R Studio environment using read_csv function of readr package. A collection of http call functions of httr package of R will then be used to pass the individual records to the geocoding server at OneMap.\nTwo tibble data.frames will be created if the geocoding process completed successfully. They are called found and not_found. found contains all records that are geocoded correctly and not_found contains postal codes that failed to be geocoded.\nLastly, the found data table will joined with the initial csv data table by using a unique identifier (i.e. POSTAL) common to both data tables. The output data table will then save as an csv file called found.\n\nurl&lt;-\"https://www.onemap.gov.sg/api/common/elastic/search\"\n\npostcodes&lt;-sch$`postal_code`\n\nfound&lt;-data.frame()\nnot_found&lt;-data.frame()\n\nfor(postcode in postcodes){\n  query&lt;-list('searchVal'=postcode,'returnGeom'='Y','getAddrDetails'='Y','pageNum'='1')\n  res&lt;- GET(url,query=query)\n  \n  if((content(res)$found)!=0){\n    found&lt;-rbind(found,data.frame(content(res))[4:13])\n  } else{\n    not_found = data.frame(postcode)\n  }\n}\n\nLooking at the not_found data.frame and searching for the postal code in the sch data frame, we notice that the postal code of ZHENGHUA SECONDARY SCHOOL failed to be geocoded.\nNext, the code chunk below will be used to combine both sch and found data.frames into a single tibble data.frame called merged. At the same time, we will write merged and not_found tibble data.frames into two separate csv files called geocoded_schools and not_found respectively.\n\nmerged = merge(sch, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE)\nwrite.csv(merged, file = \"data/aspatial/geocoded_schools.csv\")\nwrite.csv(not_found, file = \"data/aspatial/not_found.csv\")\n\nWe then manually add the latitude and longitude of ZHENGHUA SECONDARY SCHOOL (1.3887°N 103.7652°E) into merged.csv for further data wrangling in the next section.\n\n\n\nTidying schools data.frame\nIn this section, we will import geocoded_schools.csv into R environment and tidy up the data by selecting only the necessary data fields and rename some fields.\n\ngeocoded_schools &lt;- read_csv(\"data/aspatial/geocoded_schools.csv\", show_col_types = FALSE) %&gt;%\n  rename(latitude = \"results.LATITUDE\",\n         longitude = \"results.LONGITUDE\")%&gt;%\n  select(postal_code, school_name, latitude, longitude)\n\nNew names:\n• `` -&gt; `...1`\n\n\n\n\nConverting an aspatial data into sf tibble data.frame\nNext, we need to convert geocoded_schools tibble data.frame data into a simple feature tibble data.frame called schools_sf by using values in latitude and longitude fields. We use st_as_sf() of sf package.\n\nschools_sf &lt;- st_as_sf(geocoded_schools, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nLet’s save schools_sf into an rds file using the code chunk below:\n\nwrite_rds(schools_sf, \"data/rds/schools.rds\")\n\n\n\nPlotting a point simple feature layer\nTo ensure that schools sf tibble data.frame has been projected and converted correctly, we plot the schools point data for visual inspection:\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(schools_sf) +\n  tm_dots()\n\n\n\nPerforming point-in-polygon count process\nNext, we will count the number of schools located inside the hexagons.\n\nhoneycomb_count$`SCHOOL_COUNT`&lt;- lengths(\n  st_intersects(\n    honeycomb_count, schools_sf))\n\nWe examine the summary statistics of the derived variable:\n\nsummary(honeycomb_count$`SCHOOL_COUNT`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.4113  1.0000  4.0000 \n\n\nThe summary statistics above reveals that there are excessive 0 values in SCHOOL_COUNT field. If log() is going to use to transform this field, additional step is required to ensure that all 0 will be replaced with a value between 0 and 1 but not 0 neither 1.\n\n\nData Integration and Final Touch-up\nWe visualise the businesses on a thematic map:\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(business) +\n  tm_dots()\n\n\nhoneycomb_count$`BUSINESS_COUNT`&lt;- lengths(\n  st_intersects(\n    honeycomb_count, business))\n\n\nsummary(honeycomb_count$`BUSINESS_COUNT`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   1.000   7.273   7.000  97.000 \n\n\nSimilarly, we visualise the retails on a thematic map:\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(retail) +\n  tm_dots()\n\n\nhoneycomb_count$`RETAIL_COUNT`&lt;- lengths(\n  st_intersects(\n    honeycomb_count, retail))\n\n\nsummary(honeycomb_count$`RETAIL_COUNT`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    1.00    8.00   44.04   36.75 1678.00 \n\n\nVisualise financial services on a thematic map:\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(fin) +\n  tm_dots()\n\n\nhoneycomb_count$`FIN_COUNT`&lt;- lengths(\n  st_intersects(\n    honeycomb_count, fin))\n\n\nsummary(honeycomb_count$`FIN_COUNT`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   1.000   3.922   4.000 139.000 \n\n\n\nhoneycomb_tidy &lt;- honeycomb_count %&gt;%\n  st_drop_geometry() %&gt;%\n  select(grid_id, SCHOOL_COUNT, BUSINESS_COUNT)\n\nWe append ‘SCHOOL_COUNT’ and ‘BUSINESS_COUNT’ into the flow_data1 data.frame, so that they can be used as attractiveness variables later when calibrating the Spatial Interaction Model.\n\nhoneycomb_tidy$grid_id = as.factor(honeycomb_tidy$grid_id)\n\nflow_data2 &lt;- flowLine %&gt;%\n  left_join(honeycomb_tidy,\n            by = c('destination_grid_id' = 'grid_id'))\n\n\n\nChecking for variables with zero values\nSince Poisson Regression is based of log and log 0 is undefined, it is important for us to ensure that no 0 values in the explanatory variables.\nIn the code chunk below, summary() of Base R is used to compute the summary statistics of all variables in flow_data2 data frame.\n\nsummary(flow_data2)\n\n origin_grid_id  destination_grid_id     TRIPS          FlowNoIntra     \n 1474   :  293   1474   :  354       Min.   :    1.0   Min.   :    1.0  \n 1477   :  293   1452   :  335       1st Qu.:    7.0   1st Qu.:    7.0  \n 1960   :  293   1516   :  324       Median :   37.0   Median :   37.0  \n 1496   :  283   1494   :  296       Mean   :  374.9   Mean   :  374.9  \n 1812   :  278   1477   :  295       3rd Qu.:  174.0   3rd Qu.:  174.0  \n 1749   :  277   1432   :  289       Max.   :97602.0   Max.   :97602.0  \n (Other):63313   (Other):63137                                          \n     offset       dist        SCHOOL_COUNT    BUSINESS_COUNT  \n Min.   :1   Min.   :  750   Min.   :0.0000   Min.   : 0.000  \n 1st Qu.:1   1st Qu.: 3000   1st Qu.:0.0000   1st Qu.: 0.000  \n Median :1   Median : 5408   Median :0.0000   Median : 1.000  \n Mean   :1   Mean   : 6342   Mean   :0.5283   Mean   : 7.298  \n 3rd Qu.:1   3rd Qu.: 8842   3rd Qu.:1.0000   3rd Qu.: 6.000  \n Max.   :1   Max.   :24784   Max.   :4.0000   Max.   :97.000  \n                                                              \n          geometry    \n LINESTRING   :65030  \n epsg:3414    :    0  \n +proj=tmer...:    0  \n                      \n                      \n                      \n                      \n\n\nThe print report above reveals that variables SCHOOL_COUNT and BUSINESS_COUNT consist of 0 values.\nIn view of this, code chunk below will be used to replace zero values to 0.99.\n\nflow_data2$SCHOOL_COUNT &lt;- ifelse(\n  flow_data2$SCHOOL_COUNT == 0,\n  0.99, flow_data2$SCHOOL_COUNT)\nflow_data2$BUSINESS_COUNT &lt;- ifelse(\n  flow_data2$BUSINESS_COUNT == 0,\n  0.99, flow_data2$BUSINESS_COUNT)\n\n\nsummary(flow_data2)\n\n origin_grid_id  destination_grid_id     TRIPS          FlowNoIntra     \n 1474   :  293   1474   :  354       Min.   :    1.0   Min.   :    1.0  \n 1477   :  293   1452   :  335       1st Qu.:    7.0   1st Qu.:    7.0  \n 1960   :  293   1516   :  324       Median :   37.0   Median :   37.0  \n 1496   :  283   1494   :  296       Mean   :  374.9   Mean   :  374.9  \n 1812   :  278   1477   :  295       3rd Qu.:  174.0   3rd Qu.:  174.0  \n 1749   :  277   1432   :  289       Max.   :97602.0   Max.   :97602.0  \n (Other):63313   (Other):63137                                          \n     offset       dist        SCHOOL_COUNT  BUSINESS_COUNT  \n Min.   :1   Min.   :  750   Min.   :0.99   Min.   : 0.990  \n 1st Qu.:1   1st Qu.: 3000   1st Qu.:0.99   1st Qu.: 0.990  \n Median :1   Median : 5408   Median :0.99   Median : 1.000  \n Mean   :1   Mean   : 6342   Mean   :1.17   Mean   : 7.726  \n 3rd Qu.:1   3rd Qu.: 8842   3rd Qu.:1.00   3rd Qu.: 6.000  \n Max.   :1   Max.   :24784   Max.   :4.00   Max.   :97.000  \n                                                            \n          geometry    \n LINESTRING   :65030  \n epsg:3414    :    0  \n +proj=tmer...:    0  \n                      \n                      \n                      \n                      \n\n\nNotice that all the 0 values have been replaced by 0.99.\nBefore we move on to calibrate the Spatial Interaction Models, let us save flow_data sf tibble data.frame into an rds file. Call the file flow_data_tidy.\n\nwrite_rds(flow_data2,\n          \"data/rds/flow_data_tidy.rds\")"
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#task-2-spatial-interaction-modelling",
    "href": "Take-home_Ex2/Take-home_Ex2.html#task-2-spatial-interaction-modelling",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models - Case Study of Singapore public bus commuter flows",
    "section": "Task 2: Spatial Interaction Modelling",
    "text": "Task 2: Spatial Interaction Modelling\nWe will be using School and Business as attractiveness variables when calibrating origin constrained Spatial Interaction Model (SIM).\n\nflow_data_tidy &lt;- read_rds(\"data/rds/flow_data_tidy.rds\")\n\n\nglimpse(flow_data_tidy)\n\nRows: 65,030\nColumns: 9\n$ origin_grid_id      &lt;fct&gt; 23, 23, 23, 23, 23, 23, 44, 44, 44, 44, 44, 44, 44…\n$ destination_grid_id &lt;fct&gt; 67, 87, 128, 154, 175, 176, 23, 67, 86, 88, 128, 1…\n$ TRIPS               &lt;dbl&gt; 1, 1, 4, 3, 93, 1, 1, 2, 1, 2, 3, 1, 2, 40, 1, 1, …\n$ FlowNoIntra         &lt;dbl&gt; 1, 1, 4, 3, 93, 1, 1, 2, 1, 2, 3, 1, 2, 40, 1, 1, …\n$ offset              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ dist                &lt;dbl&gt; 2704.163, 2250.000, 1984.313, 6873.864, 7611.669, …\n$ SCHOOL_COUNT        &lt;dbl&gt; 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.…\n$ BUSINESS_COUNT      &lt;dbl&gt; 50.00, 3.00, 6.00, 42.00, 44.00, 0.99, 0.99, 50.00…\n$ geometry            &lt;LINESTRING [m]&gt; LINESTRING (3970.122 27781...., LINESTR…\n\n\nNotice that this sf tibble data.frame includes two additional fields namely: SCHOOL_COUNT and BUSINESS_COUNT. Both of them will be used as attractiveness variables when calibrating origin constrained SIM.\nWe have already excluded intra-zonal flows in earlier step, so we are ready to calibrate the Spatial Interaction Models now.\n\nCalibrating Spatial Interaction Models\nIn this section, we will focus on calibrating an origin constrained SIM and a doubly constrained by using flow_data_tidy prepared.\n\nOrigin- (Production-) constrained Model\nCode chunk below shows the calibration of the model by using glm() of R and flow_data.\n\norcSIM_Poisson &lt;- glm(formula = TRIPS ~ \n                origin_grid_id +\n                log(SCHOOL_COUNT) +\n                log(BUSINESS_COUNT) +\n                log(dist) - 1,\n              family = poisson(link = \"log\"),\n              data = flow_data_tidy,\n              na.action = na.exclude)\nsummary(orcSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ origin_grid_id + log(SCHOOL_COUNT) + log(BUSINESS_COUNT) + \n    log(dist) - 1, family = poisson(link = \"log\"), data = flow_data_tidy, \n    na.action = na.exclude)\n\nCoefficients:\n                      Estimate Std. Error  z value Pr(&gt;|z|)    \norigin_grid_id23    14.2050288  0.0985530   144.14   &lt;2e-16 ***\norigin_grid_id44    12.1573666  0.1386646    87.67   &lt;2e-16 ***\norigin_grid_id46    12.9227370  0.0873898   147.88   &lt;2e-16 ***\norigin_grid_id66    13.0225591  0.1250098   104.17   &lt;2e-16 ***\norigin_grid_id67    14.9592601  0.0248889   601.04   &lt;2e-16 ***\norigin_grid_id68    12.0914662  0.1291124    93.65   &lt;2e-16 ***\norigin_grid_id86    13.7216854  0.0735358   186.60   &lt;2e-16 ***\norigin_grid_id87    13.7754379  0.0811329   169.79   &lt;2e-16 ***\norigin_grid_id88    15.5228278  0.0185983   834.64   &lt;2e-16 ***\norigin_grid_id89    13.7578831  0.0496029   277.36   &lt;2e-16 ***\norigin_grid_id90    12.6699183  0.1324663    95.65   &lt;2e-16 ***\norigin_grid_id109   13.4059775  0.0990326   135.37   &lt;2e-16 ***\norigin_grid_id110   14.4163534  0.0716399   201.23   &lt;2e-16 ***\norigin_grid_id111   16.7131919  0.0114206  1463.42   &lt;2e-16 ***\norigin_grid_id112   12.7204805  0.0641780   198.21   &lt;2e-16 ***\norigin_grid_id128   15.9611292  0.0223258   714.92   &lt;2e-16 ***\norigin_grid_id129   13.1388058  0.1889930    69.52   &lt;2e-16 ***\norigin_grid_id130   13.2860619  0.0602189   220.63   &lt;2e-16 ***\norigin_grid_id131   14.0674017  0.0352945   398.57   &lt;2e-16 ***\norigin_grid_id132   13.6740199  0.0479838   284.97   &lt;2e-16 ***\norigin_grid_id133   13.6052486  0.0377360   360.54   &lt;2e-16 ***\norigin_grid_id134   15.8587019  0.0233078   680.40   &lt;2e-16 ***\norigin_grid_id150   16.2401639  0.0197748   821.26   &lt;2e-16 ***\norigin_grid_id151   13.9043851  0.0586523   237.06   &lt;2e-16 ***\norigin_grid_id152   13.3319631  0.0811315   164.32   &lt;2e-16 ***\norigin_grid_id153   13.8502337  0.0415635   333.23   &lt;2e-16 ***\norigin_grid_id154   16.5964163  0.0090004  1843.96   &lt;2e-16 ***\norigin_grid_id155   13.7016990  0.0328456   417.15   &lt;2e-16 ***\norigin_grid_id156   14.6875387  0.0385921   380.58   &lt;2e-16 ***\norigin_grid_id172   15.2465609  0.0758370   201.04   &lt;2e-16 ***\norigin_grid_id174   13.9230713  0.0463099   300.65   &lt;2e-16 ***\norigin_grid_id175   16.1604848  0.0101530  1591.69   &lt;2e-16 ***\norigin_grid_id176   17.3385262  0.0061387  2824.45   &lt;2e-16 ***\norigin_grid_id195   12.9228939  0.0808648   159.81   &lt;2e-16 ***\norigin_grid_id196   13.3662499  0.0419267   318.80   &lt;2e-16 ***\norigin_grid_id197   12.7299018  0.1097796   115.96   &lt;2e-16 ***\norigin_grid_id215   13.5468215  0.0825019   164.20   &lt;2e-16 ***\norigin_grid_id216   17.5619113  0.0052496  3345.41   &lt;2e-16 ***\norigin_grid_id217   14.9980608  0.0203979   735.27   &lt;2e-16 ***\norigin_grid_id237   12.4332349  0.1561848    79.61   &lt;2e-16 ***\norigin_grid_id238   13.5917176  0.0510659   266.16   &lt;2e-16 ***\norigin_grid_id239   12.8663606  0.1581261    81.37   &lt;2e-16 ***\norigin_grid_id257   13.4181533  0.0564642   237.64   &lt;2e-16 ***\norigin_grid_id258   14.3113671  0.0271107   527.89   &lt;2e-16 ***\norigin_grid_id259   14.1326537  0.0403026   350.66   &lt;2e-16 ***\norigin_grid_id278   14.5531845  0.0383326   379.66   &lt;2e-16 ***\norigin_grid_id279   13.4425933  0.0428365   313.81   &lt;2e-16 ***\norigin_grid_id280   13.8446530  0.0451691   306.51   &lt;2e-16 ***\norigin_grid_id298   11.2223487  0.3333382    33.67   &lt;2e-16 ***\norigin_grid_id299   13.4279785  0.0495204   271.16   &lt;2e-16 ***\norigin_grid_id300   16.4508076  0.0086809  1895.07   &lt;2e-16 ***\norigin_grid_id320   13.2371186  0.0636539   207.95   &lt;2e-16 ***\norigin_grid_id321   14.1282460  0.0710905   198.74   &lt;2e-16 ***\norigin_grid_id322   14.8733267  0.0467197   318.35   &lt;2e-16 ***\norigin_grid_id340   15.0458392  0.0272462   552.22   &lt;2e-16 ***\norigin_grid_id341   13.3225249  0.0441879   301.50   &lt;2e-16 ***\norigin_grid_id342   13.8536264  0.0411423   336.72   &lt;2e-16 ***\norigin_grid_id363   14.6857860  0.0369547   397.40   &lt;2e-16 ***\norigin_grid_id364   15.0309009  0.0264833   567.56   &lt;2e-16 ***\norigin_grid_id383   14.3419014  0.0311710   460.10   &lt;2e-16 ***\norigin_grid_id384   13.2716572  0.0520914   254.78   &lt;2e-16 ***\norigin_grid_id385   14.6008789  0.0460138   317.31   &lt;2e-16 ***\norigin_grid_id404   14.8949394  0.0339706   438.47   &lt;2e-16 ***\norigin_grid_id405   13.8537472  0.0485995   285.06   &lt;2e-16 ***\norigin_grid_id406   18.4541945  0.0030426  6065.24   &lt;2e-16 ***\norigin_grid_id407   14.9372533  0.0453518   329.36   &lt;2e-16 ***\norigin_grid_id408   15.5356052  0.0227382   683.24   &lt;2e-16 ***\norigin_grid_id425   12.7143932  0.0880632   144.38   &lt;2e-16 ***\norigin_grid_id426   14.5942568  0.0294705   495.22   &lt;2e-16 ***\norigin_grid_id427   13.8154256  0.0354064   390.20   &lt;2e-16 ***\norigin_grid_id428   13.9605669  0.0778713   179.28   &lt;2e-16 ***\norigin_grid_id429   15.6931032  0.0225899   694.70   &lt;2e-16 ***\norigin_grid_id446   14.2198400  0.0587459   242.06   &lt;2e-16 ***\norigin_grid_id447   13.6845629  0.0444939   307.56   &lt;2e-16 ***\norigin_grid_id448   14.6646805  0.0278334   526.87   &lt;2e-16 ***\norigin_grid_id449   17.6255606  0.0062017  2842.06   &lt;2e-16 ***\norigin_grid_id450   15.5072588  0.0195307   793.99   &lt;2e-16 ***\norigin_grid_id468   14.7340079  0.0276059   533.73   &lt;2e-16 ***\norigin_grid_id469   15.4211335  0.0175019   881.11   &lt;2e-16 ***\norigin_grid_id470   18.0167835  0.0046716  3856.67   &lt;2e-16 ***\norigin_grid_id471   16.2628304  0.0159886  1017.15   &lt;2e-16 ***\norigin_grid_id488   14.2155225  0.0573809   247.74   &lt;2e-16 ***\norigin_grid_id489   11.8432231  0.2500066    47.37   &lt;2e-16 ***\norigin_grid_id490   16.1974272  0.0114729  1411.80   &lt;2e-16 ***\norigin_grid_id491   16.9156183  0.0074369  2274.56   &lt;2e-16 ***\norigin_grid_id493   12.2784277  0.1386881    88.53   &lt;2e-16 ***\norigin_grid_id494   14.3445719  0.0588550   243.73   &lt;2e-16 ***\norigin_grid_id509   14.4050669  0.0336637   427.91   &lt;2e-16 ***\norigin_grid_id510   14.7877231  0.0246124   600.83   &lt;2e-16 ***\norigin_grid_id511   15.8674311  0.0106524  1489.57   &lt;2e-16 ***\norigin_grid_id512   18.4591879  0.0034560  5341.13   &lt;2e-16 ***\norigin_grid_id513   15.1369664  0.0239755   631.35   &lt;2e-16 ***\norigin_grid_id514   14.6958215  0.0367580   399.80   &lt;2e-16 ***\norigin_grid_id515   12.5283216  0.1373738    91.20   &lt;2e-16 ***\norigin_grid_id530   13.5312340  0.0808381   167.39   &lt;2e-16 ***\norigin_grid_id531   14.7815312  0.0201000   735.40   &lt;2e-16 ***\norigin_grid_id532   14.4598706  0.0229700   629.51   &lt;2e-16 ***\norigin_grid_id533   18.2516732  0.0035084  5202.34   &lt;2e-16 ***\norigin_grid_id534   18.6523238  0.0037986  4910.27   &lt;2e-16 ***\norigin_grid_id536   14.9817085  0.0250327   598.49   &lt;2e-16 ***\norigin_grid_id537   12.7555295  0.1373748    92.85   &lt;2e-16 ***\norigin_grid_id538   12.7154361  0.2041338    62.29   &lt;2e-16 ***\norigin_grid_id539   10.1667052  0.5773530    17.61   &lt;2e-16 ***\norigin_grid_id551   13.5280097  0.0538895   251.03   &lt;2e-16 ***\norigin_grid_id552   15.7791751  0.0364603   432.78   &lt;2e-16 ***\norigin_grid_id553   14.8908895  0.0189367   786.35   &lt;2e-16 ***\norigin_grid_id554   18.3140373  0.0037577  4873.73   &lt;2e-16 ***\norigin_grid_id555   17.6119842  0.0068257  2580.23   &lt;2e-16 ***\norigin_grid_id559   13.3120407  0.0932699   142.73   &lt;2e-16 ***\norigin_grid_id560   15.2925124  0.0473435   323.01   &lt;2e-16 ***\norigin_grid_id572   11.3538221  0.2236139    50.77   &lt;2e-16 ***\norigin_grid_id573   13.7890993  0.0435112   316.91   &lt;2e-16 ***\norigin_grid_id574   14.9668323  0.0360861   414.75   &lt;2e-16 ***\norigin_grid_id575   18.9370718  0.0025627  7389.53   &lt;2e-16 ***\norigin_grid_id576   17.8137316  0.0049234  3618.21   &lt;2e-16 ***\norigin_grid_id578   12.8452385  0.1072269   119.80   &lt;2e-16 ***\norigin_grid_id582   12.8997630  0.1066156   120.99   &lt;2e-16 ***\norigin_grid_id583   12.0398372  0.1961247    61.39   &lt;2e-16 ***\norigin_grid_id584   15.4755782  0.0550904   280.91   &lt;2e-16 ***\norigin_grid_id593   14.1989827  0.0494843   286.94   &lt;2e-16 ***\norigin_grid_id594   14.8699774  0.0258501   575.24   &lt;2e-16 ***\norigin_grid_id595   14.5341009  0.0197676   735.25   &lt;2e-16 ***\norigin_grid_id596   17.6954358  0.0043901  4030.78   &lt;2e-16 ***\norigin_grid_id597   14.2834155  0.0588532   242.70   &lt;2e-16 ***\norigin_grid_id603   13.2528863  0.1084815   122.17   &lt;2e-16 ***\norigin_grid_id604   11.4146411  0.2672675    42.71   &lt;2e-16 ***\norigin_grid_id615   13.4166983  0.0438911   305.68   &lt;2e-16 ***\norigin_grid_id616   14.4548259  0.0290101   498.27   &lt;2e-16 ***\norigin_grid_id617   15.2820419  0.0173713   879.73   &lt;2e-16 ***\norigin_grid_id618   18.1305219  0.0038955  4654.23   &lt;2e-16 ***\norigin_grid_id620   14.8080007  0.0323690   457.47   &lt;2e-16 ***\norigin_grid_id637   13.9017424  0.0392046   354.60   &lt;2e-16 ***\norigin_grid_id638   17.7380531  0.0042353  4188.13   &lt;2e-16 ***\norigin_grid_id657   15.3925758  0.0161472   953.26   &lt;2e-16 ***\norigin_grid_id658   16.8204724  0.0063759  2638.14   &lt;2e-16 ***\norigin_grid_id659   17.3593097  0.0054279  3198.17   &lt;2e-16 ***\norigin_grid_id660   18.3650987  0.0034346  5347.14   &lt;2e-16 ***\norigin_grid_id662   17.6616459  0.0071465  2471.39   &lt;2e-16 ***\norigin_grid_id677   15.4720518  0.0223882   691.08   &lt;2e-16 ***\norigin_grid_id678   13.4003798  0.0436008   307.34   &lt;2e-16 ***\norigin_grid_id679   18.0334756  0.0037130  4856.88   &lt;2e-16 ***\norigin_grid_id680   18.1716768  0.0036771  4941.82   &lt;2e-16 ***\norigin_grid_id681   17.4516641  0.0083848  2081.34   &lt;2e-16 ***\norigin_grid_id699   14.9717870  0.0220063   680.34   &lt;2e-16 ***\norigin_grid_id700   17.0267500  0.0061086  2787.35   &lt;2e-16 ***\norigin_grid_id701   17.3438978  0.0061650  2813.30   &lt;2e-16 ***\norigin_grid_id702   18.1724701  0.0036338  5001.01   &lt;2e-16 ***\norigin_grid_id704   14.7633849  0.0319198   462.51   &lt;2e-16 ***\norigin_grid_id722   15.4206854  0.0178705   862.91   &lt;2e-16 ***\norigin_grid_id725   14.1833831  0.0435606   325.60   &lt;2e-16 ***\norigin_grid_id741   15.4740218  0.0162984   949.42   &lt;2e-16 ***\norigin_grid_id743   15.7167732  0.0123013  1277.66   &lt;2e-16 ***\norigin_grid_id744   17.6984433  0.0045708  3872.09   &lt;2e-16 ***\norigin_grid_id761   14.9683703  0.0271102   552.13   &lt;2e-16 ***\norigin_grid_id762   17.0680806  0.0070173  2432.29   &lt;2e-16 ***\norigin_grid_id763   14.2486152  0.0275915   516.41   &lt;2e-16 ***\norigin_grid_id764   17.9825798  0.0035853  5015.70   &lt;2e-16 ***\norigin_grid_id765   17.1383500  0.0081475  2103.51   &lt;2e-16 ***\norigin_grid_id767   18.6406863  0.0038086  4894.38   &lt;2e-16 ***\norigin_grid_id772   13.3228770  0.0720070   185.02   &lt;2e-16 ***\norigin_grid_id784   14.4216203  0.0234579   614.79   &lt;2e-16 ***\norigin_grid_id785   17.2830696  0.0044637  3871.90   &lt;2e-16 ***\norigin_grid_id786   16.8984160  0.0060433  2796.24   &lt;2e-16 ***\norigin_grid_id787   17.4395840  0.0071984  2422.71   &lt;2e-16 ***\norigin_grid_id788   18.1344265  0.0052837  3432.17   &lt;2e-16 ***\norigin_grid_id789   16.9574313  0.0103954  1631.24   &lt;2e-16 ***\norigin_grid_id803   13.5955635  0.0487722   278.76   &lt;2e-16 ***\norigin_grid_id804   18.0005523  0.0042286  4256.85   &lt;2e-16 ***\norigin_grid_id805   17.8107569  0.0035908  4960.07   &lt;2e-16 ***\norigin_grid_id806   17.5640953  0.0044155  3977.83   &lt;2e-16 ***\norigin_grid_id807   18.3251416  0.0042990  4262.68   &lt;2e-16 ***\norigin_grid_id808   16.6255690  0.0108691  1529.62   &lt;2e-16 ***\norigin_grid_id809   18.2812853  0.0036395  5023.03   &lt;2e-16 ***\norigin_grid_id810   18.0976719  0.0055441  3264.29   &lt;2e-16 ***\norigin_grid_id814   14.8419219  0.0275030   539.65   &lt;2e-16 ***\norigin_grid_id819   19.7737078  0.0173173  1141.85   &lt;2e-16 ***\norigin_grid_id824   14.1382143  0.0383361   368.80   &lt;2e-16 ***\norigin_grid_id826   15.7134336  0.0100010  1571.18   &lt;2e-16 ***\norigin_grid_id827   17.8106804  0.0039540  4504.48   &lt;2e-16 ***\norigin_grid_id828   17.8166128  0.0038479  4630.20   &lt;2e-16 ***\norigin_grid_id829   17.9918417  0.0046010  3910.40   &lt;2e-16 ***\norigin_grid_id830   18.0165933  0.0051327  3510.16   &lt;2e-16 ***\norigin_grid_id831   18.5394906  0.0031386  5906.85   &lt;2e-16 ***\norigin_grid_id832   17.9281260  0.0060359  2970.23   &lt;2e-16 ***\norigin_grid_id835   14.5322572  0.0292550   496.74   &lt;2e-16 ***\norigin_grid_id844   12.9414506  0.0778722   166.19   &lt;2e-16 ***\norigin_grid_id846   17.1837128  0.0052783  3255.54   &lt;2e-16 ***\norigin_grid_id847   16.2601499  0.0089120  1824.53   &lt;2e-16 ***\norigin_grid_id848   17.3828641  0.0048534  3581.59   &lt;2e-16 ***\norigin_grid_id849   16.5502480  0.0077939  2123.49   &lt;2e-16 ***\norigin_grid_id850   17.3525294  0.0054405  3189.48   &lt;2e-16 ***\norigin_grid_id851   17.8233879  0.0042592  4184.64   &lt;2e-16 ***\norigin_grid_id852   17.5963485  0.0060107  2927.52   &lt;2e-16 ***\norigin_grid_id853   19.5443060  0.0037139  5262.44   &lt;2e-16 ***\norigin_grid_id854   15.0323491  0.0258433   581.67   &lt;2e-16 ***\norigin_grid_id855   13.9812017  0.0434356   321.88   &lt;2e-16 ***\norigin_grid_id856   15.5251099  0.0179455   865.12   &lt;2e-16 ***\norigin_grid_id866   14.5763722  0.0317889   458.54   &lt;2e-16 ***\norigin_grid_id867   15.9789525  0.0118173  1352.16   &lt;2e-16 ***\norigin_grid_id868   15.2585815  0.0176398   865.01   &lt;2e-16 ***\norigin_grid_id869   17.8703390  0.0058165  3072.35   &lt;2e-16 ***\norigin_grid_id870   18.2293491  0.0031735  5744.16   &lt;2e-16 ***\norigin_grid_id871   17.7934834  0.0057989  3068.43   &lt;2e-16 ***\norigin_grid_id872   16.0929054  0.0108162  1487.85   &lt;2e-16 ***\norigin_grid_id873   16.5731681  0.0100264  1652.95   &lt;2e-16 ***\norigin_grid_id874   16.5289483  0.0080447  2054.65   &lt;2e-16 ***\norigin_grid_id875   13.0847009  0.0720054   181.72   &lt;2e-16 ***\norigin_grid_id876   14.2622746  0.0314719   453.17   &lt;2e-16 ***\norigin_grid_id877   13.6535151  0.0400389   341.01   &lt;2e-16 ***\norigin_grid_id887   15.5356048  0.0133434  1164.29   &lt;2e-16 ***\norigin_grid_id888   17.0301416  0.0068638  2481.14   &lt;2e-16 ***\norigin_grid_id889   13.9457913  0.0338566   411.91   &lt;2e-16 ***\norigin_grid_id890   17.9123008  0.0038039  4708.90   &lt;2e-16 ***\norigin_grid_id891   17.1527806  0.0111349  1540.45   &lt;2e-16 ***\norigin_grid_id893   17.8546141  0.0040507  4407.74   &lt;2e-16 ***\norigin_grid_id894   15.9831816  0.0108557  1472.33   &lt;2e-16 ***\norigin_grid_id895   15.4456132  0.0151118  1022.09   &lt;2e-16 ***\norigin_grid_id896   15.0148594  0.0253073   593.30   &lt;2e-16 ***\norigin_grid_id897   13.1256834  0.0639142   205.36   &lt;2e-16 ***\norigin_grid_id898   14.8256693  0.0290601   510.17   &lt;2e-16 ***\norigin_grid_id908   16.6481613  0.0118540  1404.43   &lt;2e-16 ***\norigin_grid_id909   17.0634419  0.0056532  3018.35   &lt;2e-16 ***\norigin_grid_id910   15.0042714  0.0171386   875.47   &lt;2e-16 ***\norigin_grid_id911   16.2913373  0.0085831  1898.07   &lt;2e-16 ***\norigin_grid_id912   17.5561842  0.0043519  4034.11   &lt;2e-16 ***\norigin_grid_id915   17.8761797  0.0043479  4111.46   &lt;2e-16 ***\norigin_grid_id917   17.0246012  0.0072314  2354.25   &lt;2e-16 ***\norigin_grid_id918   14.0193197  0.0361110   388.23   &lt;2e-16 ***\norigin_grid_id919   16.4615872  0.0088931  1851.06   &lt;2e-16 ***\norigin_grid_id928   16.0618165  0.0132993  1207.72   &lt;2e-16 ***\norigin_grid_id929   17.4711992  0.0045611  3830.46   &lt;2e-16 ***\norigin_grid_id930   18.1366091  0.0032090  5651.85   &lt;2e-16 ***\norigin_grid_id931   15.1355697  0.0165322   915.52   &lt;2e-16 ***\norigin_grid_id932   15.6507282  0.0173616   901.46   &lt;2e-16 ***\norigin_grid_id933   17.3833211  0.0055408  3137.32   &lt;2e-16 ***\norigin_grid_id934   15.0367540  0.0171167   878.48   &lt;2e-16 ***\norigin_grid_id935   18.3860939  0.0032082  5730.98   &lt;2e-16 ***\norigin_grid_id938   11.7588442  0.2132084    55.15   &lt;2e-16 ***\norigin_grid_id939   18.3138784  0.0037710  4856.52   &lt;2e-16 ***\norigin_grid_id940   13.5253777  0.0603292   224.19   &lt;2e-16 ***\norigin_grid_id949   15.8085390  0.0125482  1259.82   &lt;2e-16 ***\norigin_grid_id950   17.7958759  0.0048150  3695.94   &lt;2e-16 ***\norigin_grid_id951   18.5316411  0.0028773  6440.61   &lt;2e-16 ***\norigin_grid_id952   15.7215740  0.0208439   754.25   &lt;2e-16 ***\norigin_grid_id953   16.4427895  0.0092816  1771.55   &lt;2e-16 ***\norigin_grid_id954   15.0021804  0.0165352   907.29   &lt;2e-16 ***\norigin_grid_id955   17.1104155  0.0055864  3062.87   &lt;2e-16 ***\norigin_grid_id956   15.8106225  0.0112940  1399.92   &lt;2e-16 ***\norigin_grid_id957   18.0003878  0.0054776  3286.16   &lt;2e-16 ***\norigin_grid_id959   14.1835421  0.0483704   293.23   &lt;2e-16 ***\norigin_grid_id961   14.4260232  0.0297543   484.84   &lt;2e-16 ***\norigin_grid_id962   21.1111401  0.0041899  5038.58   &lt;2e-16 ***\norigin_grid_id970   16.3917320  0.0078476  2088.76   &lt;2e-16 ***\norigin_grid_id971   17.6421410  0.0038603  4570.12   &lt;2e-16 ***\norigin_grid_id972   17.4704274  0.0047223  3699.56   &lt;2e-16 ***\norigin_grid_id974   16.8200730  0.0072364  2324.36   &lt;2e-16 ***\norigin_grid_id975   16.3027381  0.0087523  1862.68   &lt;2e-16 ***\norigin_grid_id976   14.9542811  0.0166447   898.44   &lt;2e-16 ***\norigin_grid_id977   18.1769146  0.0037519  4844.71   &lt;2e-16 ***\norigin_grid_id978   17.9263104  0.0067912  2639.64   &lt;2e-16 ***\norigin_grid_id982   15.5648268  0.0142299  1093.81   &lt;2e-16 ***\norigin_grid_id983   19.6535704  0.0036623  5366.45   &lt;2e-16 ***\norigin_grid_id984   20.4262923  0.0037194  5491.78   &lt;2e-16 ***\norigin_grid_id991   16.3106310  0.0087372  1866.80   &lt;2e-16 ***\norigin_grid_id992   16.7440161  0.0067647  2475.19   &lt;2e-16 ***\norigin_grid_id993   16.4226881  0.0072997  2249.78   &lt;2e-16 ***\norigin_grid_id994   15.8244874  0.0107856  1467.19   &lt;2e-16 ***\norigin_grid_id995   17.1649895  0.0054952  3123.64   &lt;2e-16 ***\norigin_grid_id996   16.7319388  0.0074257  2253.24   &lt;2e-16 ***\norigin_grid_id997   15.2223751  0.0290669   523.70   &lt;2e-16 ***\norigin_grid_id998   18.1370079  0.0039104  4638.13   &lt;2e-16 ***\norigin_grid_id999   18.2265056  0.0052910  3444.80   &lt;2e-16 ***\norigin_grid_id1001  15.2180228  0.0243420   625.18   &lt;2e-16 ***\norigin_grid_id1003  17.8600226  0.0042140  4238.29   &lt;2e-16 ***\norigin_grid_id1004  18.9038435  0.0031222  6054.58   &lt;2e-16 ***\norigin_grid_id1011  14.6490070  0.0300913   486.82   &lt;2e-16 ***\norigin_grid_id1012  14.4994002  0.0317747   456.32   &lt;2e-16 ***\norigin_grid_id1013  15.2472002  0.0158015   964.92   &lt;2e-16 ***\norigin_grid_id1014  15.8516127  0.0105777  1498.59   &lt;2e-16 ***\norigin_grid_id1015  15.0805866  0.0158351   952.35   &lt;2e-16 ***\norigin_grid_id1016  16.6724255  0.0071046  2346.69   &lt;2e-16 ***\norigin_grid_id1018  17.1381041  0.0096650  1773.20   &lt;2e-16 ***\norigin_grid_id1019  18.5898550  0.0045676  4069.91   &lt;2e-16 ***\norigin_grid_id1023  17.2788376  0.0091689  1884.50   &lt;2e-16 ***\norigin_grid_id1024  18.2061808  0.0043122  4221.99   &lt;2e-16 ***\norigin_grid_id1025  13.7290711  0.0491228   279.49   &lt;2e-16 ***\norigin_grid_id1033  15.9529823  0.0110455  1444.29   &lt;2e-16 ***\norigin_grid_id1034  16.6821714  0.0070994  2349.81   &lt;2e-16 ***\norigin_grid_id1035  17.2130463  0.0053799  3199.50   &lt;2e-16 ***\norigin_grid_id1036  15.2830468  0.0138259  1105.39   &lt;2e-16 ***\norigin_grid_id1037  16.4811462  0.0069552  2369.61   &lt;2e-16 ***\norigin_grid_id1043  15.1535464  0.0246489   614.78   &lt;2e-16 ***\norigin_grid_id1045  17.7846453  0.0044358  4009.38   &lt;2e-16 ***\norigin_grid_id1046  17.7519394  0.0048982  3624.20   &lt;2e-16 ***\norigin_grid_id1053  17.1797248  0.0056826  3023.21   &lt;2e-16 ***\norigin_grid_id1054  16.4379539  0.0077069  2132.90   &lt;2e-16 ***\norigin_grid_id1055  17.3873574  0.0051740  3360.54   &lt;2e-16 ***\norigin_grid_id1056  16.1516143  0.0091155  1771.88   &lt;2e-16 ***\norigin_grid_id1064  12.3173010  0.2500089    49.27   &lt;2e-16 ***\norigin_grid_id1066  17.8336153  0.0049048  3635.99   &lt;2e-16 ***\norigin_grid_id1067  17.6755300  0.0064845  2725.82   &lt;2e-16 ***\norigin_grid_id1074  16.6840741  0.0074975  2225.28   &lt;2e-16 ***\norigin_grid_id1075  16.0743857  0.0099771  1611.12   &lt;2e-16 ***\norigin_grid_id1076  16.0852664  0.0085701  1876.90   &lt;2e-16 ***\norigin_grid_id1077  16.1452126  0.0100309  1609.55   &lt;2e-16 ***\norigin_grid_id1079  17.4175828  0.0050955  3418.20   &lt;2e-16 ***\norigin_grid_id1085  12.5983595  0.1414325    89.08   &lt;2e-16 ***\norigin_grid_id1087  17.8154386  0.0057124  3118.70   &lt;2e-16 ***\norigin_grid_id1088  16.1947082  0.0117460  1378.74   &lt;2e-16 ***\norigin_grid_id1094  14.4756511  0.0435241   332.59   &lt;2e-16 ***\norigin_grid_id1095  14.5237885  0.0327715   443.18   &lt;2e-16 ***\norigin_grid_id1096  15.7667567  0.0202033   780.41   &lt;2e-16 ***\norigin_grid_id1097  17.7742699  0.0038385  4630.49   &lt;2e-16 ***\norigin_grid_id1098  15.1580646  0.0179391   844.97   &lt;2e-16 ***\norigin_grid_id1099  16.7169510  0.0067710  2468.90   &lt;2e-16 ***\norigin_grid_id1105  14.1526980  0.0612327   231.13   &lt;2e-16 ***\norigin_grid_id1106  13.1276615  0.0916899   143.18   &lt;2e-16 ***\norigin_grid_id1107  15.6202820  0.0273758   570.59   &lt;2e-16 ***\norigin_grid_id1108  19.0928166  0.0026543  7193.27   &lt;2e-16 ***\norigin_grid_id1109  16.8643108  0.0100996  1669.80   &lt;2e-16 ***\norigin_grid_id1116  16.3951762  0.0083865  1954.95   &lt;2e-16 ***\norigin_grid_id1117  14.9544500  0.0173570   861.58   &lt;2e-16 ***\norigin_grid_id1118  14.9998749  0.0190036   789.32   &lt;2e-16 ***\norigin_grid_id1119  16.0556756  0.0096453  1664.61   &lt;2e-16 ***\norigin_grid_id1120  15.7929337  0.0130378  1211.32   &lt;2e-16 ***\norigin_grid_id1129  18.1825643  0.0046400  3918.61   &lt;2e-16 ***\norigin_grid_id1130  18.2364918  0.0039440  4623.87   &lt;2e-16 ***\norigin_grid_id1131  16.8306429  0.0099954  1683.83   &lt;2e-16 ***\norigin_grid_id1136  15.2239392  0.0152137  1000.67   &lt;2e-16 ***\norigin_grid_id1138  14.2565681  0.0284804   500.57   &lt;2e-16 ***\norigin_grid_id1139  17.0149391  0.0052240  3257.04   &lt;2e-16 ***\norigin_grid_id1141  16.8400358  0.0063167  2665.95   &lt;2e-16 ***\norigin_grid_id1148  14.3334433  0.0516117   277.72   &lt;2e-16 ***\norigin_grid_id1149  16.0171444  0.0171454   934.19   &lt;2e-16 ***\norigin_grid_id1150  18.3844299  0.0036241  5072.80   &lt;2e-16 ***\norigin_grid_id1151  17.1479262  0.0063871  2684.77   &lt;2e-16 ***\norigin_grid_id1158  15.6424420  0.0110066  1421.18   &lt;2e-16 ***\norigin_grid_id1159  16.8534117  0.0057720  2919.87   &lt;2e-16 ***\norigin_grid_id1160  17.6860390  0.0039333  4496.46   &lt;2e-16 ***\norigin_grid_id1171  18.5941251  0.0038811  4790.89   &lt;2e-16 ***\norigin_grid_id1172  18.2788820  0.0037538  4869.40   &lt;2e-16 ***\norigin_grid_id1173  15.7736376  0.0123009  1282.32   &lt;2e-16 ***\norigin_grid_id1174  11.7071476  0.2672672    43.80   &lt;2e-16 ***\norigin_grid_id1178  15.7002072  0.0103345  1519.20   &lt;2e-16 ***\norigin_grid_id1179  16.4149721  0.0068894  2382.66   &lt;2e-16 ***\norigin_grid_id1180  17.3532339  0.0044731  3879.45   &lt;2e-16 ***\norigin_grid_id1181  16.5870716  0.0066237  2504.20   &lt;2e-16 ***\norigin_grid_id1183  15.6787933  0.0116846  1341.83   &lt;2e-16 ***\norigin_grid_id1190  14.4859463  0.0478767   302.57   &lt;2e-16 ***\norigin_grid_id1192  17.5207424  0.0061387  2854.15   &lt;2e-16 ***\norigin_grid_id1193  17.3967766  0.0051838  3355.96   &lt;2e-16 ***\norigin_grid_id1194  15.5874884  0.0138278  1127.26   &lt;2e-16 ***\norigin_grid_id1200  16.7428171  0.0066895  2502.86   &lt;2e-16 ***\norigin_grid_id1201  16.4090452  0.0071419  2297.56   &lt;2e-16 ***\norigin_grid_id1203  16.9478332  0.0060182  2816.09   &lt;2e-16 ***\norigin_grid_id1204  16.6419084  0.0069155  2406.47   &lt;2e-16 ***\norigin_grid_id1211  14.0928443  0.0891103   158.15   &lt;2e-16 ***\norigin_grid_id1214  18.0894485  0.0041250  4385.32   &lt;2e-16 ***\norigin_grid_id1215  14.7693059  0.0396657   372.34   &lt;2e-16 ***\norigin_grid_id1216  13.9246598  0.0403335   345.24   &lt;2e-16 ***\norigin_grid_id1220  17.5617659  0.0042892  4094.42   &lt;2e-16 ***\norigin_grid_id1221  17.2068687  0.0047036  3658.25   &lt;2e-16 ***\norigin_grid_id1222  16.9962649  0.0096686  1757.88   &lt;2e-16 ***\norigin_grid_id1223  15.0275597  0.0166873   900.54   &lt;2e-16 ***\norigin_grid_id1224  15.7414375  0.0106482  1478.31   &lt;2e-16 ***\norigin_grid_id1231  11.9345210  0.1889916    63.15   &lt;2e-16 ***\norigin_grid_id1232  13.4684517  0.1118219   120.45   &lt;2e-16 ***\norigin_grid_id1235  15.4766993  0.0136691  1132.24   &lt;2e-16 ***\norigin_grid_id1236  15.6830070  0.0135902  1153.99   &lt;2e-16 ***\norigin_grid_id1241  15.9255689  0.0100620  1582.75   &lt;2e-16 ***\norigin_grid_id1242  16.6022274  0.0068451  2425.43   &lt;2e-16 ***\norigin_grid_id1243  17.1098376  0.0050186  3409.27   &lt;2e-16 ***\norigin_grid_id1246  15.8947599  0.0092011  1727.48   &lt;2e-16 ***\norigin_grid_id1256  16.9847229  0.0073574  2308.51   &lt;2e-16 ***\norigin_grid_id1257  17.6913647  0.0051437  3439.42   &lt;2e-16 ***\norigin_grid_id1258  15.6609139  0.0143765  1089.34   &lt;2e-16 ***\norigin_grid_id1262  16.3479535  0.0082441  1983.00   &lt;2e-16 ***\norigin_grid_id1263  16.7881700  0.0053799  3120.52   &lt;2e-16 ***\norigin_grid_id1264  15.8519930  0.0117642  1347.47   &lt;2e-16 ***\norigin_grid_id1265  15.4299665  0.0139390  1106.97   &lt;2e-16 ***\norigin_grid_id1266  16.6169969  0.0078065  2128.61   &lt;2e-16 ***\norigin_grid_id1267  14.4433944  0.0268227   538.48   &lt;2e-16 ***\norigin_grid_id1272  12.1915509  0.1154855   105.57   &lt;2e-16 ***\norigin_grid_id1273  16.0614153  0.0119127  1348.26   &lt;2e-16 ***\norigin_grid_id1277  17.8221910  0.0041146  4331.43   &lt;2e-16 ***\norigin_grid_id1278  15.3691788  0.0136983  1121.98   &lt;2e-16 ***\norigin_grid_id1283  17.8248624  0.0040489  4402.44   &lt;2e-16 ***\norigin_grid_id1284  17.2572021  0.0049078  3516.25   &lt;2e-16 ***\norigin_grid_id1285  17.8713959  0.0036391  4910.98   &lt;2e-16 ***\norigin_grid_id1286  16.0965655  0.0100837  1596.29   &lt;2e-16 ***\norigin_grid_id1289  13.8076769  0.0461717   299.05   &lt;2e-16 ***\norigin_grid_id1293  12.7586423  0.0891082   143.18   &lt;2e-16 ***\norigin_grid_id1294  17.5491141  0.0060573  2897.17   &lt;2e-16 ***\norigin_grid_id1295  15.2080510  0.0205862   738.75   &lt;2e-16 ***\norigin_grid_id1298  16.9923236  0.0068349  2486.09   &lt;2e-16 ***\norigin_grid_id1299  17.5539929  0.0061155  2870.39   &lt;2e-16 ***\norigin_grid_id1304  17.8832137  0.0040108  4458.71   &lt;2e-16 ***\norigin_grid_id1305  17.2629460  0.0043606  3958.88   &lt;2e-16 ***\norigin_grid_id1307  13.9288408  0.0375789   370.66   &lt;2e-16 ***\norigin_grid_id1308  16.7347547  0.0062695  2669.24   &lt;2e-16 ***\norigin_grid_id1310  12.2413512  0.1348540    90.78   &lt;2e-16 ***\norigin_grid_id1316  14.1287302  0.0331348   426.40   &lt;2e-16 ***\norigin_grid_id1317  16.0494489  0.0112300  1429.16   &lt;2e-16 ***\norigin_grid_id1318  15.4503041  0.0152764  1011.39   &lt;2e-16 ***\norigin_grid_id1319  18.0014594  0.0039626  4542.83   &lt;2e-16 ***\norigin_grid_id1320  16.6646178  0.0088754  1877.62   &lt;2e-16 ***\norigin_grid_id1325  15.5865280  0.0122929  1267.93   &lt;2e-16 ***\norigin_grid_id1326  17.4668654  0.0042967  4065.22   &lt;2e-16 ***\norigin_grid_id1327  17.3085394  0.0046797  3698.67   &lt;2e-16 ***\norigin_grid_id1328  15.9002544  0.0094539  1681.88   &lt;2e-16 ***\norigin_grid_id1329  16.1023940  0.0116014  1387.97   &lt;2e-16 ***\norigin_grid_id1330  16.7144305  0.0081390  2053.62   &lt;2e-16 ***\norigin_grid_id1331  11.6524608  0.3015177    38.65   &lt;2e-16 ***\norigin_grid_id1333  15.8270530  0.0121792  1299.52   &lt;2e-16 ***\norigin_grid_id1334  16.0342887  0.0112303  1427.77   &lt;2e-16 ***\norigin_grid_id1335  15.4626274  0.0164845   938.01   &lt;2e-16 ***\norigin_grid_id1336  12.9054884  0.1072294   120.35   &lt;2e-16 ***\norigin_grid_id1337  13.5170447  0.0487213   277.44   &lt;2e-16 ***\norigin_grid_id1338  12.5497270  0.0814005   154.17   &lt;2e-16 ***\norigin_grid_id1339  18.0746843  0.0038440  4702.10   &lt;2e-16 ***\norigin_grid_id1340  16.5489254  0.0088813  1863.34   &lt;2e-16 ***\norigin_grid_id1341  12.5906153  0.7071104    17.81   &lt;2e-16 ***\norigin_grid_id1346  17.0840406  0.0062410  2737.38   &lt;2e-16 ***\norigin_grid_id1347  18.0084482  0.0036324  4957.75   &lt;2e-16 ***\norigin_grid_id1348  16.5007249  0.0063411  2602.20   &lt;2e-16 ***\norigin_grid_id1349  16.2873213  0.0081551  1997.18   &lt;2e-16 ***\norigin_grid_id1350  16.3557376  0.0111006  1473.42   &lt;2e-16 ***\norigin_grid_id1353  15.8995164  0.0098381  1616.11   &lt;2e-16 ***\norigin_grid_id1354  15.6924142  0.0120710  1300.01   &lt;2e-16 ***\norigin_grid_id1355  16.4333863  0.0083915  1958.34   &lt;2e-16 ***\norigin_grid_id1357  15.3934776  0.0187092   822.78   &lt;2e-16 ***\norigin_grid_id1358  16.8725672  0.0072879  2315.15   &lt;2e-16 ***\norigin_grid_id1359  17.3752552  0.0052441  3313.30   &lt;2e-16 ***\norigin_grid_id1360  17.4150610  0.0053823  3235.64   &lt;2e-16 ***\norigin_grid_id1361  18.3316748  0.0040837  4489.00   &lt;2e-16 ***\norigin_grid_id1362  14.0020476  0.0451692   309.99   &lt;2e-16 ***\norigin_grid_id1368  16.0270622  0.0084811  1889.75   &lt;2e-16 ***\norigin_grid_id1369  15.8544463  0.0086760  1827.39   &lt;2e-16 ***\norigin_grid_id1370  16.8394854  0.0051746  3254.27   &lt;2e-16 ***\norigin_grid_id1371  16.1452522  0.0098956  1631.56   &lt;2e-16 ***\norigin_grid_id1372  15.3912359  0.0131220  1172.94   &lt;2e-16 ***\norigin_grid_id1373  13.4815188  0.0466189   289.19   &lt;2e-16 ***\norigin_grid_id1374  15.3640459  0.0122605  1253.13   &lt;2e-16 ***\norigin_grid_id1375  17.0395492  0.0076860  2216.96   &lt;2e-16 ***\norigin_grid_id1376  16.3205093  0.0122963  1327.27   &lt;2e-16 ***\norigin_grid_id1379  14.5199297  0.0344133   421.93   &lt;2e-16 ***\norigin_grid_id1380  18.2561406  0.0033065  5521.35   &lt;2e-16 ***\norigin_grid_id1381  17.9263156  0.0038642  4639.06   &lt;2e-16 ***\norigin_grid_id1382  17.4296989  0.0063140  2760.48   &lt;2e-16 ***\norigin_grid_id1383  14.8116797  0.0240183   616.68   &lt;2e-16 ***\norigin_grid_id1388  16.5062151  0.0066219  2492.66   &lt;2e-16 ***\norigin_grid_id1389  15.7863431  0.0089103  1771.70   &lt;2e-16 ***\norigin_grid_id1390  16.4572615  0.0067741  2429.44   &lt;2e-16 ***\norigin_grid_id1391  16.3038828  0.0083650  1949.06   &lt;2e-16 ***\norigin_grid_id1392  16.0494893  0.0157892  1016.49   &lt;2e-16 ***\norigin_grid_id1393  15.0454556  0.0150265  1001.26   &lt;2e-16 ***\norigin_grid_id1394  16.0860162  0.0076515  2102.34   &lt;2e-16 ***\norigin_grid_id1395  16.2458043  0.0074778  2172.53   &lt;2e-16 ***\norigin_grid_id1396  17.2613034  0.0051564  3347.58   &lt;2e-16 ***\norigin_grid_id1397  17.3336239  0.0052760  3285.40   &lt;2e-16 ***\norigin_grid_id1398  16.3093512  0.0109154  1494.16   &lt;2e-16 ***\norigin_grid_id1400  17.5540548  0.0064951  2702.66   &lt;2e-16 ***\norigin_grid_id1401  17.6686257  0.0040907  4319.23   &lt;2e-16 ***\norigin_grid_id1402  17.8280247  0.0044201  4033.37   &lt;2e-16 ***\norigin_grid_id1404  17.3515991  0.0149159  1163.29   &lt;2e-16 ***\norigin_grid_id1410  17.1359389  0.0045971  3727.58   &lt;2e-16 ***\norigin_grid_id1411  16.1277774  0.0080382  2006.38   &lt;2e-16 ***\norigin_grid_id1412  16.3318558  0.0063950  2553.86   &lt;2e-16 ***\norigin_grid_id1413  17.2035982  0.0049421  3481.02   &lt;2e-16 ***\norigin_grid_id1414  16.4414577  0.0064676  2542.11   &lt;2e-16 ***\norigin_grid_id1415  15.8989255  0.0092671  1715.64   &lt;2e-16 ***\norigin_grid_id1416  16.5113474  0.0071171  2319.97   &lt;2e-16 ***\norigin_grid_id1417  16.5895227  0.0065132  2547.08   &lt;2e-16 ***\norigin_grid_id1418  17.3413957  0.0049305  3517.14   &lt;2e-16 ***\norigin_grid_id1419  16.7931525  0.0065969  2545.59   &lt;2e-16 ***\norigin_grid_id1422  17.7771328  0.0049987  3556.36   &lt;2e-16 ***\norigin_grid_id1423  18.7507364  0.0034031  5509.85   &lt;2e-16 ***\norigin_grid_id1430  16.8685825  0.0059811  2820.31   &lt;2e-16 ***\norigin_grid_id1431  16.9037226  0.0050009  3380.12   &lt;2e-16 ***\norigin_grid_id1432  16.8912573  0.0049374  3421.08   &lt;2e-16 ***\norigin_grid_id1433  15.5733249  0.0158510   982.48   &lt;2e-16 ***\norigin_grid_id1434  16.9715157  0.0055170  3076.24   &lt;2e-16 ***\norigin_grid_id1435  17.4574928  0.0042176  4139.21   &lt;2e-16 ***\norigin_grid_id1436  14.2665815  0.0224997   634.08   &lt;2e-16 ***\norigin_grid_id1437  17.5414493  0.0044614  3931.78   &lt;2e-16 ***\norigin_grid_id1438  17.8642228  0.0035637  5012.88   &lt;2e-16 ***\norigin_grid_id1439  18.3822987  0.0031747  5790.24   &lt;2e-16 ***\norigin_grid_id1440  14.7504046  0.0201251   732.94   &lt;2e-16 ***\norigin_grid_id1442  17.3081210  0.0066039  2620.90   &lt;2e-16 ***\norigin_grid_id1443  18.4183233  0.0037240  4945.87   &lt;2e-16 ***\norigin_grid_id1444  17.8467856  0.0072825  2450.63   &lt;2e-16 ***\norigin_grid_id1452  16.0097892  0.0076809  2084.37   &lt;2e-16 ***\norigin_grid_id1453  16.0984680  0.0074638  2156.87   &lt;2e-16 ***\norigin_grid_id1454  15.2160125  0.0181617   837.81   &lt;2e-16 ***\norigin_grid_id1455  16.4716200  0.0081405  2023.41   &lt;2e-16 ***\norigin_grid_id1456  16.9077811  0.0059587  2837.48   &lt;2e-16 ***\norigin_grid_id1457  17.4765862  0.0042316  4130.05   &lt;2e-16 ***\norigin_grid_id1458  17.6086099  0.0038788  4539.75   &lt;2e-16 ***\norigin_grid_id1459  17.3728539  0.0046932  3701.68   &lt;2e-16 ***\norigin_grid_id1460  16.6264650  0.0063084  2635.59   &lt;2e-16 ***\norigin_grid_id1461  15.1922111  0.0166102   914.63   &lt;2e-16 ***\norigin_grid_id1464  18.5847677  0.0035626  5216.65   &lt;2e-16 ***\norigin_grid_id1465  18.3410811  0.0046807  3918.42   &lt;2e-16 ***\norigin_grid_id1472  14.6057219  0.0188946   773.01   &lt;2e-16 ***\norigin_grid_id1473  15.6363826  0.0097052  1611.13   &lt;2e-16 ***\norigin_grid_id1474  16.5789727  0.0054185  3059.72   &lt;2e-16 ***\norigin_grid_id1475  17.4878413  0.0042821  4083.91   &lt;2e-16 ***\norigin_grid_id1476  16.8643559  0.0062225  2710.22   &lt;2e-16 ***\norigin_grid_id1477  18.1053254  0.0030644  5908.32   &lt;2e-16 ***\norigin_grid_id1478  16.5699103  0.0063460  2611.07   &lt;2e-16 ***\norigin_grid_id1479  16.7503525  0.0057510  2912.59   &lt;2e-16 ***\norigin_grid_id1480  18.3643312  0.0029703  6182.70   &lt;2e-16 ***\norigin_grid_id1481  16.0501944  0.0099470  1613.57   &lt;2e-16 ***\norigin_grid_id1482  15.8515195  0.0125409  1263.99   &lt;2e-16 ***\norigin_grid_id1485  17.9361525  0.0048181  3722.66   &lt;2e-16 ***\norigin_grid_id1494  15.7761998  0.0115838  1361.91   &lt;2e-16 ***\norigin_grid_id1495  16.0296878  0.0077683  2063.48   &lt;2e-16 ***\norigin_grid_id1496  16.9357472  0.0046700  3626.48   &lt;2e-16 ***\norigin_grid_id1497  17.1882556  0.0051482  3338.70   &lt;2e-16 ***\norigin_grid_id1498  17.6488786  0.0041363  4266.85   &lt;2e-16 ***\norigin_grid_id1499  17.7140499  0.0037341  4743.80   &lt;2e-16 ***\norigin_grid_id1500  17.7345432  0.0052965  3348.33   &lt;2e-16 ***\norigin_grid_id1501  17.7894349  0.0037820  4703.67   &lt;2e-16 ***\norigin_grid_id1502  17.4277483  0.0046313  3763.05   &lt;2e-16 ***\norigin_grid_id1506  12.9116196  0.1084816   119.02   &lt;2e-16 ***\norigin_grid_id1515  14.8299834  0.0210998   702.85   &lt;2e-16 ***\norigin_grid_id1516  16.4044147  0.0065468  2505.70   &lt;2e-16 ***\norigin_grid_id1517  16.6609657  0.0067190  2479.69   &lt;2e-16 ***\norigin_grid_id1518  16.6017604  0.0072148  2301.07   &lt;2e-16 ***\norigin_grid_id1519  18.0899136  0.0047686  3793.57   &lt;2e-16 ***\norigin_grid_id1520  16.3454260  0.0068293  2393.44   &lt;2e-16 ***\norigin_grid_id1521  15.6351614  0.0108817  1436.83   &lt;2e-16 ***\norigin_grid_id1522  18.0455986  0.0035400  5097.58   &lt;2e-16 ***\norigin_grid_id1523  16.1930070  0.0148489  1090.52   &lt;2e-16 ***\norigin_grid_id1524  16.5573849  0.0090817  1823.16   &lt;2e-16 ***\norigin_grid_id1527  15.8489069  0.0158641   999.04   &lt;2e-16 ***\norigin_grid_id1535  13.8457646  0.0720049   192.29   &lt;2e-16 ***\norigin_grid_id1536  14.1486584  0.0321499   440.08   &lt;2e-16 ***\norigin_grid_id1537  15.1934835  0.0155191   979.02   &lt;2e-16 ***\norigin_grid_id1538  16.4499440  0.0060287  2728.62   &lt;2e-16 ***\norigin_grid_id1539  16.8554670  0.0050496  3338.00   &lt;2e-16 ***\norigin_grid_id1540  17.4624358  0.0043297  4033.17   &lt;2e-16 ***\norigin_grid_id1541  18.6063241  0.0048654  3824.19   &lt;2e-16 ***\norigin_grid_id1542  15.5692071  0.0143292  1086.54   &lt;2e-16 ***\norigin_grid_id1543  16.2561024  0.0194910   834.03   &lt;2e-16 ***\norigin_grid_id1544  17.2749043  0.0063196  2733.56   &lt;2e-16 ***\norigin_grid_id1547  13.1493394  0.0577659   227.63   &lt;2e-16 ***\norigin_grid_id1556  14.3226735  0.0531791   269.33   &lt;2e-16 ***\norigin_grid_id1557  14.3403667  0.0307788   465.92   &lt;2e-16 ***\norigin_grid_id1558  15.6724478  0.0175728   891.86   &lt;2e-16 ***\norigin_grid_id1559  16.9391534  0.0047381  3575.10   &lt;2e-16 ***\norigin_grid_id1560  17.7980413  0.0036294  4903.85   &lt;2e-16 ***\norigin_grid_id1561  17.8299583  0.0045372  3929.75   &lt;2e-16 ***\norigin_grid_id1562  14.7808360  0.0190240   776.96   &lt;2e-16 ***\norigin_grid_id1563  16.3635303  0.0070854  2309.48   &lt;2e-16 ***\norigin_grid_id1564  15.5369425  0.0126180  1231.33   &lt;2e-16 ***\norigin_grid_id1565  15.4780600  0.0132565  1167.59   &lt;2e-16 ***\norigin_grid_id1566  15.0651267  0.0190919   789.08   &lt;2e-16 ***\norigin_grid_id1567  12.8856121  0.0764951   168.45   &lt;2e-16 ***\norigin_grid_id1568  13.3359360  0.0612278   217.81   &lt;2e-16 ***\norigin_grid_id1578  11.3877762  0.7071095    16.11   &lt;2e-16 ***\norigin_grid_id1580  15.7280986  0.0147484  1066.43   &lt;2e-16 ***\norigin_grid_id1581  14.3129429  0.0195580   731.82   &lt;2e-16 ***\norigin_grid_id1582  17.5396361  0.0038388  4569.01   &lt;2e-16 ***\norigin_grid_id1583  16.2097541  0.0196276   825.87   &lt;2e-16 ***\norigin_grid_id1584  16.1547647  0.0098506  1639.97   &lt;2e-16 ***\norigin_grid_id1585  16.4538480  0.0086413  1904.09   &lt;2e-16 ***\norigin_grid_id1586  15.5479869  0.0119624  1299.74   &lt;2e-16 ***\norigin_grid_id1589  12.3159442  0.1118193   110.14   &lt;2e-16 ***\norigin_grid_id1590  13.4801482  0.0574819   234.51   &lt;2e-16 ***\norigin_grid_id1600  17.2174715  0.0090472  1903.08   &lt;2e-16 ***\norigin_grid_id1601  16.0660629  0.0071839  2236.38   &lt;2e-16 ***\norigin_grid_id1602  16.9780285  0.0058328  2910.81   &lt;2e-16 ***\norigin_grid_id1603  17.7019138  0.0038752  4567.95   &lt;2e-16 ***\norigin_grid_id1604  16.2622912  0.0075565  2152.09   &lt;2e-16 ***\norigin_grid_id1605  17.5338381  0.0041826  4192.10   &lt;2e-16 ***\norigin_grid_id1606  17.0675319  0.0087284  1955.39   &lt;2e-16 ***\norigin_grid_id1607  16.0347064  0.0091282  1756.61   &lt;2e-16 ***\norigin_grid_id1608  17.7214399  0.0043552  4069.00   &lt;2e-16 ***\norigin_grid_id1609  17.3874917  0.0054293  3202.53   &lt;2e-16 ***\norigin_grid_id1610  14.0027324  0.0622873   224.81   &lt;2e-16 ***\norigin_grid_id1622  15.6077191  0.0197102   791.86   &lt;2e-16 ***\norigin_grid_id1623  17.3693539  0.0040214  4319.27   &lt;2e-16 ***\norigin_grid_id1624  16.2035757  0.0078708  2058.70   &lt;2e-16 ***\norigin_grid_id1625  17.6261063  0.0045429  3879.96   &lt;2e-16 ***\norigin_grid_id1626  17.9397207  0.0033731  5318.44   &lt;2e-16 ***\norigin_grid_id1627  16.4936989  0.0067498  2443.57   &lt;2e-16 ***\norigin_grid_id1628  18.0375215  0.0034523  5224.82   &lt;2e-16 ***\norigin_grid_id1629  16.9032411  0.0066247  2551.56   &lt;2e-16 ***\norigin_grid_id1630  16.7521004  0.0075195  2227.83   &lt;2e-16 ***\norigin_grid_id1631  13.0725471  0.0591612   220.97   &lt;2e-16 ***\norigin_grid_id1642  14.8915772  0.0270211   551.11   &lt;2e-16 ***\norigin_grid_id1643  17.2613263  0.0043504  3967.75   &lt;2e-16 ***\norigin_grid_id1644  15.1952287  0.0157724   963.40   &lt;2e-16 ***\norigin_grid_id1645  16.7150048  0.0058616  2851.62   &lt;2e-16 ***\norigin_grid_id1646  16.6621181  0.0085207  1955.50   &lt;2e-16 ***\norigin_grid_id1647  16.8841846  0.0055114  3063.51   &lt;2e-16 ***\norigin_grid_id1648  17.2571541  0.0046652  3699.16   &lt;2e-16 ***\norigin_grid_id1649  17.8996686  0.0036831  4859.98   &lt;2e-16 ***\norigin_grid_id1650  17.6298153  0.0050856  3466.62   &lt;2e-16 ***\norigin_grid_id1664  12.0248059  0.1666761    72.14   &lt;2e-16 ***\norigin_grid_id1665  17.4357226  0.0039406  4424.69   &lt;2e-16 ***\norigin_grid_id1666  16.2252633  0.0067385  2407.84   &lt;2e-16 ***\norigin_grid_id1667  17.4395806  0.0102020  1709.43   &lt;2e-16 ***\norigin_grid_id1668  17.3877060  0.0045810  3795.62   &lt;2e-16 ***\norigin_grid_id1670  18.1009589  0.0034287  5279.25   &lt;2e-16 ***\norigin_grid_id1671  18.7865195  0.0049674  3782.00   &lt;2e-16 ***\norigin_grid_id1672  17.8536764  0.0056036  3186.12   &lt;2e-16 ***\norigin_grid_id1684  16.4742791  0.0116561  1413.37   &lt;2e-16 ***\norigin_grid_id1685  17.1162409  0.0052004  3291.36   &lt;2e-16 ***\norigin_grid_id1686  16.9092762  0.0052175  3240.91   &lt;2e-16 ***\norigin_grid_id1687  16.6264073  0.0071047  2340.20   &lt;2e-16 ***\norigin_grid_id1688  16.0773487  0.0081097  1982.48   &lt;2e-16 ***\norigin_grid_id1689  15.7336225  0.0118364  1329.26   &lt;2e-16 ***\norigin_grid_id1690  17.0938172  0.0063309  2700.06   &lt;2e-16 ***\norigin_grid_id1691  17.7261045  0.0043165  4106.58   &lt;2e-16 ***\norigin_grid_id1692  16.9674617  0.0078194  2169.92   &lt;2e-16 ***\norigin_grid_id1706  17.0888325  0.0060510  2824.16   &lt;2e-16 ***\norigin_grid_id1707  16.9709258  0.0049351  3438.82   &lt;2e-16 ***\norigin_grid_id1708  17.5039278  0.0040581  4313.30   &lt;2e-16 ***\norigin_grid_id1709  16.4605027  0.0065150  2526.57   &lt;2e-16 ***\norigin_grid_id1710  17.6408306  0.0041416  4259.47   &lt;2e-16 ***\norigin_grid_id1711  17.4194693  0.0048268  3608.90   &lt;2e-16 ***\norigin_grid_id1712  18.0843131  0.0034026  5314.79   &lt;2e-16 ***\norigin_grid_id1713  15.6567335  0.0122374  1279.42   &lt;2e-16 ***\norigin_grid_id1714  18.0001138  0.0045285  3974.85   &lt;2e-16 ***\norigin_grid_id1727  17.2316588  0.0051429  3350.57   &lt;2e-16 ***\norigin_grid_id1728  17.0435208  0.0047294  3603.71   &lt;2e-16 ***\norigin_grid_id1729  16.6461368  0.0055371  3006.30   &lt;2e-16 ***\norigin_grid_id1730  14.7503796  0.0199773   738.36   &lt;2e-16 ***\norigin_grid_id1731  17.1200488  0.0053592  3194.54   &lt;2e-16 ***\norigin_grid_id1732  17.7963397  0.0037022  4806.95   &lt;2e-16 ***\norigin_grid_id1733  17.5422943  0.0044642  3929.59   &lt;2e-16 ***\norigin_grid_id1734  17.7722932  0.0042648  4167.24   &lt;2e-16 ***\norigin_grid_id1735  18.6949197  0.0056752  3294.17   &lt;2e-16 ***\norigin_grid_id1748  16.1051996  0.0092003  1750.50   &lt;2e-16 ***\norigin_grid_id1749  16.8961768  0.0049971  3381.18   &lt;2e-16 ***\norigin_grid_id1750  16.1018546  0.0071510  2251.70   &lt;2e-16 ***\norigin_grid_id1751  15.6710873  0.0104553  1498.86   &lt;2e-16 ***\norigin_grid_id1753  17.7937787  0.0039019  4560.33   &lt;2e-16 ***\norigin_grid_id1754  17.9855157  0.0034177  5262.46   &lt;2e-16 ***\norigin_grid_id1755  17.5021670  0.0044060  3972.31   &lt;2e-16 ***\norigin_grid_id1756  17.4893728  0.0052168  3352.54   &lt;2e-16 ***\norigin_grid_id1757  15.3410182  0.0244028   628.66   &lt;2e-16 ***\norigin_grid_id1769  16.8976502  0.0056869  2971.33   &lt;2e-16 ***\norigin_grid_id1770  16.5829409  0.0095682  1733.13   &lt;2e-16 ***\norigin_grid_id1771  15.7505376  0.0098805  1594.11   &lt;2e-16 ***\norigin_grid_id1772  15.0805146  0.0233173   646.75   &lt;2e-16 ***\norigin_grid_id1774  17.4855993  0.0043103  4056.70   &lt;2e-16 ***\norigin_grid_id1775  17.1819937  0.0053936  3185.65   &lt;2e-16 ***\norigin_grid_id1776  18.0794956  0.0034919  5177.61   &lt;2e-16 ***\norigin_grid_id1777  18.1680052  0.0039315  4621.10   &lt;2e-16 ***\norigin_grid_id1778  17.1266407  0.0107450  1593.92   &lt;2e-16 ***\norigin_grid_id1790  17.5033920  0.0048499  3609.05   &lt;2e-16 ***\norigin_grid_id1791  16.8465751  0.0062908  2677.98   &lt;2e-16 ***\norigin_grid_id1792  17.0157115  0.0064406  2641.94   &lt;2e-16 ***\norigin_grid_id1793  15.0889622  0.0133746  1128.18   &lt;2e-16 ***\norigin_grid_id1794  15.2557712  0.0273867   557.05   &lt;2e-16 ***\norigin_grid_id1795  14.2028824  0.0327429   433.77   &lt;2e-16 ***\norigin_grid_id1796  17.9499093  0.0042118  4261.82   &lt;2e-16 ***\norigin_grid_id1797  17.8626927  0.0039312  4543.82   &lt;2e-16 ***\norigin_grid_id1798  18.1229970  0.0039337  4607.15   &lt;2e-16 ***\norigin_grid_id1799  16.8451300  0.0074943  2247.72   &lt;2e-16 ***\norigin_grid_id1800  15.7297354  0.0268521   585.79   &lt;2e-16 ***\norigin_grid_id1811  16.6189279  0.0071755  2316.07   &lt;2e-16 ***\norigin_grid_id1812  17.6830692  0.0037009  4778.06   &lt;2e-16 ***\norigin_grid_id1813  17.5194434  0.0039419  4444.37   &lt;2e-16 ***\norigin_grid_id1817  17.6530415  0.0052099  3388.39   &lt;2e-16 ***\norigin_grid_id1818  17.7421405  0.0043473  4081.22   &lt;2e-16 ***\norigin_grid_id1819  17.9678982  0.0037476  4794.45   &lt;2e-16 ***\norigin_grid_id1820  15.0730826  0.0328028   459.51   &lt;2e-16 ***\norigin_grid_id1832  17.2792088  0.0052479  3292.61   &lt;2e-16 ***\norigin_grid_id1833  16.7774444  0.0058875  2849.65   &lt;2e-16 ***\norigin_grid_id1834  17.2439200  0.0045866  3759.62   &lt;2e-16 ***\norigin_grid_id1835  16.4938336  0.0072828  2264.76   &lt;2e-16 ***\norigin_grid_id1837  13.8576299  0.0607753   228.01   &lt;2e-16 ***\norigin_grid_id1839  17.2084247  0.0065449  2629.31   &lt;2e-16 ***\norigin_grid_id1840  18.9559324  0.0029161  6500.34   &lt;2e-16 ***\norigin_grid_id1841  14.6925053  0.0343462   427.78   &lt;2e-16 ***\norigin_grid_id1842  17.9178629  0.0103806  1726.09   &lt;2e-16 ***\norigin_grid_id1853  17.1248392  0.0049727  3443.74   &lt;2e-16 ***\norigin_grid_id1854  17.4067953  0.0046455  3747.00   &lt;2e-16 ***\norigin_grid_id1855  17.7091614  0.0041865  4230.11   &lt;2e-16 ***\norigin_grid_id1858  15.2567232  0.0252388   604.49   &lt;2e-16 ***\norigin_grid_id1860  18.4167830  0.0081395  2262.63   &lt;2e-16 ***\norigin_grid_id1861  17.9508755  0.0045017  3987.60   &lt;2e-16 ***\norigin_grid_id1874  17.4188574  0.0059174  2943.67   &lt;2e-16 ***\norigin_grid_id1875  15.7929053  0.0123136  1282.56   &lt;2e-16 ***\norigin_grid_id1876  17.6910028  0.0096121  1840.50   &lt;2e-16 ***\norigin_grid_id1877  17.3408602  0.0047832  3625.38   &lt;2e-16 ***\norigin_grid_id1880  13.9034583  0.0506070   274.73   &lt;2e-16 ***\norigin_grid_id1882  17.7766141  0.0048810  3641.97   &lt;2e-16 ***\norigin_grid_id1883  17.8567863  0.0085339  2092.46   &lt;2e-16 ***\norigin_grid_id1895  17.3892616  0.0047130  3689.64   &lt;2e-16 ***\norigin_grid_id1896  15.8542768  0.0096700  1639.53   &lt;2e-16 ***\norigin_grid_id1897  16.7936665  0.0087070  1928.75   &lt;2e-16 ***\norigin_grid_id1898  12.0770170  0.1324667    91.17   &lt;2e-16 ***\norigin_grid_id1901  14.0088344  0.0588558   238.02   &lt;2e-16 ***\norigin_grid_id1903  17.0429781  0.0086015  1981.40   &lt;2e-16 ***\norigin_grid_id1917  16.1016192  0.0089392  1801.25   &lt;2e-16 ***\norigin_grid_id1918  18.0203790  0.0055843  3226.95   &lt;2e-16 ***\norigin_grid_id1919  17.3410166  0.0051046  3397.11   &lt;2e-16 ***\norigin_grid_id1922  15.0890472  0.0282015   535.04   &lt;2e-16 ***\norigin_grid_id1924  17.2044699  0.0090934  1891.98   &lt;2e-16 ***\norigin_grid_id1937  16.7772814  0.0066887  2508.32   &lt;2e-16 ***\norigin_grid_id1938  17.5872163  0.0044403  3960.85   &lt;2e-16 ***\norigin_grid_id1939  18.3194379  0.0040039  4575.38   &lt;2e-16 ***\norigin_grid_id1942  13.8801537  0.0469180   295.84   &lt;2e-16 ***\norigin_grid_id1959  16.4646707  0.0083976  1960.63   &lt;2e-16 ***\norigin_grid_id1960  18.3186945  0.0030138  6078.34   &lt;2e-16 ***\norigin_grid_id1961  17.2144353  0.0067079  2566.31   &lt;2e-16 ***\norigin_grid_id1962  18.0522973  0.0043278  4171.27   &lt;2e-16 ***\norigin_grid_id1964  12.9173131  0.0880630   146.68   &lt;2e-16 ***\norigin_grid_id1979  16.7036992  0.0076860  2173.27   &lt;2e-16 ***\norigin_grid_id1980  15.2699763  0.0135171  1129.68   &lt;2e-16 ***\norigin_grid_id1981  17.6984485  0.0043004  4115.50   &lt;2e-16 ***\norigin_grid_id1982  16.7012617  0.0106960  1561.45   &lt;2e-16 ***\norigin_grid_id1983  18.0586377  0.0043015  4198.24   &lt;2e-16 ***\norigin_grid_id1984  16.6549811  0.0072971  2282.40   &lt;2e-16 ***\norigin_grid_id1985  17.1870097  0.0061706  2785.31   &lt;2e-16 ***\norigin_grid_id2001  16.9690631  0.0057802  2935.72   &lt;2e-16 ***\norigin_grid_id2002  17.7201918  0.0038358  4619.63   &lt;2e-16 ***\norigin_grid_id2003  17.3110613  0.0050136  3452.85   &lt;2e-16 ***\norigin_grid_id2004  18.1616402  0.0040842  4446.85   &lt;2e-16 ***\norigin_grid_id2005  17.8833307  0.0041303  4329.78   &lt;2e-16 ***\norigin_grid_id2006  16.4214791  0.0090284  1818.88   &lt;2e-16 ***\norigin_grid_id2007  15.7871292  0.0157035  1005.32   &lt;2e-16 ***\norigin_grid_id2022  17.6526080  0.0056604  3118.61   &lt;2e-16 ***\norigin_grid_id2023  17.9458684  0.0037177  4827.15   &lt;2e-16 ***\norigin_grid_id2024  17.3235265  0.0046925  3691.78   &lt;2e-16 ***\norigin_grid_id2025  17.6167115  0.0045488  3872.85   &lt;2e-16 ***\norigin_grid_id2026  16.0677829  0.0113819  1411.69   &lt;2e-16 ***\norigin_grid_id2027  18.0382813  0.0039834  4528.38   &lt;2e-16 ***\norigin_grid_id2043  16.7388913  0.0074523  2246.13   &lt;2e-16 ***\norigin_grid_id2044  17.6385814  0.0042181  4181.62   &lt;2e-16 ***\norigin_grid_id2045  13.3820930  0.0743536   179.98   &lt;2e-16 ***\norigin_grid_id2046  17.7355465  0.0039028  4544.32   &lt;2e-16 ***\norigin_grid_id2047  17.7251496  0.0050125  3536.17   &lt;2e-16 ***\norigin_grid_id2048  17.6953940  0.0045581  3882.17   &lt;2e-16 ***\norigin_grid_id2049  16.7157424  0.0134958  1238.59   &lt;2e-16 ***\norigin_grid_id2064  17.5826320  0.0047724  3684.27   &lt;2e-16 ***\norigin_grid_id2065  16.2128740  0.0081713  1984.12   &lt;2e-16 ***\norigin_grid_id2066  16.4960980  0.0204686   805.92   &lt;2e-16 ***\norigin_grid_id2067  18.5851972  0.0028222  6585.40   &lt;2e-16 ***\norigin_grid_id2068  18.0033106  0.0066624  2702.22   &lt;2e-16 ***\norigin_grid_id2069  17.4564945  0.0053763  3246.94   &lt;2e-16 ***\norigin_grid_id2085  16.2881252  0.0091947  1771.47   &lt;2e-16 ***\norigin_grid_id2086  17.7700327  0.0040231  4417.03   &lt;2e-16 ***\norigin_grid_id2087  16.5884964  0.0070416  2355.80   &lt;2e-16 ***\norigin_grid_id2088  17.3987694  0.0045087  3858.96   &lt;2e-16 ***\norigin_grid_id2089  17.1998472  0.0063630  2703.09   &lt;2e-16 ***\norigin_grid_id2090  18.0910469  0.0034824  5195.03   &lt;2e-16 ***\norigin_grid_id2091  14.2838566  0.0679081   210.34   &lt;2e-16 ***\norigin_grid_id2105  14.1602333  0.1010390   140.15   &lt;2e-16 ***\norigin_grid_id2106  14.8304576  0.0186545   795.01   &lt;2e-16 ***\norigin_grid_id2107  15.9094086  0.0090641  1755.22   &lt;2e-16 ***\norigin_grid_id2108  17.2857221  0.0053041  3258.96   &lt;2e-16 ***\norigin_grid_id2109  17.5854002  0.0044430  3957.99   &lt;2e-16 ***\norigin_grid_id2110  17.1203332  0.0070713  2421.11   &lt;2e-16 ***\norigin_grid_id2111  15.0868291  0.0392020   384.85   &lt;2e-16 ***\norigin_grid_id2128  15.9211082  0.0128364  1240.31   &lt;2e-16 ***\norigin_grid_id2129  15.3512729  0.0143509  1069.71   &lt;2e-16 ***\norigin_grid_id2130  17.7635680  0.0038853  4572.04   &lt;2e-16 ***\norigin_grid_id2131  18.1130436  0.0043637  4150.80   &lt;2e-16 ***\norigin_grid_id2132  17.2008513  0.0058405  2945.07   &lt;2e-16 ***\norigin_grid_id2148  16.5636384  0.0108655  1524.43   &lt;2e-16 ***\norigin_grid_id2149  15.2969568  0.0153252   998.16   &lt;2e-16 ***\norigin_grid_id2150  17.7181343  0.0044565  3975.77   &lt;2e-16 ***\norigin_grid_id2151  18.0143082  0.0034665  5196.69   &lt;2e-16 ***\norigin_grid_id2152  18.2069528  0.0037417  4865.90   &lt;2e-16 ***\norigin_grid_id2153  17.5249792  0.0054392  3221.99   &lt;2e-16 ***\norigin_grid_id2171  16.6211307  0.0068812  2415.46   &lt;2e-16 ***\norigin_grid_id2172  16.9481598  0.0075949  2231.51   &lt;2e-16 ***\norigin_grid_id2173  17.2472274  0.0050878  3389.90   &lt;2e-16 ***\norigin_grid_id2174  17.5224510  0.0050672  3458.03   &lt;2e-16 ***\norigin_grid_id2191  16.2672749  0.0098831  1645.97   &lt;2e-16 ***\norigin_grid_id2192  15.9682451  0.0106293  1502.29   &lt;2e-16 ***\norigin_grid_id2193  17.0544670  0.0058424  2919.11   &lt;2e-16 ***\norigin_grid_id2194  17.3241767  0.0049654  3489.01   &lt;2e-16 ***\norigin_grid_id2195  16.7661446  0.0198281   845.57   &lt;2e-16 ***\norigin_grid_id2212  14.1417106  0.0798341   177.14   &lt;2e-16 ***\norigin_grid_id2213  13.9764429  0.0380335   367.48   &lt;2e-16 ***\norigin_grid_id2214  15.1598914  0.0240813   629.53   &lt;2e-16 ***\norigin_grid_id2215  17.0081009  0.0064207  2648.95   &lt;2e-16 ***\norigin_grid_id2216  16.0216022  0.0104986  1526.06   &lt;2e-16 ***\norigin_grid_id2233  14.5154084  0.0387056   375.02   &lt;2e-16 ***\norigin_grid_id2234  16.0657853  0.0192729   833.59   &lt;2e-16 ***\norigin_grid_id2235  15.8254004  0.0127364  1242.54   &lt;2e-16 ***\norigin_grid_id2236  15.8129702  0.0124844  1266.62   &lt;2e-16 ***\norigin_grid_id2237  13.4669249  0.0534062   252.16   &lt;2e-16 ***\norigin_grid_id2256  13.9135499  0.0501582   277.39   &lt;2e-16 ***\norigin_grid_id2257  15.4114952  0.0182817   843.00   &lt;2e-16 ***\norigin_grid_id2258  14.7373720  0.0174431   844.88   &lt;2e-16 ***\norigin_grid_id2259  14.4737046  0.0350556   412.88   &lt;2e-16 ***\norigin_grid_id2277  15.2255420  0.0391763   388.64   &lt;2e-16 ***\norigin_grid_id2278  15.9806755  0.0148119  1078.91   &lt;2e-16 ***\norigin_grid_id2279  14.8134951  0.0189235   782.81   &lt;2e-16 ***\norigin_grid_id2280  13.0700298  0.1005199   130.02   &lt;2e-16 ***\norigin_grid_id2297  17.5406319  0.0087679  2000.56   &lt;2e-16 ***\norigin_grid_id2300  13.3769181  0.0594734   224.92   &lt;2e-16 ***\norigin_grid_id2301  15.0968672  0.0181373   832.37   &lt;2e-16 ***\norigin_grid_id2318  15.8016319  0.0181104   872.52   &lt;2e-16 ***\norigin_grid_id2319  16.8747288  0.0099436  1697.05   &lt;2e-16 ***\norigin_grid_id2322  16.1280068  0.0119160  1353.48   &lt;2e-16 ***\norigin_grid_id2337  17.2319244  0.0151248  1139.32   &lt;2e-16 ***\norigin_grid_id2341  17.1999264  0.0089129  1929.79   &lt;2e-16 ***\norigin_grid_id2343  15.7343529  0.0139001  1131.96   &lt;2e-16 ***\norigin_grid_id2361  16.8820911  0.0104254  1619.32   &lt;2e-16 ***\norigin_grid_id2364  13.2657670  0.0644446   205.85   &lt;2e-16 ***\norigin_grid_id2379  17.0330291  0.0170548   998.73   &lt;2e-16 ***\norigin_grid_id2384  16.3486767  0.0143435  1139.80   &lt;2e-16 ***\norigin_grid_id2405  16.0471958  0.0141854  1131.25   &lt;2e-16 ***\norigin_grid_id2406  14.6415673  0.0331163   442.12   &lt;2e-16 ***\norigin_grid_id2426  16.3793755  0.0262460   624.07   &lt;2e-16 ***\norigin_grid_id2427  16.9790564  0.0103967  1633.11   &lt;2e-16 ***\norigin_grid_id2505  16.5766614  0.0362902   456.78   &lt;2e-16 ***\nlog(SCHOOL_COUNT)    0.2845545  0.0006433   442.32   &lt;2e-16 ***\nlog(BUSINESS_COUNT)  0.1154432  0.0001721   670.79   &lt;2e-16 ***\nlog(dist)           -1.4353451  0.0002602 -5516.95   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 338989784  on 65030  degrees of freedom\nResidual deviance:  43473204  on 64211  degrees of freedom\nAIC: 43832192\n\nNumber of Fisher Scoring iterations: 7\n\n\n\n\nGoodness of fit\nIn statistical modelling, the next question we would like to answer is how well the proportion of variance in the dependent variable (i.e. TRIPS) that can be explained by the explanatory variables.\nIn order to provide answer to this question, R-squared statistics will be used. However, R-squared is not an output of glm(). Hence we will write a function called CalcRSquared by using the code chunk below.\n\nCalcRSquared &lt;- function(observed, estimated){\n  r &lt;- cor(observed, estimated)\n  R2 &lt;- r^2\n  R2\n}\n\nNow, we can examine how the constraints hold for destinations this time.\n\nCalcRSquared(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values)\n\n[1] 0.2284299\n\n\nWith reference to the R-Squared above, we can conclude that the model accounts for about 23% of the variation of flows in the systems. Quite bad.\n\n\nDoubly constrained model\n\ndbcSIM_Poisson &lt;- glm(formula = TRIPS ~ \n                origin_grid_id + \n                destination_grid_id +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = flow_data_tidy,\n              na.action = na.exclude)\nsummary(dbcSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ origin_grid_id + destination_grid_id + \n    log(dist), family = poisson(link = \"log\"), data = flow_data_tidy, \n    na.action = na.exclude)\n\nCoefficients:\n                          Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)             15.4886854  0.1103016   140.421  &lt; 2e-16 ***\norigin_grid_id44        -2.2255769  0.1714005   -12.985  &lt; 2e-16 ***\norigin_grid_id46        -0.9390684  0.1331273    -7.054 1.74e-12 ***\norigin_grid_id66        -1.6326671  0.1603148   -10.184  &lt; 2e-16 ***\norigin_grid_id67         1.2322343  0.1029838    11.965  &lt; 2e-16 ***\norigin_grid_id68        -1.6036756  0.1639158    -9.784  &lt; 2e-16 ***\norigin_grid_id86        -0.9142012  0.1229765    -7.434 1.05e-13 ***\norigin_grid_id87        -0.1328999  0.1293388    -1.028 0.304169    \norigin_grid_id88         1.8649655  0.1015738    18.361  &lt; 2e-16 ***\norigin_grid_id89         0.3037990  0.1122304     2.707 0.006791 ** \norigin_grid_id90         0.4326146  0.1664555     2.599 0.009350 ** \norigin_grid_id109       -0.0503903  0.1414398    -0.356 0.721641    \norigin_grid_id110        0.2437226  0.1236875     1.970 0.048784 *  \norigin_grid_id111        3.6688976  0.1012031    36.253  &lt; 2e-16 ***\norigin_grid_id112       -0.4724173  0.1191654    -3.964 7.36e-05 ***\norigin_grid_id128        2.8171247  0.1045232    26.952  &lt; 2e-16 ***\norigin_grid_id129       -0.2098478  0.2144713    -0.978 0.327856    \norigin_grid_id130       -0.0932463  0.1172658    -0.795 0.426514    \norigin_grid_id131        0.0549303  0.1065620     0.515 0.606219    \norigin_grid_id132       -0.1650376  0.1112822    -1.483 0.138060    \norigin_grid_id133        0.6473238  0.1070765     6.045 1.49e-09 ***\norigin_grid_id134        3.5913352  0.1037586    34.612  &lt; 2e-16 ***\norigin_grid_id150        3.7025148  0.1024226    36.149  &lt; 2e-16 ***\norigin_grid_id151        0.7116876  0.1164897     6.109 1.00e-09 ***\norigin_grid_id152        0.1700463  0.1294169     1.314 0.188866    \norigin_grid_id153        0.9274486  0.1088945     8.517  &lt; 2e-16 ***\norigin_grid_id154        3.5884941  0.1005858    35.676  &lt; 2e-16 ***\norigin_grid_id155        0.7944350  0.1054859     7.531 5.03e-14 ***\norigin_grid_id156        1.6991618  0.1076336    15.787  &lt; 2e-16 ***\norigin_grid_id172        1.7848689  0.1262024    14.143  &lt; 2e-16 ***\norigin_grid_id174        0.6813679  0.1108073     6.149 7.79e-10 ***\norigin_grid_id175        3.4579382  0.1009401    34.257  &lt; 2e-16 ***\norigin_grid_id176        4.3708401  0.1004254    43.523  &lt; 2e-16 ***\norigin_grid_id195       -0.5656184  0.1291228    -4.380 1.18e-05 ***\norigin_grid_id196        0.3825121  0.1088519     3.514 0.000441 ***\norigin_grid_id197       -0.1741178  0.1488428    -1.170 0.242078    \norigin_grid_id215        0.7145510  0.1300934     5.493 3.96e-08 ***\norigin_grid_id216        4.8320864  0.1006125    48.027  &lt; 2e-16 ***\norigin_grid_id217        2.0531437  0.1024817    20.034  &lt; 2e-16 ***\norigin_grid_id237       -0.7859062  0.1857889    -4.230 2.34e-05 ***\norigin_grid_id238        0.8720793  0.1126931     7.739 1.01e-14 ***\norigin_grid_id239        0.1647221  0.1874024     0.879 0.379415    \norigin_grid_id257       -0.2851607  0.1155199    -2.468 0.013568 *  \norigin_grid_id258        1.6605172  0.1040804    15.954  &lt; 2e-16 ***\norigin_grid_id259        1.0005626  0.1082584     9.242  &lt; 2e-16 ***\norigin_grid_id278        0.4725514  0.1078228     4.383 1.17e-05 ***\norigin_grid_id279        0.1456538  0.1093545     1.332 0.182880    \norigin_grid_id280        0.7233408  0.1101483     6.567 5.13e-11 ***\norigin_grid_id298       -2.9827013  0.3484525    -8.560  &lt; 2e-16 ***\norigin_grid_id299       -0.3405361  0.1122074    -3.035 0.002406 ** \norigin_grid_id300        3.6155335  0.1008450    35.852  &lt; 2e-16 ***\norigin_grid_id320       -1.1530127  0.1191011    -9.681  &lt; 2e-16 ***\norigin_grid_id321        0.8848409  0.1233885     7.171 7.44e-13 ***\norigin_grid_id322        1.4496774  0.1107543    13.089  &lt; 2e-16 ***\norigin_grid_id340        1.2375419  0.1043165    11.863  &lt; 2e-16 ***\norigin_grid_id341       -0.4342942  0.1098374    -3.954 7.69e-05 ***\norigin_grid_id342        0.7910248  0.1086116     7.283 3.26e-13 ***\norigin_grid_id363        0.9176911  0.1071686     8.563  &lt; 2e-16 ***\norigin_grid_id364        1.7128185  0.1039531    16.477  &lt; 2e-16 ***\norigin_grid_id383        0.6489734  0.1052649     6.165 7.04e-10 ***\norigin_grid_id384       -0.0682992  0.1131940    -0.603 0.546255    \norigin_grid_id385        1.1743791  0.1105920    10.619  &lt; 2e-16 ***\norigin_grid_id404        1.4128566  0.1062461    13.298  &lt; 2e-16 ***\norigin_grid_id405       -0.0008094  0.1116595    -0.007 0.994216    \norigin_grid_id406        5.5515265  0.1004891    55.245  &lt; 2e-16 ***\norigin_grid_id407        1.5038304  0.1103097    13.633  &lt; 2e-16 ***\norigin_grid_id408        2.2732061  0.1030823    22.052  &lt; 2e-16 ***\norigin_grid_id425       -1.1072483  0.1337210    -8.280  &lt; 2e-16 ***\norigin_grid_id426        0.8805825  0.1047296     8.408  &lt; 2e-16 ***\norigin_grid_id427        0.7181178  0.1065108     6.742 1.56e-11 ***\norigin_grid_id428        0.4574380  0.1271497     3.598 0.000321 ***\norigin_grid_id429        1.5166806  0.1030654    14.716  &lt; 2e-16 ***\norigin_grid_id446        0.3989002  0.1166054     3.421 0.000624 ***\norigin_grid_id447        0.0390306  0.1099240     0.355 0.722538    \norigin_grid_id448        1.4070292  0.1042761    13.493  &lt; 2e-16 ***\norigin_grid_id449        4.7161966  0.1006885    46.839  &lt; 2e-16 ***\norigin_grid_id450        1.5415626  0.1024156    15.052  &lt; 2e-16 ***\norigin_grid_id468        1.6613169  0.1042308    15.939  &lt; 2e-16 ***\norigin_grid_id469        2.3384967  0.1019926    22.928  &lt; 2e-16 ***\norigin_grid_id470        4.7019501  0.1006167    46.731  &lt; 2e-16 ***\norigin_grid_id471        2.5390038  0.1018133    24.938  &lt; 2e-16 ***\norigin_grid_id488        0.1880511  0.1158536     1.623 0.104551    \norigin_grid_id489       -1.3986871  0.2695126    -5.190 2.11e-07 ***\norigin_grid_id490        3.2388569  0.1011333    32.026  &lt; 2e-16 ***\norigin_grid_id491        3.7263306  0.1007709    36.978  &lt; 2e-16 ***\norigin_grid_id493       -0.9368385  0.1713294    -5.468 4.55e-08 ***\norigin_grid_id494        1.0457319  0.1165878     8.969  &lt; 2e-16 ***\norigin_grid_id509        0.3271791  0.1061059     3.084 0.002046 ** \norigin_grid_id510        0.9198772  0.1035188     8.886  &lt; 2e-16 ***\norigin_grid_id511        2.6543908  0.1010494    26.268  &lt; 2e-16 ***\norigin_grid_id512        5.2560417  0.1005488    52.274  &lt; 2e-16 ***\norigin_grid_id513        1.8372110  0.1033576    17.775  &lt; 2e-16 ***\norigin_grid_id514        1.6911759  0.1070897    15.792  &lt; 2e-16 ***\norigin_grid_id515        0.1431724  0.1703967     0.840 0.400779    \norigin_grid_id530       -0.7248838  0.1290894    -5.615 1.96e-08 ***\norigin_grid_id531        1.4644791  0.1026008    14.274  &lt; 2e-16 ***\norigin_grid_id532        1.1314328  0.1030958    10.975  &lt; 2e-16 ***\norigin_grid_id533        4.9651417  0.1005488    49.380  &lt; 2e-16 ***\norigin_grid_id534        5.5430291  0.1005656    55.119  &lt; 2e-16 ***\norigin_grid_id536        2.2547179  0.1036761    21.748  &lt; 2e-16 ***\norigin_grid_id537        0.2401874  0.1703023     1.410 0.158434    \norigin_grid_id538        0.1601814  0.2276360     0.704 0.481636    \norigin_grid_id539       -1.0007546  0.5868821    -1.705 0.088156 .  \norigin_grid_id551       -0.7289877  0.1141506    -6.386 1.70e-10 ***\norigin_grid_id552        1.7696111  0.1070867    16.525  &lt; 2e-16 ***\norigin_grid_id553        1.2620886  0.1022657    12.341  &lt; 2e-16 ***\norigin_grid_id554        4.8697002  0.1005588    48.426  &lt; 2e-16 ***\norigin_grid_id555        4.2969493  0.1007484    42.650  &lt; 2e-16 ***\norigin_grid_id559        0.7690611  0.1374357     5.596 2.20e-08 ***\norigin_grid_id560        3.1383307  0.1112632    28.206  &lt; 2e-16 ***\norigin_grid_id572       -1.9282350  0.2454527    -7.856 3.97e-15 ***\norigin_grid_id573       -0.2032865  0.1095978    -1.855 0.063619 .  \norigin_grid_id574        1.3115923  0.1067825    12.283  &lt; 2e-16 ***\norigin_grid_id575        5.9726856  0.1005231    59.416  &lt; 2e-16 ***\norigin_grid_id576        4.5194843  0.1006205    44.916  &lt; 2e-16 ***\norigin_grid_id578       -0.2029721  0.1470302    -1.380 0.167439    \norigin_grid_id582        0.1224562  0.1471093     0.832 0.405174    \norigin_grid_id583       -0.0175997  0.2208699    -0.080 0.936489    \norigin_grid_id584        3.3471470  0.1148017    29.156  &lt; 2e-16 ***\norigin_grid_id593        1.1367956  0.1120733    10.143  &lt; 2e-16 ***\norigin_grid_id594        0.9416661  0.1038443     9.068  &lt; 2e-16 ***\norigin_grid_id595        1.1473921  0.1024258    11.202  &lt; 2e-16 ***\norigin_grid_id596        4.2667895  0.1005911    42.417  &lt; 2e-16 ***\norigin_grid_id597        1.4894936  0.1164867    12.787  &lt; 2e-16 ***\norigin_grid_id603        0.7583301  0.1482784     5.114 3.15e-07 ***\norigin_grid_id604       -1.0151143  0.2862749    -3.546 0.000391 ***\norigin_grid_id615       -0.2820127  0.1097129    -2.570 0.010156 *  \norigin_grid_id616        0.8453380  0.1046256     8.080 6.50e-16 ***\norigin_grid_id617        1.6787777  0.1019919    16.460  &lt; 2e-16 ***\norigin_grid_id618        4.9318630  0.1005738    49.037  &lt; 2e-16 ***\norigin_grid_id620        1.9799568  0.1056351    18.743  &lt; 2e-16 ***\norigin_grid_id637        0.5555757  0.1078842     5.150 2.61e-07 ***\norigin_grid_id638        4.4023268  0.1005894    43.765  &lt; 2e-16 ***\norigin_grid_id657        2.2689046  0.1018297    22.281  &lt; 2e-16 ***\norigin_grid_id658        3.7310992  0.1007085    37.049  &lt; 2e-16 ***\norigin_grid_id659        3.9536113  0.1006498    39.281  &lt; 2e-16 ***\norigin_grid_id660        5.1262781  0.1005597    50.977  &lt; 2e-16 ***\norigin_grid_id662        5.0401405  0.1007983    50.002  &lt; 2e-16 ***\norigin_grid_id677        2.1677368  0.1030252    21.041  &lt; 2e-16 ***\norigin_grid_id678        0.0837974  0.1095705     0.765 0.444402    \norigin_grid_id679        4.9591731  0.1005725    49.309  &lt; 2e-16 ***\norigin_grid_id680        5.2089307  0.1005703    51.794  &lt; 2e-16 ***\norigin_grid_id681        3.9165099  0.1008588    38.832  &lt; 2e-16 ***\norigin_grid_id699        1.7047470  0.1029150    16.565  &lt; 2e-16 ***\norigin_grid_id700        3.9027177  0.1006906    38.759  &lt; 2e-16 ***\norigin_grid_id701        3.8146875  0.1006941    37.884  &lt; 2e-16 ***\norigin_grid_id702        4.9249654  0.1005676    48.972  &lt; 2e-16 ***\norigin_grid_id704        1.9668754  0.1054915    18.645  &lt; 2e-16 ***\norigin_grid_id722        1.7606033  0.1020845    17.247  &lt; 2e-16 ***\norigin_grid_id725        1.2649523  0.1095629    11.545  &lt; 2e-16 ***\norigin_grid_id741        2.1870194  0.1018600    21.471  &lt; 2e-16 ***\norigin_grid_id743        2.4472710  0.1012547    24.169  &lt; 2e-16 ***\norigin_grid_id744        4.5099105  0.1006052    44.828  &lt; 2e-16 ***\norigin_grid_id761        1.6440863  0.1041589    15.784  &lt; 2e-16 ***\norigin_grid_id762        3.6979583  0.1007657    36.699  &lt; 2e-16 ***\norigin_grid_id763        0.8948326  0.1042248     8.586  &lt; 2e-16 ***\norigin_grid_id764        5.0109609  0.1005664    49.827  &lt; 2e-16 ***\norigin_grid_id765        3.9728911  0.1008395    39.398  &lt; 2e-16 ***\norigin_grid_id767        6.0294058  0.1005870    59.942  &lt; 2e-16 ***\norigin_grid_id772        0.7912059  0.1238385     6.389 1.67e-10 ***\norigin_grid_id784        1.0625978  0.1032109    10.295  &lt; 2e-16 ***\norigin_grid_id785        4.0932546  0.1006032    40.687  &lt; 2e-16 ***\norigin_grid_id786        3.8354999  0.1006871    38.093  &lt; 2e-16 ***\norigin_grid_id787        4.4551323  0.1007689    44.211  &lt; 2e-16 ***\norigin_grid_id788        5.2662022  0.1006583    52.318  &lt; 2e-16 ***\norigin_grid_id789        3.6682877  0.1010619    36.297  &lt; 2e-16 ***\norigin_grid_id803        0.1111911  0.1117767     0.995 0.319852    \norigin_grid_id804        4.7313779  0.1006005    47.031  &lt; 2e-16 ***\norigin_grid_id805        4.7207822  0.1005695    46.940  &lt; 2e-16 ***\norigin_grid_id806        4.4259721  0.1006014    43.995  &lt; 2e-16 ***\norigin_grid_id807        5.3484813  0.1006086    53.161  &lt; 2e-16 ***\norigin_grid_id808        3.6620207  0.1010993    36.222  &lt; 2e-16 ***\norigin_grid_id809        5.4099169  0.1005771    53.789  &lt; 2e-16 ***\norigin_grid_id810        4.7095997  0.1006816    46.777  &lt; 2e-16 ***\norigin_grid_id814        2.5810485  0.1043753    24.729  &lt; 2e-16 ***\norigin_grid_id819        3.7561272  0.1023096    36.713  &lt; 2e-16 ***\norigin_grid_id824        0.7837517  0.1076402     7.281 3.31e-13 ***\norigin_grid_id826        2.3930232  0.1010028    23.693  &lt; 2e-16 ***\norigin_grid_id827        4.3833388  0.1005871    43.578  &lt; 2e-16 ***\norigin_grid_id828        4.7823126  0.1005796    47.548  &lt; 2e-16 ***\norigin_grid_id829        4.8441939  0.1006160    48.145  &lt; 2e-16 ***\norigin_grid_id830        5.0526308  0.1006499    50.200  &lt; 2e-16 ***\norigin_grid_id831        5.9439337  0.1005592    59.109  &lt; 2e-16 ***\norigin_grid_id832        5.1425163  0.1007238    51.056  &lt; 2e-16 ***\norigin_grid_id835        2.1091597  0.1048142    20.123  &lt; 2e-16 ***\norigin_grid_id844       -0.4297053  0.1272122    -3.378 0.000731 ***\norigin_grid_id846        3.8485414  0.1006471    38.238  &lt; 2e-16 ***\norigin_grid_id847        2.9193538  0.1009016    28.933  &lt; 2e-16 ***\norigin_grid_id848        4.1665119  0.1006236    41.407  &lt; 2e-16 ***\norigin_grid_id849        3.3620329  0.1008125    33.349  &lt; 2e-16 ***\norigin_grid_id850        4.3369276  0.1006580    43.086  &lt; 2e-16 ***\norigin_grid_id851        4.8454382  0.1006011    48.165  &lt; 2e-16 ***\norigin_grid_id852        4.4094388  0.1007076    43.785  &lt; 2e-16 ***\norigin_grid_id853        6.3575190  0.1006139    63.187  &lt; 2e-16 ***\norigin_grid_id854        2.6266377  0.1038389    25.295  &lt; 2e-16 ***\norigin_grid_id855        1.2639370  0.1095562    11.537  &lt; 2e-16 ***\norigin_grid_id856        3.0377137  0.1022053    29.722  &lt; 2e-16 ***\norigin_grid_id866        1.2855175  0.1054801    12.187  &lt; 2e-16 ***\norigin_grid_id867        2.5962607  0.1012037    25.654  &lt; 2e-16 ***\norigin_grid_id868        1.8552974  0.1020430    18.182  &lt; 2e-16 ***\norigin_grid_id869        4.5141388  0.1006881    44.833  &lt; 2e-16 ***\norigin_grid_id870        5.3029269  0.1005560    52.736  &lt; 2e-16 ***\norigin_grid_id871        5.1884479  0.1006901    51.529  &lt; 2e-16 ***\norigin_grid_id872        3.1135357  0.1010892    30.800  &lt; 2e-16 ***\norigin_grid_id873        3.2651075  0.1010161    32.323  &lt; 2e-16 ***\norigin_grid_id874        3.5440632  0.1008411    35.145  &lt; 2e-16 ***\norigin_grid_id875        0.7107845  0.1237791     5.742 9.34e-09 ***\norigin_grid_id876        1.5338072  0.1053731    14.556  &lt; 2e-16 ***\norigin_grid_id877        1.1387974  0.1082642    10.519  &lt; 2e-16 ***\norigin_grid_id887        2.0422141  0.1014066    20.139  &lt; 2e-16 ***\norigin_grid_id888        3.5501859  0.1007416    35.241  &lt; 2e-16 ***\norigin_grid_id889        0.3260152  0.1060708     3.074 0.002115 ** \norigin_grid_id890        4.7500283  0.1005790    47.227  &lt; 2e-16 ***\norigin_grid_id891        3.4513606  0.1011456    34.123  &lt; 2e-16 ***\norigin_grid_id893        4.9170976  0.1005905    48.882  &lt; 2e-16 ***\norigin_grid_id894        3.0127218  0.1010969    29.800  &lt; 2e-16 ***\norigin_grid_id895        2.5844964  0.1016540    25.424  &lt; 2e-16 ***\norigin_grid_id896        1.6652143  0.1036646    16.063  &lt; 2e-16 ***\norigin_grid_id897       -0.2689082  0.1191467    -2.257 0.024011 *  \norigin_grid_id898        2.0528512  0.1046939    19.608  &lt; 2e-16 ***\norigin_grid_id908        3.5128372  0.1012250    34.703  &lt; 2e-16 ***\norigin_grid_id909        3.5431164  0.1006662    35.197  &lt; 2e-16 ***\norigin_grid_id910        1.4845632  0.1019609    14.560  &lt; 2e-16 ***\norigin_grid_id911        2.9605480  0.1008827    29.346  &lt; 2e-16 ***\norigin_grid_id912        4.4813741  0.1006009    44.546  &lt; 2e-16 ***\norigin_grid_id915        4.7858398  0.1006041    47.571  &lt; 2e-16 ***\norigin_grid_id917        4.2021684  0.1007848    41.694  &lt; 2e-16 ***\norigin_grid_id918        0.7839451  0.1068259     7.339 2.16e-13 ***\norigin_grid_id919        3.3396723  0.1009317    33.088  &lt; 2e-16 ***\norigin_grid_id928        2.4356116  0.1014073    24.018  &lt; 2e-16 ***\norigin_grid_id929        3.9118905  0.1006129    38.881  &lt; 2e-16 ***\norigin_grid_id930        4.7904948  0.1005576    47.639  &lt; 2e-16 ***\norigin_grid_id931        1.7752686  0.1018641    17.428  &lt; 2e-16 ***\norigin_grid_id932        2.1872303  0.1020054    21.442  &lt; 2e-16 ***\norigin_grid_id933        4.3768240  0.1006632    43.480  &lt; 2e-16 ***\norigin_grid_id934        1.9471270  0.1019551    19.098  &lt; 2e-16 ***\norigin_grid_id935        5.6716723  0.1005574    56.402  &lt; 2e-16 ***\norigin_grid_id938       -1.7341837  0.2357476    -7.356 1.89e-13 ***\norigin_grid_id939        5.6955427  0.1005967    56.618  &lt; 2e-16 ***\norigin_grid_id940       -0.1018328  0.1172581    -0.868 0.385148    \norigin_grid_id949        2.3283040  0.1012941    22.986  &lt; 2e-16 ***\norigin_grid_id950        4.3880622  0.1006268    43.607  &lt; 2e-16 ***\norigin_grid_id951        5.2490136  0.1005478    52.204  &lt; 2e-16 ***\norigin_grid_id952        1.8882785  0.1026515    18.395  &lt; 2e-16 ***\norigin_grid_id953        3.1305438  0.1009427    31.013  &lt; 2e-16 ***\norigin_grid_id954        1.9705341  0.1018607    19.345  &lt; 2e-16 ***\norigin_grid_id955        4.2355886  0.1006636    42.077  &lt; 2e-16 ***\norigin_grid_id956        2.6416870  0.1011413    26.119  &lt; 2e-16 ***\norigin_grid_id957        4.8207141  0.1006705    47.886  &lt; 2e-16 ***\norigin_grid_id959        0.8790564  0.1116122     7.876 3.38e-15 ***\norigin_grid_id961        0.8635400  0.1048430     8.237  &lt; 2e-16 ***\norigin_grid_id962        6.1636024  0.1007084    61.202  &lt; 2e-16 ***\norigin_grid_id970        2.7113683  0.1008197    26.893  &lt; 2e-16 ***\norigin_grid_id971        4.1022960  0.1005820    40.786  &lt; 2e-16 ***\norigin_grid_id972        3.9189485  0.1006188    38.948  &lt; 2e-16 ***\norigin_grid_id974        3.6078893  0.1007700    35.803  &lt; 2e-16 ***\norigin_grid_id975        3.2625389  0.1008913    32.337  &lt; 2e-16 ***\norigin_grid_id976        1.9465254  0.1018802    19.106  &lt; 2e-16 ***\norigin_grid_id977        5.1596198  0.1005803    51.299  &lt; 2e-16 ***\norigin_grid_id978        5.0252563  0.1007501    49.878  &lt; 2e-16 ***\norigin_grid_id982        2.1992839  0.1015298    21.661  &lt; 2e-16 ***\norigin_grid_id983        6.8136141  0.1005958    67.733  &lt; 2e-16 ***\norigin_grid_id984        5.0347714  0.1011312    49.785  &lt; 2e-16 ***\norigin_grid_id991        2.8019552  0.1008928    27.772  &lt; 2e-16 ***\norigin_grid_id992        3.0350548  0.1007409    30.127  &lt; 2e-16 ***\norigin_grid_id993        2.8067474  0.1007734    27.852  &lt; 2e-16 ***\norigin_grid_id994        2.2855198  0.1010868    22.609  &lt; 2e-16 ***\norigin_grid_id995        3.8262312  0.1006610    38.011  &lt; 2e-16 ***\norigin_grid_id996        3.5494620  0.1007831    35.219  &lt; 2e-16 ***\norigin_grid_id997        2.1436317  0.1046647    20.481  &lt; 2e-16 ***\norigin_grid_id998        5.2726204  0.1005858    52.419  &lt; 2e-16 ***\norigin_grid_id999        5.2984730  0.1006634    52.636  &lt; 2e-16 ***\norigin_grid_id1001       2.1767963  0.1035104    21.030  &lt; 2e-16 ***\norigin_grid_id1003       4.8012089  0.1006088    47.722  &lt; 2e-16 ***\norigin_grid_id1004       5.7077970  0.1005750    56.752  &lt; 2e-16 ***\norigin_grid_id1011       0.8614881  0.1049355     8.210  &lt; 2e-16 ***\norigin_grid_id1012       0.7650877  0.1054263     7.257 3.96e-13 ***\norigin_grid_id1013       1.5710377  0.1017462    15.441  &lt; 2e-16 ***\norigin_grid_id1014       2.3241634  0.1010668    22.996  &lt; 2e-16 ***\norigin_grid_id1015       1.6783658  0.1017501    16.495  &lt; 2e-16 ***\norigin_grid_id1016       3.5248522  0.1007589    34.983  &lt; 2e-16 ***\norigin_grid_id1018       4.1144724  0.1009913    40.741  &lt; 2e-16 ***\norigin_grid_id1019       5.7335314  0.1006251    56.979  &lt; 2e-16 ***\norigin_grid_id1023       3.7863978  0.1009473    37.509  &lt; 2e-16 ***\norigin_grid_id1024       4.8669170  0.1006188    48.370  &lt; 2e-16 ***\norigin_grid_id1025       0.2993671  0.1118946     2.675 0.007463 ** \norigin_grid_id1033       2.2157378  0.1011218    21.912  &lt; 2e-16 ***\norigin_grid_id1034       3.1172778  0.1007625    30.937  &lt; 2e-16 ***\norigin_grid_id1035       3.8199688  0.1006545    37.951  &lt; 2e-16 ***\norigin_grid_id1036       1.9471746  0.1014561    19.192  &lt; 2e-16 ***\norigin_grid_id1037       3.1027504  0.1007480    30.797  &lt; 2e-16 ***\norigin_grid_id1043       2.1307903  0.1036068    20.566  &lt; 2e-16 ***\norigin_grid_id1045       4.5080276  0.1006181    44.803  &lt; 2e-16 ***\norigin_grid_id1046       4.4070782  0.1006453    43.788  &lt; 2e-16 ***\norigin_grid_id1053       3.6849167  0.1006789    36.601  &lt; 2e-16 ***\norigin_grid_id1054       2.6970459  0.1008114    26.753  &lt; 2e-16 ***\norigin_grid_id1055       3.7178619  0.1006443    36.941  &lt; 2e-16 ***\norigin_grid_id1056       2.7157182  0.1009248    26.908  &lt; 2e-16 ***\norigin_grid_id1064      -0.6369328  0.2694889    -2.363 0.018104 *  \norigin_grid_id1066       4.2338620  0.1006462    42.067  &lt; 2e-16 ***\norigin_grid_id1067       4.3853495  0.1007415    43.531  &lt; 2e-16 ***\norigin_grid_id1074       3.0101599  0.1007958    29.864  &lt; 2e-16 ***\norigin_grid_id1075       2.3492335  0.1010138    23.257  &lt; 2e-16 ***\norigin_grid_id1076       2.3998875  0.1008802    23.789  &lt; 2e-16 ***\norigin_grid_id1077       2.5827262  0.1010124    25.568  &lt; 2e-16 ***\norigin_grid_id1079       4.1272911  0.1006352    41.012  &lt; 2e-16 ***\norigin_grid_id1085      -1.7808965  0.1736589   -10.255  &lt; 2e-16 ***\norigin_grid_id1087       4.0919729  0.1006916    40.639  &lt; 2e-16 ***\norigin_grid_id1088       2.4722985  0.1012117    24.427  &lt; 2e-16 ***\norigin_grid_id1094       1.1012231  0.1095518    10.052  &lt; 2e-16 ***\norigin_grid_id1095       0.7388446  0.1057472     6.987 2.81e-12 ***\norigin_grid_id1096       2.3791144  0.1025831    23.192  &lt; 2e-16 ***\norigin_grid_id1097       4.3886237  0.1005830    43.632  &lt; 2e-16 ***\norigin_grid_id1098       2.0296435  0.1021040    19.878  &lt; 2e-16 ***\norigin_grid_id1099       3.3919468  0.1007352    33.672  &lt; 2e-16 ***\norigin_grid_id1105       1.2051145  0.1177519    10.234  &lt; 2e-16 ***\norigin_grid_id1106      -0.3722239  0.1361629    -2.734 0.006263 ** \norigin_grid_id1107       1.8911891  0.1041980    18.150  &lt; 2e-16 ***\norigin_grid_id1108       6.1065959  0.1005564    60.728  &lt; 2e-16 ***\norigin_grid_id1109       3.0392297  0.1010455    30.078  &lt; 2e-16 ***\norigin_grid_id1116       2.7887456  0.1008647    27.648  &lt; 2e-16 ***\norigin_grid_id1117       1.4193058  0.1020136    13.913  &lt; 2e-16 ***\norigin_grid_id1118       1.5497647  0.1023129    15.147  &lt; 2e-16 ***\norigin_grid_id1119       2.7056881  0.1009736    26.796  &lt; 2e-16 ***\norigin_grid_id1120       2.6083230  0.1013564    25.734  &lt; 2e-16 ***\norigin_grid_id1129       4.4968874  0.1006386    44.684  &lt; 2e-16 ***\norigin_grid_id1130       4.5419852  0.1006033    45.147  &lt; 2e-16 ***\norigin_grid_id1131       3.4622620  0.1010336    34.268  &lt; 2e-16 ***\norigin_grid_id1136       1.6319472  0.1016602    16.053  &lt; 2e-16 ***\norigin_grid_id1138       0.8434920  0.1045000     8.072 6.93e-16 ***\norigin_grid_id1139       3.5613558  0.1006455    35.385  &lt; 2e-16 ***\norigin_grid_id1141       3.5407803  0.1007062    35.159  &lt; 2e-16 ***\norigin_grid_id1148       0.9452481  0.1130860     8.359  &lt; 2e-16 ***\norigin_grid_id1149       2.4835229  0.1019892    24.351  &lt; 2e-16 ***\norigin_grid_id1150       4.7672414  0.1005922    47.392  &lt; 2e-16 ***\norigin_grid_id1151       3.6855562  0.1007320    36.588  &lt; 2e-16 ***\norigin_grid_id1158       1.9172337  0.1011160    18.961  &lt; 2e-16 ***\norigin_grid_id1159       3.3595375  0.1006751    33.370  &lt; 2e-16 ***\norigin_grid_id1160       4.3830951  0.1005866    43.575  &lt; 2e-16 ***\norigin_grid_id1171       5.3461543  0.1006047    53.140  &lt; 2e-16 ***\norigin_grid_id1172       5.2077882  0.1005996    51.767  &lt; 2e-16 ***\norigin_grid_id1173       2.4556899  0.1012878    24.245  &lt; 2e-16 ***\norigin_grid_id1174      -1.8605499  0.2856054    -6.514 7.30e-11 ***\norigin_grid_id1178       2.1539826  0.1010431    21.317  &lt; 2e-16 ***\norigin_grid_id1179       2.8481989  0.1007477    28.271  &lt; 2e-16 ***\norigin_grid_id1180       3.8999606  0.1006093    38.763  &lt; 2e-16 ***\norigin_grid_id1181       3.1889484  0.1007277    31.659  &lt; 2e-16 ***\norigin_grid_id1183       2.4842754  0.1011850    24.552  &lt; 2e-16 ***\norigin_grid_id1190       1.4363768  0.1114211    12.891  &lt; 2e-16 ***\norigin_grid_id1192       4.0851841  0.1007191    40.560  &lt; 2e-16 ***\norigin_grid_id1193       4.0815116  0.1006643    40.546  &lt; 2e-16 ***\norigin_grid_id1194       2.3662503  0.1014894    23.315  &lt; 2e-16 ***\norigin_grid_id1200       2.9136318  0.1007380    28.923  &lt; 2e-16 ***\norigin_grid_id1201       2.7722187  0.1007656    27.512  &lt; 2e-16 ***\norigin_grid_id1203       3.6558392  0.1006898    36.308  &lt; 2e-16 ***\norigin_grid_id1204       3.3372293  0.1007472    33.125  &lt; 2e-16 ***\norigin_grid_id1211       0.7147926  0.1343642     5.320 1.04e-07 ***\norigin_grid_id1214       4.8023413  0.1006146    47.730  &lt; 2e-16 ***\norigin_grid_id1215       1.3362164  0.1080841    12.363  &lt; 2e-16 ***\norigin_grid_id1216       0.4260249  0.1083431     3.932 8.42e-05 ***\norigin_grid_id1220       3.9406338  0.1006031    39.170  &lt; 2e-16 ***\norigin_grid_id1221       3.5885341  0.1006215    35.664  &lt; 2e-16 ***\norigin_grid_id1222       3.2745398  0.1009882    32.425  &lt; 2e-16 ***\norigin_grid_id1223       1.5682323  0.1018880    15.392  &lt; 2e-16 ***\norigin_grid_id1224       2.4673404  0.1010741    24.411  &lt; 2e-16 ***\norigin_grid_id1231      -1.5897733  0.2140989    -7.425 1.12e-13 ***\norigin_grid_id1232       0.5214018  0.1503705     3.467 0.000525 ***\norigin_grid_id1235       2.3183710  0.1014589    22.850  &lt; 2e-16 ***\norigin_grid_id1236       2.3417964  0.1014569    23.082  &lt; 2e-16 ***\norigin_grid_id1241       2.1949467  0.1010141    21.729  &lt; 2e-16 ***\norigin_grid_id1242       2.7643524  0.1007478    27.438  &lt; 2e-16 ***\norigin_grid_id1243       3.4401292  0.1006373    34.183  &lt; 2e-16 ***\norigin_grid_id1246       2.6673067  0.1009300    26.427  &lt; 2e-16 ***\norigin_grid_id1256       3.7302947  0.1007994    37.007  &lt; 2e-16 ***\norigin_grid_id1257       4.6277739  0.1006729    45.968  &lt; 2e-16 ***\norigin_grid_id1258       2.6249287  0.1015681    25.844  &lt; 2e-16 ***\norigin_grid_id1262       2.5360267  0.1008542    25.145  &lt; 2e-16 ***\norigin_grid_id1263       3.1310925  0.1006552    31.107  &lt; 2e-16 ***\norigin_grid_id1264       2.1592506  0.1012044    21.336  &lt; 2e-16 ***\norigin_grid_id1265       1.9584003  0.1014737    19.300  &lt; 2e-16 ***\norigin_grid_id1266       3.2696639  0.1008143    32.433  &lt; 2e-16 ***\norigin_grid_id1267       1.3840888  0.1040308    13.305  &lt; 2e-16 ***\norigin_grid_id1272      -0.9424619  0.1531326    -6.155 7.53e-10 ***\norigin_grid_id1273       3.1812913  0.1012360    31.424  &lt; 2e-16 ***\norigin_grid_id1277       4.7790164  0.1006141    47.498  &lt; 2e-16 ***\norigin_grid_id1278       2.2165613  0.1014665    21.845  &lt; 2e-16 ***\norigin_grid_id1283       4.3725501  0.1005917    43.468  &lt; 2e-16 ***\norigin_grid_id1284       3.5369488  0.1006336    35.147  &lt; 2e-16 ***\norigin_grid_id1285       4.2370089  0.1005781    42.127  &lt; 2e-16 ***\norigin_grid_id1286       2.5228864  0.1010188    24.974  &lt; 2e-16 ***\norigin_grid_id1289       0.7274319  0.1106140     6.576 4.82e-11 ***\norigin_grid_id1293      -0.6703094  0.1343508    -4.989 6.06e-07 ***\norigin_grid_id1294       4.6428810  0.1007102    46.101  &lt; 2e-16 ***\norigin_grid_id1295       2.1627027  0.1026173    21.075  &lt; 2e-16 ***\norigin_grid_id1298       3.7840505  0.1007608    37.555  &lt; 2e-16 ***\norigin_grid_id1299       4.1609411  0.1007209    41.312  &lt; 2e-16 ***\norigin_grid_id1304       4.1483232  0.1005964    41.237  &lt; 2e-16 ***\norigin_grid_id1305       3.5371271  0.1006066    35.158  &lt; 2e-16 ***\norigin_grid_id1307       0.0669048  0.1073155     0.623 0.532995    \norigin_grid_id1308       3.3998941  0.1007066    33.760  &lt; 2e-16 ***\norigin_grid_id1310      -0.5365847  0.1682088    -3.190 0.001423 ** \norigin_grid_id1316       1.2098801  0.1058474    11.430  &lt; 2e-16 ***\norigin_grid_id1317       2.8089181  0.1011483    27.770  &lt; 2e-16 ***\norigin_grid_id1318       2.1361506  0.1016793    21.009  &lt; 2e-16 ***\norigin_grid_id1319       5.0449586  0.1006057    50.146  &lt; 2e-16 ***\norigin_grid_id1320       3.5695881  0.1009254    35.369  &lt; 2e-16 ***\norigin_grid_id1325       1.7569647  0.1012640    17.350  &lt; 2e-16 ***\norigin_grid_id1326       3.7221462  0.1006044    36.998  &lt; 2e-16 ***\norigin_grid_id1327       3.5548693  0.1006212    35.329  &lt; 2e-16 ***\norigin_grid_id1328       2.2155836  0.1009559    21.946  &lt; 2e-16 ***\norigin_grid_id1329       2.4754767  0.1011828    24.465  &lt; 2e-16 ***\norigin_grid_id1330       3.3046192  0.1008438    32.770  &lt; 2e-16 ***\norigin_grid_id1331      -1.1539207  0.3178546    -3.630 0.000283 ***\norigin_grid_id1333       2.6994866  0.1012502    26.662  &lt; 2e-16 ***\norigin_grid_id1334       3.0221851  0.1011431    29.880  &lt; 2e-16 ***\norigin_grid_id1335       2.5412515  0.1018622    24.948  &lt; 2e-16 ***\norigin_grid_id1336      -0.1401024  0.1469916    -0.953 0.340523    \norigin_grid_id1337       0.2563201  0.1117075     2.295 0.021758 *  \norigin_grid_id1338      -0.9040905  0.1293539    -6.989 2.76e-12 ***\norigin_grid_id1339       4.9752523  0.1005966    49.457  &lt; 2e-16 ***\norigin_grid_id1340       3.2789256  0.1009173    32.491  &lt; 2e-16 ***\norigin_grid_id1341      -2.2984266  0.7142207    -3.218 0.001290 ** \norigin_grid_id1346       3.4044335  0.1007060    33.806  &lt; 2e-16 ***\norigin_grid_id1347       4.3896419  0.1005794    43.644  &lt; 2e-16 ***\norigin_grid_id1348       2.8113890  0.1007112    27.915  &lt; 2e-16 ***\norigin_grid_id1349       2.6168097  0.1008441    25.949  &lt; 2e-16 ***\norigin_grid_id1350       2.7943318  0.1011343    27.630  &lt; 2e-16 ***\norigin_grid_id1353       2.7239462  0.1009958    26.971  &lt; 2e-16 ***\norigin_grid_id1354       2.5434151  0.1012385    25.123  &lt; 2e-16 ***\norigin_grid_id1355       3.3112040  0.1008709    32.826  &lt; 2e-16 ***\norigin_grid_id1357       2.3827468  0.1022453    23.304  &lt; 2e-16 ***\norigin_grid_id1358       3.6906793  0.1007815    36.621  &lt; 2e-16 ***\norigin_grid_id1359       3.9866891  0.1006616    39.605  &lt; 2e-16 ***\norigin_grid_id1360       4.0281946  0.1006711    40.013  &lt; 2e-16 ***\norigin_grid_id1361       5.1728943  0.1006158    51.412  &lt; 2e-16 ***\norigin_grid_id1362       1.1568080  0.1102240    10.495  &lt; 2e-16 ***\norigin_grid_id1368       2.2345473  0.1008700    22.153  &lt; 2e-16 ***\norigin_grid_id1369       2.0905583  0.1008867    20.722  &lt; 2e-16 ***\norigin_grid_id1370       3.2298680  0.1006442    32.092  &lt; 2e-16 ***\norigin_grid_id1371       2.5946692  0.1010013    25.689  &lt; 2e-16 ***\norigin_grid_id1372       1.8447855  0.1013680    18.199  &lt; 2e-16 ***\norigin_grid_id1373       0.3625623  0.1107999     3.272 0.001067 ** \norigin_grid_id1374       2.0841043  0.1012591    20.582  &lt; 2e-16 ***\norigin_grid_id1375       3.7331039  0.1008138    37.030  &lt; 2e-16 ***\norigin_grid_id1376       3.1145461  0.1012824    30.751  &lt; 2e-16 ***\norigin_grid_id1379       1.2705550  0.1062609    11.957  &lt; 2e-16 ***\norigin_grid_id1380       5.3864010  0.1005736    53.557  &lt; 2e-16 ***\norigin_grid_id1381       4.9578076  0.1005993    49.283  &lt; 2e-16 ***\norigin_grid_id1382       4.3579624  0.1007260    43.266  &lt; 2e-16 ***\norigin_grid_id1383       1.8119421  0.1033737    17.528  &lt; 2e-16 ***\norigin_grid_id1388       2.8295284  0.1007289    28.091  &lt; 2e-16 ***\norigin_grid_id1389       1.9747191  0.1009073    19.570  &lt; 2e-16 ***\norigin_grid_id1390       2.7371981  0.1007404    27.171  &lt; 2e-16 ***\norigin_grid_id1391       2.5525419  0.1008604    25.308  &lt; 2e-16 ***\norigin_grid_id1392       2.3242599  0.1017517    22.842  &lt; 2e-16 ***\norigin_grid_id1393       1.4843224  0.1016303    14.605  &lt; 2e-16 ***\norigin_grid_id1394       2.8966196  0.1008027    28.736  &lt; 2e-16 ***\norigin_grid_id1395       3.0028947  0.1007935    29.793  &lt; 2e-16 ***\norigin_grid_id1396       4.0650554  0.1006484    40.389  &lt; 2e-16 ***\norigin_grid_id1397       4.1297000  0.1006591    41.027  &lt; 2e-16 ***\norigin_grid_id1398       3.0414667  0.1011124    30.080  &lt; 2e-16 ***\norigin_grid_id1400       4.1462606  0.1007414    41.157  &lt; 2e-16 ***\norigin_grid_id1401       4.5210914  0.1006043    44.939  &lt; 2e-16 ***\norigin_grid_id1402       4.5411001  0.1006257    45.129  &lt; 2e-16 ***\norigin_grid_id1404       4.5976414  0.1016809    45.216  &lt; 2e-16 ***\norigin_grid_id1410       3.4319403  0.1006163    34.109  &lt; 2e-16 ***\norigin_grid_id1411       2.3493293  0.1008341    23.299  &lt; 2e-16 ***\norigin_grid_id1412       2.7038919  0.1007139    26.847  &lt; 2e-16 ***\norigin_grid_id1413       3.5832648  0.1006335    35.607  &lt; 2e-16 ***\norigin_grid_id1414       2.8810308  0.1007197    28.604  &lt; 2e-16 ***\norigin_grid_id1415       2.3983567  0.1009402    23.760  &lt; 2e-16 ***\norigin_grid_id1416       3.0257332  0.1007659    30.027  &lt; 2e-16 ***\norigin_grid_id1417       3.2485008  0.1007266    32.251  &lt; 2e-16 ***\norigin_grid_id1418       4.0303423  0.1006384    40.048  &lt; 2e-16 ***\norigin_grid_id1419       3.4990685  0.1007355    34.735  &lt; 2e-16 ***\norigin_grid_id1422       4.5757055  0.1006546    45.459  &lt; 2e-16 ***\norigin_grid_id1423       5.4450693  0.1005909    54.131  &lt; 2e-16 ***\norigin_grid_id1430       3.1363554  0.1006888    31.149  &lt; 2e-16 ***\norigin_grid_id1431       3.1825084  0.1006358    31.624  &lt; 2e-16 ***\norigin_grid_id1432       3.2303867  0.1006325    32.101  &lt; 2e-16 ***\norigin_grid_id1433       1.8999685  0.1017593    18.671  &lt; 2e-16 ***\norigin_grid_id1434       3.4362402  0.1006641    34.136  &lt; 2e-16 ***\norigin_grid_id1435       3.8506336  0.1006002    38.277  &lt; 2e-16 ***\norigin_grid_id1436       0.8248930  0.1030047     8.008 1.16e-15 ***\norigin_grid_id1437       4.0543710  0.1006142    40.296  &lt; 2e-16 ***\norigin_grid_id1438       4.4946626  0.1005771    44.689  &lt; 2e-16 ***\norigin_grid_id1439       5.1117924  0.1005663    50.830  &lt; 2e-16 ***\norigin_grid_id1440       1.4967922  0.1025186    14.600  &lt; 2e-16 ***\norigin_grid_id1442       4.4232773  0.1007435    43.906  &lt; 2e-16 ***\norigin_grid_id1443       5.4707657  0.1005977    54.383  &lt; 2e-16 ***\norigin_grid_id1444       4.4819738  0.1007979    44.465  &lt; 2e-16 ***\norigin_grid_id1452       2.2935213  0.1008065    22.752  &lt; 2e-16 ***\norigin_grid_id1453       2.4251158  0.1007880    24.062  &lt; 2e-16 ***\norigin_grid_id1454       1.4208386  0.1021458    13.910  &lt; 2e-16 ***\norigin_grid_id1455       2.8169396  0.1008432    27.934  &lt; 2e-16 ***\norigin_grid_id1456       3.2415548  0.1006919    32.193  &lt; 2e-16 ***\norigin_grid_id1457       4.0726389  0.1006037    40.482  &lt; 2e-16 ***\norigin_grid_id1458       4.4082592  0.1005883    43.825  &lt; 2e-16 ***\norigin_grid_id1459       3.8628021  0.1006253    38.388  &lt; 2e-16 ***\norigin_grid_id1460       3.1249095  0.1007141    31.028  &lt; 2e-16 ***\norigin_grid_id1461       1.6831894  0.1018888    16.520  &lt; 2e-16 ***\norigin_grid_id1464       5.8400939  0.1005890    58.059  &lt; 2e-16 ***\norigin_grid_id1465       5.3285990  0.1006397    52.947  &lt; 2e-16 ***\norigin_grid_id1472       0.8141996  0.1022796     7.961 1.71e-15 ***\norigin_grid_id1473       1.8530845  0.1009805    18.351  &lt; 2e-16 ***\norigin_grid_id1474       2.9607169  0.1006567    29.414  &lt; 2e-16 ***\norigin_grid_id1475       3.9332763  0.1006030    39.097  &lt; 2e-16 ***\norigin_grid_id1476       3.2270902  0.1007063    32.045  &lt; 2e-16 ***\norigin_grid_id1477       4.7395646  0.1005582    47.133  &lt; 2e-16 ***\norigin_grid_id1478       3.0775867  0.1007148    30.557  &lt; 2e-16 ***\norigin_grid_id1479       3.3030577  0.1006791    32.808  &lt; 2e-16 ***\norigin_grid_id1480       5.0996167  0.1005571    50.714  &lt; 2e-16 ***\norigin_grid_id1481       2.4149061  0.1010131    23.907  &lt; 2e-16 ***\norigin_grid_id1482       2.7102697  0.1013031    26.754  &lt; 2e-16 ***\norigin_grid_id1485       5.2736289  0.1006448    52.398  &lt; 2e-16 ***\norigin_grid_id1494       2.1225955  0.1011913    20.976  &lt; 2e-16 ***\norigin_grid_id1495       2.2462681  0.1008119    22.282  &lt; 2e-16 ***\norigin_grid_id1496       3.3738530  0.1006195    33.531  &lt; 2e-16 ***\norigin_grid_id1497       3.5869503  0.1006470    35.639  &lt; 2e-16 ***\norigin_grid_id1498       4.0225515  0.1005985    39.986  &lt; 2e-16 ***\norigin_grid_id1499       4.2576448  0.1005832    42.330  &lt; 2e-16 ***\norigin_grid_id1500       4.1228590  0.1006585    40.959  &lt; 2e-16 ***\norigin_grid_id1501       4.4120226  0.1005854    43.863  &lt; 2e-16 ***\norigin_grid_id1502       3.8700582  0.1006254    38.460  &lt; 2e-16 ***\norigin_grid_id1506       0.0013834  0.1479099     0.009 0.992537    \norigin_grid_id1515       1.2227138  0.1027065    11.905  &lt; 2e-16 ***\norigin_grid_id1516       2.7413640  0.1007243    27.217  &lt; 2e-16 ***\norigin_grid_id1517       2.9820009  0.1007378    29.602  &lt; 2e-16 ***\norigin_grid_id1518       2.9725528  0.1007741    29.497  &lt; 2e-16 ***\norigin_grid_id1519       4.2457425  0.1006345    42.190  &lt; 2e-16 ***\norigin_grid_id1520       2.9696923  0.1007470    29.477  &lt; 2e-16 ***\norigin_grid_id1521       2.2370682  0.1011017    22.127  &lt; 2e-16 ***\norigin_grid_id1522       4.6088807  0.1005777    45.824  &lt; 2e-16 ***\norigin_grid_id1523       3.1345077  0.1016156    30.847  &lt; 2e-16 ***\norigin_grid_id1524       3.3176595  0.1009326    32.870  &lt; 2e-16 ***\norigin_grid_id1527       3.3155534  0.1017748    32.577  &lt; 2e-16 ***\norigin_grid_id1535       0.1327087  0.1241944     1.069 0.285270    \norigin_grid_id1536       0.4129481  0.1055801     3.911 9.18e-05 ***\norigin_grid_id1537       1.5233084  0.1017040    14.978  &lt; 2e-16 ***\norigin_grid_id1538       2.8782570  0.1006917    28.585  &lt; 2e-16 ***\norigin_grid_id1539       3.3380640  0.1006391    33.169  &lt; 2e-16 ***\norigin_grid_id1540       3.9030360  0.1006066    38.795  &lt; 2e-16 ***\norigin_grid_id1541       5.1243309  0.1006500    50.912  &lt; 2e-16 ***\norigin_grid_id1542       2.1338642  0.1015343    21.016  &lt; 2e-16 ***\norigin_grid_id1543       2.9539757  0.1024173    28.843  &lt; 2e-16 ***\norigin_grid_id1544       3.8345493  0.1007187    38.072  &lt; 2e-16 ***\norigin_grid_id1547       0.7217690  0.1159596     6.224 4.84e-10 ***\norigin_grid_id1556       0.9481571  0.1157866     8.189 2.64e-16 ***\norigin_grid_id1557       0.6353198  0.1051260     6.043 1.51e-09 ***\norigin_grid_id1558       1.7823313  0.1020399    17.467  &lt; 2e-16 ***\norigin_grid_id1559       3.5107520  0.1006228    34.890  &lt; 2e-16 ***\norigin_grid_id1560       4.3266778  0.1005786    43.018  &lt; 2e-16 ***\norigin_grid_id1561       4.1563192  0.1006169    41.308  &lt; 2e-16 ***\norigin_grid_id1562       1.2569525  0.1022977    12.287  &lt; 2e-16 ***\norigin_grid_id1563       3.0434198  0.1007635    30.204  &lt; 2e-16 ***\norigin_grid_id1564       2.1746220  0.1013057    21.466  &lt; 2e-16 ***\norigin_grid_id1565       2.2654310  0.1013894    22.344  &lt; 2e-16 ***\norigin_grid_id1566       2.0122902  0.1023167    19.667  &lt; 2e-16 ***\norigin_grid_id1567       0.0382080  0.1263375     0.302 0.762326    \norigin_grid_id1568       0.8954377  0.1177410     7.605 2.85e-14 ***\norigin_grid_id1578      -2.1446963  0.7142507    -3.003 0.002676 ** \norigin_grid_id1580       2.0595448  0.1015958    20.272  &lt; 2e-16 ***\norigin_grid_id1581       0.7291948  0.1023999     7.121 1.07e-12 ***\norigin_grid_id1582       4.0320061  0.1005859    40.085  &lt; 2e-16 ***\norigin_grid_id1583       2.2274111  0.1024370    21.744  &lt; 2e-16 ***\norigin_grid_id1584       2.5495678  0.1009988    25.244  &lt; 2e-16 ***\norigin_grid_id1585       3.2299253  0.1008975    32.012  &lt; 2e-16 ***\norigin_grid_id1586       2.2603301  0.1012276    22.329  &lt; 2e-16 ***\norigin_grid_id1589      -0.6295467  0.1503799    -4.186 2.83e-05 ***\norigin_grid_id1590       0.9474717  0.1158147     8.181 2.82e-16 ***\norigin_grid_id1600       4.1182981  0.1009888    40.780  &lt; 2e-16 ***\norigin_grid_id1601       2.6316482  0.1007697    26.115  &lt; 2e-16 ***\norigin_grid_id1602       3.2842180  0.1006845    32.619  &lt; 2e-16 ***\norigin_grid_id1603       4.2333584  0.1005896    42.085  &lt; 2e-16 ***\norigin_grid_id1604       2.7214039  0.1007975    26.999  &lt; 2e-16 ***\norigin_grid_id1605       4.1136780  0.1006006    40.891  &lt; 2e-16 ***\norigin_grid_id1606       3.6081569  0.1009097    35.756  &lt; 2e-16 ***\norigin_grid_id1607       2.8470385  0.1009325    28.207  &lt; 2e-16 ***\norigin_grid_id1608       4.9239376  0.1006113    48.940  &lt; 2e-16 ***\norigin_grid_id1609       4.7884455  0.1006668    47.567  &lt; 2e-16 ***\norigin_grid_id1610       1.3190350  0.1182788    11.152  &lt; 2e-16 ***\norigin_grid_id1622       2.6859349  0.1025417    26.194  &lt; 2e-16 ***\norigin_grid_id1623       4.0005081  0.1005923    39.770  &lt; 2e-16 ***\norigin_grid_id1624       2.7460979  0.1008226    27.237  &lt; 2e-16 ***\norigin_grid_id1625       4.1462021  0.1006160    41.208  &lt; 2e-16 ***\norigin_grid_id1626       4.8257589  0.1005700    47.984  &lt; 2e-16 ***\norigin_grid_id1627       3.2379435  0.1007415    32.141  &lt; 2e-16 ***\norigin_grid_id1628       4.9272164  0.1005747    48.991  &lt; 2e-16 ***\norigin_grid_id1629       3.8790806  0.1007370    38.507  &lt; 2e-16 ***\norigin_grid_id1630       3.9791176  0.1008061    39.473  &lt; 2e-16 ***\norigin_grid_id1631       0.3948514  0.1166572     3.385 0.000713 ***\norigin_grid_id1642       1.4862428  0.1041546    14.270  &lt; 2e-16 ***\norigin_grid_id1643       3.9044264  0.1006078    38.808  &lt; 2e-16 ***\norigin_grid_id1644       1.6849010  0.1017498    16.559  &lt; 2e-16 ***\norigin_grid_id1645       3.2044720  0.1006862    31.826  &lt; 2e-16 ***\norigin_grid_id1646       2.9891895  0.1008773    29.632  &lt; 2e-16 ***\norigin_grid_id1647       3.4508469  0.1006648    34.281  &lt; 2e-16 ***\norigin_grid_id1648       4.0648969  0.1006226    40.397  &lt; 2e-16 ***\norigin_grid_id1649       4.7935888  0.1005832    47.658  &lt; 2e-16 ***\norigin_grid_id1650       4.8815531  0.1006509    48.500  &lt; 2e-16 ***\norigin_grid_id1664      -1.1445862  0.1947593    -5.877 4.18e-09 ***\norigin_grid_id1665       4.1137424  0.1005901    40.896  &lt; 2e-16 ***\norigin_grid_id1666       2.8296131  0.1007403    28.088  &lt; 2e-16 ***\norigin_grid_id1667       3.7158255  0.1010434    36.775  &lt; 2e-16 ***\norigin_grid_id1668       3.9387643  0.1006193    39.145  &lt; 2e-16 ***\norigin_grid_id1670       4.8337494  0.1005735    48.062  &lt; 2e-16 ***\norigin_grid_id1671       5.4949412  0.1006476    54.596  &lt; 2e-16 ***\norigin_grid_id1672       5.1065597  0.1006847    50.718  &lt; 2e-16 ***\norigin_grid_id1684       3.2161481  0.1012001    31.780  &lt; 2e-16 ***\norigin_grid_id1685       3.6690793  0.1006488    36.454  &lt; 2e-16 ***\norigin_grid_id1686       3.5298210  0.1006508    35.070  &lt; 2e-16 ***\norigin_grid_id1687       3.1328725  0.1007701    31.089  &lt; 2e-16 ***\norigin_grid_id1688       2.7135918  0.1008416    26.909  &lt; 2e-16 ***\norigin_grid_id1689       2.3058767  0.1012108    22.783  &lt; 2e-16 ***\norigin_grid_id1690       3.7123030  0.1007179    36.858  &lt; 2e-16 ***\norigin_grid_id1691       4.5207135  0.1006101    44.933  &lt; 2e-16 ***\norigin_grid_id1692       4.1124414  0.1008256    40.788  &lt; 2e-16 ***\norigin_grid_id1706       3.6488350  0.1006993    36.235  &lt; 2e-16 ***\norigin_grid_id1707       3.5411452  0.1006343    35.188  &lt; 2e-16 ***\norigin_grid_id1708       4.0511619  0.1005960    40.272  &lt; 2e-16 ***\norigin_grid_id1709       3.1391249  0.1007256    31.165  &lt; 2e-16 ***\norigin_grid_id1710       4.4094441  0.1006002    43.831  &lt; 2e-16 ***\norigin_grid_id1711       4.2417687  0.1006321    42.151  &lt; 2e-16 ***\norigin_grid_id1712       4.8513797  0.1005728    48.237  &lt; 2e-16 ***\norigin_grid_id1713       2.4763553  0.1012613    24.455  &lt; 2e-16 ***\norigin_grid_id1714       5.0852268  0.1006237    50.537  &lt; 2e-16 ***\norigin_grid_id1727       3.8313820  0.1006469    38.068  &lt; 2e-16 ***\norigin_grid_id1728       3.6888818  0.1006259    36.659  &lt; 2e-16 ***\norigin_grid_id1729       3.2052197  0.1006686    31.839  &lt; 2e-16 ***\norigin_grid_id1730       1.3253302  0.1024817    12.932  &lt; 2e-16 ***\norigin_grid_id1731       3.8163167  0.1006582    37.914  &lt; 2e-16 ***\norigin_grid_id1732       4.5316252  0.1005834    45.053  &lt; 2e-16 ***\norigin_grid_id1733       4.2437265  0.1006154    42.178  &lt; 2e-16 ***\norigin_grid_id1734       4.6751832  0.1006088    46.469  &lt; 2e-16 ***\norigin_grid_id1735       6.3483255  0.1007258    63.026  &lt; 2e-16 ***\norigin_grid_id1748       2.6177494  0.1009359    25.935  &lt; 2e-16 ***\norigin_grid_id1749       3.5480662  0.1006368    35.256  &lt; 2e-16 ***\norigin_grid_id1750       2.6735323  0.1007690    26.531  &lt; 2e-16 ***\norigin_grid_id1751       2.0171433  0.1010705    19.958  &lt; 2e-16 ***\norigin_grid_id1753       4.5520608  0.1005911    45.253  &lt; 2e-16 ***\norigin_grid_id1754       4.9204149  0.1005722    48.924  &lt; 2e-16 ***\norigin_grid_id1755       4.4074129  0.1006133    43.805  &lt; 2e-16 ***\norigin_grid_id1756       4.3869449  0.1006563    43.583  &lt; 2e-16 ***\norigin_grid_id1757       2.8491183  0.1035141    27.524  &lt; 2e-16 ***\norigin_grid_id1769       3.4234471  0.1006767    34.004  &lt; 2e-16 ***\norigin_grid_id1770       3.0592310  0.1009722    30.298  &lt; 2e-16 ***\norigin_grid_id1771       2.2548490  0.1010019    22.325  &lt; 2e-16 ***\norigin_grid_id1772       1.0439719  0.1032640    10.110  &lt; 2e-16 ***\norigin_grid_id1774       4.2508407  0.1006077    42.252  &lt; 2e-16 ***\norigin_grid_id1775       3.9215855  0.1006620    38.958  &lt; 2e-16 ***\norigin_grid_id1776       5.1148192  0.1005772    50.855  &lt; 2e-16 ***\norigin_grid_id1777       5.1689146  0.1005984    51.382  &lt; 2e-16 ***\norigin_grid_id1778       4.9281344  0.1012081    48.693  &lt; 2e-16 ***\norigin_grid_id1790       4.0774412  0.1006320    40.518  &lt; 2e-16 ***\norigin_grid_id1791       3.3827877  0.1007111    33.589  &lt; 2e-16 ***\norigin_grid_id1792       3.3992131  0.1007268    33.747  &lt; 2e-16 ***\norigin_grid_id1793       1.4114713  0.1014137    13.918  &lt; 2e-16 ***\norigin_grid_id1794       1.1452278  0.1042671    10.984  &lt; 2e-16 ***\norigin_grid_id1795       0.7158131  0.1057234     6.771 1.28e-11 ***\norigin_grid_id1796       4.7872384  0.1006050    47.584  &lt; 2e-16 ***\norigin_grid_id1797       4.7573935  0.1005939    47.293  &lt; 2e-16 ***\norigin_grid_id1798       4.7830419  0.1005959    47.547  &lt; 2e-16 ***\norigin_grid_id1799       4.0119880  0.1008060    39.799  &lt; 2e-16 ***\norigin_grid_id1800       3.1141066  0.1044392    29.817  &lt; 2e-16 ***\norigin_grid_id1811       3.1170981  0.1007748    30.931  &lt; 2e-16 ***\norigin_grid_id1812       4.3021991  0.1005817    42.773  &lt; 2e-16 ***\norigin_grid_id1813       4.0797299  0.1005938    40.556  &lt; 2e-16 ***\norigin_grid_id1817       4.6441869  0.1006552    46.140  &lt; 2e-16 ***\norigin_grid_id1818       4.6186246  0.1006151    45.904  &lt; 2e-16 ***\norigin_grid_id1819       5.1297033  0.1005889    50.997  &lt; 2e-16 ***\norigin_grid_id1820       2.3101621  0.1059309    21.808  &lt; 2e-16 ***\norigin_grid_id1832       3.9010266  0.1006526    38.757  &lt; 2e-16 ***\norigin_grid_id1833       3.3627819  0.1006878    33.398  &lt; 2e-16 ***\norigin_grid_id1834       3.6904959  0.1006201    36.678  &lt; 2e-16 ***\norigin_grid_id1835       2.9844809  0.1007811    29.613  &lt; 2e-16 ***\norigin_grid_id1837       0.3208871  0.1175279     2.730 0.006328 ** \norigin_grid_id1839       4.2462128  0.1007322    42.153  &lt; 2e-16 ***\norigin_grid_id1840       5.8897490  0.1005596    58.570  &lt; 2e-16 ***\norigin_grid_id1841       1.7686041  0.1062646    16.643  &lt; 2e-16 ***\norigin_grid_id1842       5.8202838  0.1011030    57.568  &lt; 2e-16 ***\norigin_grid_id1853       3.7325773  0.1006382    37.089  &lt; 2e-16 ***\norigin_grid_id1854       3.9900272  0.1006231    39.653  &lt; 2e-16 ***\norigin_grid_id1855       4.2622670  0.1006035    42.367  &lt; 2e-16 ***\norigin_grid_id1858       2.0220690  0.1036803    19.503  &lt; 2e-16 ***\norigin_grid_id1860       5.4050605  0.1008721    53.583  &lt; 2e-16 ***\norigin_grid_id1861       4.8537590  0.1006237    48.237  &lt; 2e-16 ***\norigin_grid_id1874       3.9428874  0.1006948    39.157  &lt; 2e-16 ***\norigin_grid_id1875       2.3070024  0.1012736    22.780  &lt; 2e-16 ***\norigin_grid_id1876       4.3889490  0.1010234    43.445  &lt; 2e-16 ***\norigin_grid_id1877       3.9736923  0.1006302    39.488  &lt; 2e-16 ***\norigin_grid_id1880       0.3286018  0.1126027     2.918 0.003520 ** \norigin_grid_id1882       4.7065999  0.1006388    46.767  &lt; 2e-16 ***\norigin_grid_id1883       5.1953716  0.1009170    51.482  &lt; 2e-16 ***\norigin_grid_id1895       4.0678392  0.1006256    40.425  &lt; 2e-16 ***\norigin_grid_id1896       2.3626390  0.1009814    23.397  &lt; 2e-16 ***\norigin_grid_id1897       3.0443700  0.1008997    30.172  &lt; 2e-16 ***\norigin_grid_id1898      -1.2515881  0.1662989    -7.526 5.23e-14 ***\norigin_grid_id1901       0.5863180  0.1165310     5.031 4.87e-07 ***\norigin_grid_id1903       4.2777485  0.1009006    42.396  &lt; 2e-16 ***\norigin_grid_id1917       2.6855605  0.1009153    26.612  &lt; 2e-16 ***\norigin_grid_id1918       4.0678938  0.1006793    40.404  &lt; 2e-16 ***\norigin_grid_id1919       3.9555606  0.1006467    39.301  &lt; 2e-16 ***\norigin_grid_id1922       1.7967343  0.1044491    17.202  &lt; 2e-16 ***\norigin_grid_id1924       4.4188526  0.1009390    43.777  &lt; 2e-16 ***\norigin_grid_id1937       3.4624764  0.1007389    34.371  &lt; 2e-16 ***\norigin_grid_id1938       4.0631358  0.1006146    40.383  &lt; 2e-16 ***\norigin_grid_id1939       4.6540762  0.1006007    46.263  &lt; 2e-16 ***\norigin_grid_id1942       0.3962729  0.1109685     3.571 0.000356 ***\norigin_grid_id1959       3.0228429  0.1008684    29.968  &lt; 2e-16 ***\norigin_grid_id1960       5.0021908  0.1005608    49.743  &lt; 2e-16 ***\norigin_grid_id1961       3.4226535  0.1007411    33.975  &lt; 2e-16 ***\norigin_grid_id1962       4.4113117  0.1006101    43.846  &lt; 2e-16 ***\norigin_grid_id1964      -0.5519651  0.1336987    -4.128 3.65e-05 ***\norigin_grid_id1979       3.3374227  0.1008091    33.106  &lt; 2e-16 ***\norigin_grid_id1980       1.6172595  0.1014249    15.945  &lt; 2e-16 ***\norigin_grid_id1981       4.0489579  0.1006115    40.243  &lt; 2e-16 ***\norigin_grid_id1982       3.1324243  0.1010861    30.988  &lt; 2e-16 ***\norigin_grid_id1983       4.3593573  0.1006124    43.328  &lt; 2e-16 ***\norigin_grid_id1984       3.1295691  0.1007930    31.049  &lt; 2e-16 ***\norigin_grid_id1985       3.8102956  0.1007098    37.834  &lt; 2e-16 ***\norigin_grid_id2001       3.6242423  0.1006837    35.996  &lt; 2e-16 ***\norigin_grid_id2002       4.1862925  0.1005896    41.618  &lt; 2e-16 ***\norigin_grid_id2003       3.7833828  0.1006436    37.592  &lt; 2e-16 ***\norigin_grid_id2004       4.4535510  0.1006050    44.268  &lt; 2e-16 ***\norigin_grid_id2005       4.3297995  0.1006053    43.037  &lt; 2e-16 ***\norigin_grid_id2006       2.8817570  0.1009274    28.553  &lt; 2e-16 ***\norigin_grid_id2007       2.2909232  0.1017462    22.516  &lt; 2e-16 ***\norigin_grid_id2022       4.0219651  0.1006811    39.948  &lt; 2e-16 ***\norigin_grid_id2023       4.4408197  0.1005871    44.149  &lt; 2e-16 ***\norigin_grid_id2024       3.7553065  0.1006278    37.319  &lt; 2e-16 ***\norigin_grid_id2025       3.7871290  0.1006237    37.637  &lt; 2e-16 ***\norigin_grid_id2026       2.3932194  0.1011685    23.656  &lt; 2e-16 ***\norigin_grid_id2027       4.6951407  0.1005997    46.672  &lt; 2e-16 ***\norigin_grid_id2043       3.3456672  0.1007940    33.193  &lt; 2e-16 ***\norigin_grid_id2044       4.0567195  0.1006070    40.322  &lt; 2e-16 ***\norigin_grid_id2045      -0.4975994  0.1250448    -3.979 6.91e-05 ***\norigin_grid_id2046       3.9985911  0.1005938    39.750  &lt; 2e-16 ***\norigin_grid_id2047       3.8112475  0.1006477    37.867  &lt; 2e-16 ***\norigin_grid_id2048       4.0323530  0.1006251    40.073  &lt; 2e-16 ***\norigin_grid_id2049       3.0542263  0.1014419    30.108  &lt; 2e-16 ***\norigin_grid_id2064       4.0562145  0.1006357    40.306  &lt; 2e-16 ***\norigin_grid_id2065       2.5220329  0.1008528    25.007  &lt; 2e-16 ***\norigin_grid_id2066       2.0798188  0.1025924    20.273  &lt; 2e-16 ***\norigin_grid_id2067       5.2479415  0.1005569    52.189  &lt; 2e-16 ***\norigin_grid_id2068       3.6153639  0.1007453    35.886  &lt; 2e-16 ***\norigin_grid_id2069       3.9044004  0.1006677    38.785  &lt; 2e-16 ***\norigin_grid_id2085       2.9227504  0.1009377    28.956  &lt; 2e-16 ***\norigin_grid_id2086       4.3142789  0.1006013    42.885  &lt; 2e-16 ***\norigin_grid_id2087       2.9661991  0.1007674    29.436  &lt; 2e-16 ***\norigin_grid_id2088       3.6657962  0.1006208    36.432  &lt; 2e-16 ***\norigin_grid_id2089       3.3736566  0.1007243    33.494  &lt; 2e-16 ***\norigin_grid_id2090       4.9244517  0.1005790    48.961  &lt; 2e-16 ***\norigin_grid_id2091       0.2337630  0.1213276     1.927 0.054016 .  \norigin_grid_id2105       0.8000331  0.1425294     5.613 1.99e-08 ***\norigin_grid_id2106       1.2724073  0.1022394    12.445  &lt; 2e-16 ***\norigin_grid_id2107       2.3446444  0.1009290    23.231  &lt; 2e-16 ***\norigin_grid_id2108       3.6596802  0.1006619    36.356  &lt; 2e-16 ***\norigin_grid_id2109       3.7199323  0.1006192    36.970  &lt; 2e-16 ***\norigin_grid_id2110       3.1737055  0.1007692    31.495  &lt; 2e-16 ***\norigin_grid_id2111       0.5692312  0.1079130     5.275 1.33e-07 ***\norigin_grid_id2128       2.2027967  0.1013435    21.736  &lt; 2e-16 ***\norigin_grid_id2129       1.5472332  0.1015429    15.237  &lt; 2e-16 ***\norigin_grid_id2130       4.1531276  0.1005944    41.286  &lt; 2e-16 ***\norigin_grid_id2131       4.5223527  0.1006184    44.946  &lt; 2e-16 ***\norigin_grid_id2132       3.4817169  0.1006912    34.578  &lt; 2e-16 ***\norigin_grid_id2148       3.0521468  0.1011107    30.186  &lt; 2e-16 ***\norigin_grid_id2149       1.4400809  0.1016906    14.161  &lt; 2e-16 ***\norigin_grid_id2150       4.0641147  0.1006218    40.390  &lt; 2e-16 ***\norigin_grid_id2151       4.5369902  0.1005806    45.108  &lt; 2e-16 ***\norigin_grid_id2152       4.7146832  0.1005891    46.871  &lt; 2e-16 ***\norigin_grid_id2153       4.0209270  0.1006721    39.941  &lt; 2e-16 ***\norigin_grid_id2171       3.0533097  0.1007634    30.302  &lt; 2e-16 ***\norigin_grid_id2172       3.2142958  0.1008110    31.884  &lt; 2e-16 ***\norigin_grid_id2173       3.6715772  0.1006482    36.479  &lt; 2e-16 ***\norigin_grid_id2174       3.9970690  0.1006534    39.711  &lt; 2e-16 ***\norigin_grid_id2191       2.5111112  0.1010456    24.851  &lt; 2e-16 ***\norigin_grid_id2192       2.4253670  0.1010864    23.993  &lt; 2e-16 ***\norigin_grid_id2193       3.3873068  0.1007028    33.637  &lt; 2e-16 ***\norigin_grid_id2194       3.8407030  0.1006444    38.161  &lt; 2e-16 ***\norigin_grid_id2195       3.2271143  0.1024944    31.486  &lt; 2e-16 ***\norigin_grid_id2212       0.2943648  0.1284221     2.292 0.021896 *  \norigin_grid_id2213       0.3322942  0.1074955     3.091 0.001993 ** \norigin_grid_id2214       1.0706932  0.1034615    10.349  &lt; 2e-16 ***\norigin_grid_id2215       3.5410809  0.1007363    35.152  &lt; 2e-16 ***\norigin_grid_id2216       2.4980490  0.1010813    24.713  &lt; 2e-16 ***\norigin_grid_id2233       0.7703131  0.1077745     7.147 8.84e-13 ***\norigin_grid_id2234       2.0347469  0.1024549    19.860  &lt; 2e-16 ***\norigin_grid_id2235       2.2800245  0.1013670    22.493  &lt; 2e-16 ***\norigin_grid_id2236       2.2396412  0.1013006    22.109  &lt; 2e-16 ***\norigin_grid_id2237       0.1375375  0.1138619     1.208 0.227073    \norigin_grid_id2256      -0.3767168  0.1124378    -3.350 0.000807 ***\norigin_grid_id2257       2.0416928  0.1022003    19.977  &lt; 2e-16 ***\norigin_grid_id2258       1.2968628  0.1020400    12.709  &lt; 2e-16 ***\norigin_grid_id2259       1.1462774  0.1065370    10.759  &lt; 2e-16 ***\norigin_grid_id2277       1.9571397  0.1079238    18.134  &lt; 2e-16 ***\norigin_grid_id2278       2.7199473  0.1016241    26.765  &lt; 2e-16 ***\norigin_grid_id2279       1.1854710  0.1023233    11.586  &lt; 2e-16 ***\norigin_grid_id2280      -0.5899908  0.1422468    -4.148 3.36e-05 ***\norigin_grid_id2297       3.9205785  0.1008984    38.857  &lt; 2e-16 ***\norigin_grid_id2300       0.0381308  0.1168398     0.326 0.744159    \norigin_grid_id2301       1.5560566  0.1021653    15.231  &lt; 2e-16 ***\norigin_grid_id2318       2.0202666  0.1021497    19.778  &lt; 2e-16 ***\norigin_grid_id2319       2.7427434  0.1010331    27.147  &lt; 2e-16 ***\norigin_grid_id2322       2.6261686  0.1012508    25.937  &lt; 2e-16 ***\norigin_grid_id2337       3.5916346  0.1020331    35.201  &lt; 2e-16 ***\norigin_grid_id2341       3.1987808  0.1009382    31.690  &lt; 2e-16 ***\norigin_grid_id2343       1.9090740  0.1014986    18.809  &lt; 2e-16 ***\norigin_grid_id2361       2.5386651  0.1010807    25.115  &lt; 2e-16 ***\norigin_grid_id2364      -0.7373475  0.1194358    -6.174 6.68e-10 ***\norigin_grid_id2379       2.7444726  0.1026347    26.740  &lt; 2e-16 ***\norigin_grid_id2384       1.9645571  0.1015858    19.339  &lt; 2e-16 ***\norigin_grid_id2405       1.6624189  0.1015957    16.363  &lt; 2e-16 ***\norigin_grid_id2406       0.2898969  0.1058933     2.738 0.006188 ** \norigin_grid_id2426       1.1778628  0.1039916    11.327  &lt; 2e-16 ***\norigin_grid_id2427       2.7118289  0.1011142    26.819  &lt; 2e-16 ***\norigin_grid_id2505       2.8843163  0.1071332    26.923  &lt; 2e-16 ***\ndestination_grid_id44    1.3494744  0.0506990    26.617  &lt; 2e-16 ***\ndestination_grid_id46    0.1275742  0.0508751     2.508 0.012155 *  \ndestination_grid_id66   -0.4155228  0.0634295    -6.551 5.72e-11 ***\ndestination_grid_id67    0.2343656  0.0485647     4.826 1.39e-06 ***\ndestination_grid_id68   -0.2028610  0.0507591    -3.997 6.43e-05 ***\ndestination_grid_id86    0.2637023  0.0576226     4.576 4.73e-06 ***\ndestination_grid_id87   -3.3473882  0.0996310   -33.598  &lt; 2e-16 ***\ndestination_grid_id88   -0.3219440  0.0495825    -6.493 8.41e-11 ***\ndestination_grid_id89   -1.1574027  0.0520669   -22.229  &lt; 2e-16 ***\ndestination_grid_id90   -3.3320785  0.5024202    -6.632 3.31e-11 ***\ndestination_grid_id109  -0.8778777  0.0531132   -16.528  &lt; 2e-16 ***\ndestination_grid_id110  -3.3170508  0.1106933   -29.966  &lt; 2e-16 ***\ndestination_grid_id111   0.9546352  0.0478265    19.960  &lt; 2e-16 ***\ndestination_grid_id112  -2.5536125  0.0553319   -46.151  &lt; 2e-16 ***\ndestination_grid_id128   1.0917734  0.0515169    21.193  &lt; 2e-16 ***\ndestination_grid_id129  -4.4567891  0.1229451   -36.250  &lt; 2e-16 ***\ndestination_grid_id130  -0.9134626  0.0515026   -17.736  &lt; 2e-16 ***\ndestination_grid_id131  -1.3919528  0.0526665   -26.430  &lt; 2e-16 ***\ndestination_grid_id132  -0.6001134  0.0486908   -12.325  &lt; 2e-16 ***\ndestination_grid_id133  -1.0565416  0.0480564   -21.985  &lt; 2e-16 ***\ndestination_grid_id134  -0.9289818  0.0478878   -19.399  &lt; 2e-16 ***\ndestination_grid_id150  -0.5904715  0.0571092   -10.339  &lt; 2e-16 ***\ndestination_grid_id151  -0.6599148  0.0511951   -12.890  &lt; 2e-16 ***\ndestination_grid_id152   0.4326517  0.0487328     8.878  &lt; 2e-16 ***\ndestination_grid_id153  -0.2863319  0.0485539    -5.897 3.70e-09 ***\ndestination_grid_id154  -2.4614173  0.0536840   -45.850  &lt; 2e-16 ***\ndestination_grid_id155  -1.7831633  0.0495650   -35.976  &lt; 2e-16 ***\ndestination_grid_id156  -1.7429820  0.0505189   -34.502  &lt; 2e-16 ***\ndestination_grid_id172  -1.8829209  0.0645565   -29.167  &lt; 2e-16 ***\ndestination_grid_id174  -1.3167945  0.0490652   -26.838  &lt; 2e-16 ***\ndestination_grid_id175  -0.7777050  0.0475705   -16.348  &lt; 2e-16 ***\ndestination_grid_id176  -2.3031148  0.0544518   -42.296  &lt; 2e-16 ***\ndestination_grid_id195  -2.7581981  0.0555933   -49.614  &lt; 2e-16 ***\ndestination_grid_id196  -1.2549546  0.0476724   -26.325  &lt; 2e-16 ***\ndestination_grid_id197  -3.6359816  0.0986835   -36.845  &lt; 2e-16 ***\ndestination_grid_id215  -0.6354936  0.0543097   -11.701  &lt; 2e-16 ***\ndestination_grid_id216  -0.8576393  0.0491567   -17.447  &lt; 2e-16 ***\ndestination_grid_id217  -0.5144402  0.0474791   -10.835  &lt; 2e-16 ***\ndestination_grid_id237  -2.8223988  0.0548108   -51.493  &lt; 2e-16 ***\ndestination_grid_id238  -1.9208598  0.0489280   -39.259  &lt; 2e-16 ***\ndestination_grid_id239  -2.0684243  0.0551759   -37.488  &lt; 2e-16 ***\ndestination_grid_id257   0.2228374  0.0491733     4.532 5.85e-06 ***\ndestination_grid_id258  -1.8052507  0.0505820   -35.690  &lt; 2e-16 ***\ndestination_grid_id259  -0.6998575  0.0481667   -14.530  &lt; 2e-16 ***\ndestination_grid_id278   0.2719870  0.0492898     5.518 3.43e-08 ***\ndestination_grid_id279  -1.2530982  0.0483881   -25.897  &lt; 2e-16 ***\ndestination_grid_id280  -0.9074392  0.0482545   -18.805  &lt; 2e-16 ***\ndestination_grid_id298  -3.9448093  0.1405476   -28.067  &lt; 2e-16 ***\ndestination_grid_id299  -0.9803763  0.0494211   -19.837  &lt; 2e-16 ***\ndestination_grid_id300  -1.4970800  0.0496358   -30.161  &lt; 2e-16 ***\ndestination_grid_id320   0.2552443  0.0487345     5.237 1.63e-07 ***\ndestination_grid_id321  -1.8180928  0.0521240   -34.880  &lt; 2e-16 ***\ndestination_grid_id322  -0.7422855  0.0481174   -15.427  &lt; 2e-16 ***\ndestination_grid_id340   1.0476380  0.0480506    21.803  &lt; 2e-16 ***\ndestination_grid_id341  -0.2052508  0.0481684    -4.261 2.03e-05 ***\ndestination_grid_id342  -0.7376899  0.0478381   -15.421  &lt; 2e-16 ***\ndestination_grid_id363  -0.8621160  0.0486722   -17.713  &lt; 2e-16 ***\ndestination_grid_id364  -0.7618550  0.0473584   -16.087  &lt; 2e-16 ***\ndestination_grid_id383   0.1679606  0.0475724     3.531 0.000415 ***\ndestination_grid_id384  -1.0289230  0.0474732   -21.674  &lt; 2e-16 ***\ndestination_grid_id385  -1.9971022  0.0490881   -40.684  &lt; 2e-16 ***\ndestination_grid_id404  -0.0193043  0.0490824    -0.393 0.694095    \ndestination_grid_id405  -0.3887359  0.0478933    -8.117 4.79e-16 ***\ndestination_grid_id406   0.0380518  0.0470584     0.809 0.418741    \ndestination_grid_id407  -0.3144300  0.0476107    -6.604 4.00e-11 ***\ndestination_grid_id408   0.8780335  0.0470844    18.648  &lt; 2e-16 ***\ndestination_grid_id425  -1.8395022  0.0524459   -35.074  &lt; 2e-16 ***\ndestination_grid_id426  -1.4897729  0.0478876   -31.110  &lt; 2e-16 ***\ndestination_grid_id427  -3.8700620  0.0521916   -74.151  &lt; 2e-16 ***\ndestination_grid_id428  -1.2889697  0.0480239   -26.840  &lt; 2e-16 ***\ndestination_grid_id429  -1.6855528  0.0521273   -32.335  &lt; 2e-16 ***\ndestination_grid_id446  -0.7617085  0.0517766   -14.711  &lt; 2e-16 ***\ndestination_grid_id447  -1.7077816  0.0498358   -34.268  &lt; 2e-16 ***\ndestination_grid_id448  -1.9724186  0.0481573   -40.958  &lt; 2e-16 ***\ndestination_grid_id449  -1.4245249  0.0474380   -30.029  &lt; 2e-16 ***\ndestination_grid_id450  -1.7960080  0.0483531   -37.144  &lt; 2e-16 ***\ndestination_grid_id468  -0.9452777  0.0478542   -19.753  &lt; 2e-16 ***\ndestination_grid_id469  -1.8498223  0.0475843   -38.875  &lt; 2e-16 ***\ndestination_grid_id470  -1.4574865  0.0473280   -30.795  &lt; 2e-16 ***\ndestination_grid_id471  -1.2997468  0.0493704   -26.326  &lt; 2e-16 ***\ndestination_grid_id488  -0.9281971  0.0519161   -17.879  &lt; 2e-16 ***\ndestination_grid_id489  -2.9840492  0.0665309   -44.852  &lt; 2e-16 ***\ndestination_grid_id490  -1.0065062  0.0475338   -21.175  &lt; 2e-16 ***\ndestination_grid_id491  -3.3025840  0.0491217   -67.233  &lt; 2e-16 ***\ndestination_grid_id493  -3.9534366  0.0680740   -58.076  &lt; 2e-16 ***\ndestination_grid_id494  -2.0877878  0.0517467   -40.346  &lt; 2e-16 ***\ndestination_grid_id509  -0.4852324  0.0491093    -9.881  &lt; 2e-16 ***\ndestination_grid_id510  -0.7498919  0.0478475   -15.673  &lt; 2e-16 ***\ndestination_grid_id511  -1.4772281  0.0472784   -31.245  &lt; 2e-16 ***\ndestination_grid_id512  -1.6047721  0.0472370   -33.973  &lt; 2e-16 ***\ndestination_grid_id513  -0.5600466  0.0474565   -11.801  &lt; 2e-16 ***\ndestination_grid_id514  -1.0588555  0.0483499   -21.900  &lt; 2e-16 ***\ndestination_grid_id515  -2.3267358  0.0552218   -42.134  &lt; 2e-16 ***\ndestination_grid_id530  -1.2736763  0.0554586   -22.966  &lt; 2e-16 ***\ndestination_grid_id531   1.0898264  0.0472277    23.076  &lt; 2e-16 ***\ndestination_grid_id532  -1.3274742  0.0476302   -27.870  &lt; 2e-16 ***\ndestination_grid_id533  -0.0971527  0.0469369    -2.070 0.038466 *  \ndestination_grid_id534  -1.4456973  0.0472630   -30.588  &lt; 2e-16 ***\ndestination_grid_id536  -1.9009098  0.0501014   -37.941  &lt; 2e-16 ***\ndestination_grid_id537  -2.6565745  0.0576694   -46.066  &lt; 2e-16 ***\ndestination_grid_id538  -3.0040690  0.0633395   -47.428  &lt; 2e-16 ***\ndestination_grid_id539  -6.5413743  0.5792663   -11.293  &lt; 2e-16 ***\ndestination_grid_id551  -0.5996160  0.0501514   -11.956  &lt; 2e-16 ***\ndestination_grid_id552  -0.1342300  0.0480109    -2.796 0.005177 ** \ndestination_grid_id553  -2.0609612  0.0475954   -43.302  &lt; 2e-16 ***\ndestination_grid_id554  -2.0860771  0.0473338   -44.072  &lt; 2e-16 ***\ndestination_grid_id555  -0.8753385  0.0474451   -18.449  &lt; 2e-16 ***\ndestination_grid_id559  -3.4174224  0.0720510   -47.431  &lt; 2e-16 ***\ndestination_grid_id560  -0.7724451  0.0496681   -15.552  &lt; 2e-16 ***\ndestination_grid_id561  -3.0882333  0.0820200   -37.652  &lt; 2e-16 ***\ndestination_grid_id572  -1.4034708  0.0569719   -24.634  &lt; 2e-16 ***\ndestination_grid_id573   0.2247945  0.0479534     4.688 2.76e-06 ***\ndestination_grid_id574  -1.7268407  0.0495931   -34.820  &lt; 2e-16 ***\ndestination_grid_id575   0.9482808  0.0468917    20.223  &lt; 2e-16 ***\ndestination_grid_id576  -1.7457344  0.0472737   -36.928  &lt; 2e-16 ***\ndestination_grid_id578  -5.4381549  0.1164853   -46.685  &lt; 2e-16 ***\ndestination_grid_id582  -3.5843848  0.0809676   -44.269  &lt; 2e-16 ***\ndestination_grid_id583  -5.1900965  0.2232139   -23.252  &lt; 2e-16 ***\ndestination_grid_id584  -1.7590761  0.0584846   -30.078  &lt; 2e-16 ***\ndestination_grid_id593  -1.9358167  0.0525260   -36.854  &lt; 2e-16 ***\ndestination_grid_id594  -0.7651838  0.0487521   -15.695  &lt; 2e-16 ***\ndestination_grid_id595  -0.9827222  0.0472047   -20.818  &lt; 2e-16 ***\ndestination_grid_id596  -1.5789655  0.0471281   -33.504  &lt; 2e-16 ***\ndestination_grid_id597  -2.1016891  0.0493413   -42.595  &lt; 2e-16 ***\ndestination_grid_id603  -3.0402708  0.0696211   -43.669  &lt; 2e-16 ***\ndestination_grid_id604  -2.3671425  0.0646050   -36.640  &lt; 2e-16 ***\ndestination_grid_id615  -1.7231410  0.0490709   -35.115  &lt; 2e-16 ***\ndestination_grid_id616  -1.0885652  0.0476049   -22.867  &lt; 2e-16 ***\ndestination_grid_id617  -2.3441301  0.0477342   -49.108  &lt; 2e-16 ***\ndestination_grid_id618  -1.6243378  0.0472534   -34.375  &lt; 2e-16 ***\ndestination_grid_id620  -1.6423051  0.0482346   -34.048  &lt; 2e-16 ***\ndestination_grid_id637  -1.7313955  0.0480759   -36.014  &lt; 2e-16 ***\ndestination_grid_id638  -1.6097099  0.0471983   -34.105  &lt; 2e-16 ***\ndestination_grid_id657  -0.3403871  0.0473700    -7.186 6.69e-13 ***\ndestination_grid_id658  -1.0030359  0.0472351   -21.235  &lt; 2e-16 ***\ndestination_grid_id659  -1.3373457  0.0472031   -28.332  &lt; 2e-16 ***\ndestination_grid_id660  -0.7519028  0.0470283   -15.988  &lt; 2e-16 ***\ndestination_grid_id662  -1.3691349  0.0481872   -28.413  &lt; 2e-16 ***\ndestination_grid_id677  -0.2765313  0.0477681    -5.789 7.08e-09 ***\ndestination_grid_id678  -2.2320456  0.0488485   -45.693  &lt; 2e-16 ***\ndestination_grid_id679  -0.7290257  0.0471223   -15.471  &lt; 2e-16 ***\ndestination_grid_id680   0.6826802  0.0469316    14.546  &lt; 2e-16 ***\ndestination_grid_id681  -3.0392452  0.0501615   -60.589  &lt; 2e-16 ***\ndestination_grid_id699  -0.8920436  0.0476762   -18.710  &lt; 2e-16 ***\ndestination_grid_id700  -1.2755703  0.0473383   -26.946  &lt; 2e-16 ***\ndestination_grid_id701  -3.5750445  0.0505888   -70.669  &lt; 2e-16 ***\ndestination_grid_id702  -1.0899971  0.0470989   -23.143  &lt; 2e-16 ***\ndestination_grid_id704  -1.8870805  0.0480132   -39.303  &lt; 2e-16 ***\ndestination_grid_id722  -2.1636838  0.0478472   -45.221  &lt; 2e-16 ***\ndestination_grid_id725  -4.2050418  0.0540252   -77.835  &lt; 2e-16 ***\ndestination_grid_id741  -0.2732683  0.0474062    -5.764 8.19e-09 ***\ndestination_grid_id743  -3.7966988  0.0513096   -73.996  &lt; 2e-16 ***\ndestination_grid_id744  -1.0458552  0.0471119   -22.199  &lt; 2e-16 ***\ndestination_grid_id761   0.0024108  0.0476054     0.051 0.959611    \ndestination_grid_id762  -1.9016726  0.0485413   -39.176  &lt; 2e-16 ***\ndestination_grid_id763  -3.5834980  0.0510884   -70.143  &lt; 2e-16 ***\ndestination_grid_id764  -0.4202968  0.0469943    -8.944  &lt; 2e-16 ***\ndestination_grid_id765  -1.9757335  0.0477758   -41.354  &lt; 2e-16 ***\ndestination_grid_id767  -1.6399242  0.0473790   -34.613  &lt; 2e-16 ***\ndestination_grid_id772  -2.5294479  0.0584593   -43.269  &lt; 2e-16 ***\ndestination_grid_id784  -3.2618369  0.0508797   -64.109  &lt; 2e-16 ***\ndestination_grid_id785  -1.4684638  0.0471869   -31.120  &lt; 2e-16 ***\ndestination_grid_id786  -1.4135604  0.0471338   -29.990  &lt; 2e-16 ***\ndestination_grid_id787  -1.9311668  0.0478361   -40.370  &lt; 2e-16 ***\ndestination_grid_id788  -3.3920657  0.0489143   -69.347  &lt; 2e-16 ***\ndestination_grid_id789  -3.7654171  0.0497934   -75.621  &lt; 2e-16 ***\ndestination_grid_id803  -1.2792146  0.0488547   -26.184  &lt; 2e-16 ***\ndestination_grid_id804  -0.7924121  0.0473376   -16.740  &lt; 2e-16 ***\ndestination_grid_id805   0.3046341  0.0469573     6.487 8.73e-11 ***\ndestination_grid_id806  -1.6461786  0.0472263   -34.857  &lt; 2e-16 ***\ndestination_grid_id807  -1.5905668  0.0473891   -33.564  &lt; 2e-16 ***\ndestination_grid_id808  -3.3085505  0.0508477   -65.068  &lt; 2e-16 ***\ndestination_grid_id809  -1.8346535  0.0471928   -38.876  &lt; 2e-16 ***\ndestination_grid_id810  -2.2646339  0.0476772   -47.499  &lt; 2e-16 ***\ndestination_grid_id814  -1.5088848  0.0508229   -29.689  &lt; 2e-16 ***\ndestination_grid_id819   0.6973841  0.0490481    14.218  &lt; 2e-16 ***\ndestination_grid_id824  -0.9230514  0.0487539   -18.933  &lt; 2e-16 ***\ndestination_grid_id826  -1.3028072  0.0472552   -27.570  &lt; 2e-16 ***\ndestination_grid_id827  -1.5546329  0.0472756   -32.884  &lt; 2e-16 ***\ndestination_grid_id828  -1.3725051  0.0471206   -29.127  &lt; 2e-16 ***\ndestination_grid_id829  -1.9948328  0.0475886   -41.918  &lt; 2e-16 ***\ndestination_grid_id830  -3.2321233  0.0485713   -66.544  &lt; 2e-16 ***\ndestination_grid_id831   0.1419323  0.0469604     3.022 0.002508 ** \ndestination_grid_id832  -0.2426947  0.0470672    -5.156 2.52e-07 ***\ndestination_grid_id835  -2.0170292  0.0508499   -39.666  &lt; 2e-16 ***\ndestination_grid_id844  -1.2804842  0.0501704   -25.523  &lt; 2e-16 ***\ndestination_grid_id846  -1.2817007  0.0473737   -27.055  &lt; 2e-16 ***\ndestination_grid_id847  -0.4838237  0.0470741   -10.278  &lt; 2e-16 ***\ndestination_grid_id848  -1.7477667  0.0472847   -36.963  &lt; 2e-16 ***\ndestination_grid_id849  -2.4991971  0.0475878   -52.518  &lt; 2e-16 ***\ndestination_grid_id850  -1.7441389  0.0472275   -36.931  &lt; 2e-16 ***\ndestination_grid_id851  -2.1025782  0.0472806   -44.470  &lt; 2e-16 ***\ndestination_grid_id852  -2.3671075  0.0476379   -49.690  &lt; 2e-16 ***\ndestination_grid_id853  -1.1533292  0.0476320   -24.213  &lt; 2e-16 ***\ndestination_grid_id854  -1.3229329  0.0489990   -26.999  &lt; 2e-16 ***\ndestination_grid_id855  -2.2585197  0.0508546   -44.411  &lt; 2e-16 ***\ndestination_grid_id856  -2.9351234  0.0564874   -51.961  &lt; 2e-16 ***\ndestination_grid_id866  -0.5851466  0.0479302   -12.208  &lt; 2e-16 ***\ndestination_grid_id867   0.0113776  0.0470900     0.242 0.809080    \ndestination_grid_id868  -0.3694778  0.0471544    -7.835 4.67e-15 ***\ndestination_grid_id869   0.3992246  0.0471548     8.466  &lt; 2e-16 ***\ndestination_grid_id870  -0.0487835  0.0469616    -1.039 0.298900    \ndestination_grid_id871  -0.0999649  0.0470447    -2.125 0.033596 *  \ndestination_grid_id872  -1.6261492  0.0472049   -34.449  &lt; 2e-16 ***\ndestination_grid_id873  -2.1031322  0.0475503   -44.230  &lt; 2e-16 ***\ndestination_grid_id874  -3.4577049  0.0487315   -70.954  &lt; 2e-16 ***\ndestination_grid_id875  -2.8607759  0.0547662   -52.236  &lt; 2e-16 ***\ndestination_grid_id876  -2.5375191  0.0506587   -50.090  &lt; 2e-16 ***\ndestination_grid_id877  -1.6667487  0.0490646   -33.970  &lt; 2e-16 ***\ndestination_grid_id887  -1.2157747  0.0475988   -25.542  &lt; 2e-16 ***\ndestination_grid_id888  -2.5504962  0.0487772   -52.289  &lt; 2e-16 ***\ndestination_grid_id889  -1.9509873  0.0485944   -40.148  &lt; 2e-16 ***\ndestination_grid_id890  -0.8876895  0.0471175   -18.840  &lt; 2e-16 ***\ndestination_grid_id891  -2.5131342  0.0490344   -51.252  &lt; 2e-16 ***\ndestination_grid_id893  -1.2667040  0.0470878   -26.901  &lt; 2e-16 ***\ndestination_grid_id894  -2.9361258  0.0483086   -60.779  &lt; 2e-16 ***\ndestination_grid_id895  -1.7096920  0.0478058   -35.763  &lt; 2e-16 ***\ndestination_grid_id896  -3.8945959  0.0556606   -69.970  &lt; 2e-16 ***\ndestination_grid_id897  -3.8299626  0.0542376   -70.614  &lt; 2e-16 ***\ndestination_grid_id898  -1.6907603  0.0490527   -34.468  &lt; 2e-16 ***\ndestination_grid_id908  -0.4119766  0.0480321    -8.577  &lt; 2e-16 ***\ndestination_grid_id909  -1.3994877  0.0473051   -29.584  &lt; 2e-16 ***\ndestination_grid_id910  -2.3951643  0.0483304   -49.558  &lt; 2e-16 ***\ndestination_grid_id911  -0.1167002  0.0470438    -2.481 0.013113 *  \ndestination_grid_id912  -1.8073366  0.0474063   -38.124  &lt; 2e-16 ***\ndestination_grid_id915  -1.8472297  0.0472575   -39.089  &lt; 2e-16 ***\ndestination_grid_id917  -0.4583021  0.0472138    -9.707  &lt; 2e-16 ***\ndestination_grid_id918  -4.8124113  0.0615795   -78.150  &lt; 2e-16 ***\ndestination_grid_id919  -2.9751484  0.0491165   -60.573  &lt; 2e-16 ***\ndestination_grid_id928  -2.3452774  0.0498881   -47.011  &lt; 2e-16 ***\ndestination_grid_id929  -1.4303723  0.0473733   -30.194  &lt; 2e-16 ***\ndestination_grid_id930  -0.2451616  0.0470146    -5.215 1.84e-07 ***\ndestination_grid_id931  -1.7668678  0.0479622   -36.839  &lt; 2e-16 ***\ndestination_grid_id932  -3.5496502  0.0528130   -67.212  &lt; 2e-16 ***\ndestination_grid_id933  -1.4070036  0.0474702   -29.640  &lt; 2e-16 ***\ndestination_grid_id934  -1.8992426  0.0475688   -39.926  &lt; 2e-16 ***\ndestination_grid_id935   0.2036763  0.0469484     4.338 1.44e-05 ***\ndestination_grid_id938  -5.9682784  0.1803543   -33.092  &lt; 2e-16 ***\ndestination_grid_id939   0.4869289  0.0470278    10.354  &lt; 2e-16 ***\ndestination_grid_id940  -3.4547655  0.0504341   -68.501  &lt; 2e-16 ***\ndestination_grid_id949  -2.0138291  0.0490402   -41.065  &lt; 2e-16 ***\ndestination_grid_id950  -0.0705156  0.0471345    -1.496 0.134640    \ndestination_grid_id951   0.7350973  0.0469493    15.657  &lt; 2e-16 ***\ndestination_grid_id952  -0.8896606  0.0474970   -18.731  &lt; 2e-16 ***\ndestination_grid_id953  -1.3489474  0.0476499   -28.310  &lt; 2e-16 ***\ndestination_grid_id954  -3.3408119  0.0498837   -66.972  &lt; 2e-16 ***\ndestination_grid_id955  -0.4691851  0.0470761    -9.967  &lt; 2e-16 ***\ndestination_grid_id956  -2.4785383  0.0477585   -51.897  &lt; 2e-16 ***\ndestination_grid_id957  -2.2994435  0.0476621   -48.245  &lt; 2e-16 ***\ndestination_grid_id959  -2.0728603  0.0519268   -39.919  &lt; 2e-16 ***\ndestination_grid_id961  -2.3204602  0.0484173   -47.926  &lt; 2e-16 ***\ndestination_grid_id962  -0.1990396  0.0471692    -4.220 2.45e-05 ***\ndestination_grid_id970  -0.6841908  0.0472758   -14.472  &lt; 2e-16 ***\ndestination_grid_id971  -0.6630697  0.0470888   -14.081  &lt; 2e-16 ***\ndestination_grid_id972  -1.4432521  0.0473832   -30.459  &lt; 2e-16 ***\ndestination_grid_id974  -1.8616030  0.0480071   -38.778  &lt; 2e-16 ***\ndestination_grid_id975  -3.1092171  0.0495389   -62.763  &lt; 2e-16 ***\ndestination_grid_id976  -2.5646254  0.0481811   -53.229  &lt; 2e-16 ***\ndestination_grid_id977  -2.0768926  0.0473249   -43.886  &lt; 2e-16 ***\ndestination_grid_id978  -2.4536253  0.0481233   -50.986  &lt; 2e-16 ***\ndestination_grid_id982  -2.9655313  0.0481201   -61.628  &lt; 2e-16 ***\ndestination_grid_id983   2.4630582  0.0482741    51.022  &lt; 2e-16 ***\ndestination_grid_id984   1.4379676  0.0472592    30.427  &lt; 2e-16 ***\ndestination_grid_id991  -0.5838727  0.0473523   -12.330  &lt; 2e-16 ***\ndestination_grid_id992  -0.4744260  0.0471760   -10.057  &lt; 2e-16 ***\ndestination_grid_id993  -2.1491542  0.0478246   -44.938  &lt; 2e-16 ***\ndestination_grid_id994  -2.1210290  0.0481795   -44.023  &lt; 2e-16 ***\ndestination_grid_id995  -1.4569638  0.0475261   -30.656  &lt; 2e-16 ***\ndestination_grid_id996  -2.0786544  0.0480856   -43.228  &lt; 2e-16 ***\ndestination_grid_id997  -1.9500176  0.0487100   -40.033  &lt; 2e-16 ***\ndestination_grid_id998  -1.4820801  0.0472583   -31.361  &lt; 2e-16 ***\ndestination_grid_id999  -2.5684898  0.0479041   -53.617  &lt; 2e-16 ***\ndestination_grid_id1001 -1.6117128  0.0493913   -32.632  &lt; 2e-16 ***\ndestination_grid_id1003 -0.2561972  0.0470165    -5.449 5.06e-08 ***\ndestination_grid_id1004 -1.3860143  0.0471698   -29.384  &lt; 2e-16 ***\ndestination_grid_id1011 -1.1617247  0.0483715   -24.017  &lt; 2e-16 ***\ndestination_grid_id1012  0.3365387  0.0472554     7.122 1.07e-12 ***\ndestination_grid_id1013 -1.0847050  0.0474797   -22.846  &lt; 2e-16 ***\ndestination_grid_id1014 -2.7039504  0.0494503   -54.680  &lt; 2e-16 ***\ndestination_grid_id1015  0.0164038  0.0470622     0.349 0.727423    \ndestination_grid_id1016  0.0309399  0.0470270     0.658 0.510591    \ndestination_grid_id1018 -2.4072461  0.0484155   -49.721  &lt; 2e-16 ***\ndestination_grid_id1019 -1.4259361  0.0472450   -30.182  &lt; 2e-16 ***\ndestination_grid_id1023 -2.4617772  0.0486710   -50.580  &lt; 2e-16 ***\ndestination_grid_id1024 -1.5808399  0.0473428   -33.391  &lt; 2e-16 ***\ndestination_grid_id1025 -5.8332927  0.0798241   -73.077  &lt; 2e-16 ***\ndestination_grid_id1033 -0.5150743  0.0473532   -10.877  &lt; 2e-16 ***\ndestination_grid_id1034 -0.0047147  0.0470927    -0.100 0.920253    \ndestination_grid_id1035 -0.1738226  0.0471142    -3.689 0.000225 ***\ndestination_grid_id1036  0.2693970  0.0470322     5.728 1.02e-08 ***\ndestination_grid_id1037 -1.0804841  0.0472550   -22.865  &lt; 2e-16 ***\ndestination_grid_id1043 -0.8501741  0.0481320   -17.663  &lt; 2e-16 ***\ndestination_grid_id1045 -1.5976999  0.0472551   -33.810  &lt; 2e-16 ***\ndestination_grid_id1046 -1.3077605  0.0472565   -27.674  &lt; 2e-16 ***\ndestination_grid_id1053  0.3285317  0.0471152     6.973 3.10e-12 ***\ndestination_grid_id1054 -0.0471651  0.0471356    -1.001 0.317007    \ndestination_grid_id1055 -1.2379999  0.0475504   -26.036  &lt; 2e-16 ***\ndestination_grid_id1056 -1.7862135  0.0481293   -37.113  &lt; 2e-16 ***\ndestination_grid_id1064 -4.2288781  0.0989382   -42.743  &lt; 2e-16 ***\ndestination_grid_id1066 -0.6667934  0.0470749   -14.165  &lt; 2e-16 ***\ndestination_grid_id1067 -0.8014001  0.0473471   -16.926  &lt; 2e-16 ***\ndestination_grid_id1074 -1.7974090  0.0487743   -36.852  &lt; 2e-16 ***\ndestination_grid_id1075 -0.1857542  0.0472644    -3.930 8.49e-05 ***\ndestination_grid_id1076 -0.9509814  0.0473557   -20.082  &lt; 2e-16 ***\ndestination_grid_id1077 -1.7872651  0.0479621   -37.264  &lt; 2e-16 ***\ndestination_grid_id1079 -0.6593507  0.0472263   -13.962  &lt; 2e-16 ***\ndestination_grid_id1085 -2.5263238  0.0732099   -34.508  &lt; 2e-16 ***\ndestination_grid_id1087 -1.4564219  0.0472925   -30.796  &lt; 2e-16 ***\ndestination_grid_id1088 -1.1591720  0.0472189   -24.549  &lt; 2e-16 ***\ndestination_grid_id1094 -3.3098101  0.0672188   -49.239  &lt; 2e-16 ***\ndestination_grid_id1095 -0.8921876  0.0488056   -18.280  &lt; 2e-16 ***\ndestination_grid_id1096 -0.6022543  0.0492218   -12.236  &lt; 2e-16 ***\ndestination_grid_id1097  0.0343509  0.0470648     0.730 0.465473    \ndestination_grid_id1098 -2.6970862  0.0516054   -52.264  &lt; 2e-16 ***\ndestination_grid_id1099 -1.3185667  0.0474920   -27.764  &lt; 2e-16 ***\ndestination_grid_id1105  0.5845515  0.0477343    12.246  &lt; 2e-16 ***\ndestination_grid_id1106 -4.4895029  0.0969364   -46.314  &lt; 2e-16 ***\ndestination_grid_id1107 -1.2072445  0.0474930   -25.419  &lt; 2e-16 ***\ndestination_grid_id1108  1.0429307  0.0469565    22.211  &lt; 2e-16 ***\ndestination_grid_id1109 -3.2528892  0.0513498   -63.348  &lt; 2e-16 ***\ndestination_grid_id1116 -0.8794492  0.0476496   -18.457  &lt; 2e-16 ***\ndestination_grid_id1117 -0.3067939  0.0473807    -6.475 9.48e-11 ***\ndestination_grid_id1118 -2.1089990  0.0500704   -42.121  &lt; 2e-16 ***\ndestination_grid_id1119 -1.6960081  0.0479731   -35.353  &lt; 2e-16 ***\ndestination_grid_id1120 -2.2877191  0.0497249   -46.007  &lt; 2e-16 ***\ndestination_grid_id1129 -2.0255679  0.0475450   -42.603  &lt; 2e-16 ***\ndestination_grid_id1130 -1.3667027  0.0472318   -28.936  &lt; 2e-16 ***\ndestination_grid_id1131  0.1745208  0.0471932     3.698 0.000217 ***\ndestination_grid_id1136  0.4479274  0.0471117     9.508  &lt; 2e-16 ***\ndestination_grid_id1138 -1.9914568  0.0497585   -40.022  &lt; 2e-16 ***\ndestination_grid_id1139 -1.1537271  0.0473766   -24.352  &lt; 2e-16 ***\ndestination_grid_id1141 -1.2055281  0.0474775   -25.392  &lt; 2e-16 ***\ndestination_grid_id1148 -2.3669412  0.0552436   -42.846  &lt; 2e-16 ***\ndestination_grid_id1149 -2.4247769  0.0487270   -49.763  &lt; 2e-16 ***\ndestination_grid_id1150 -2.0084059  0.0473705   -42.398  &lt; 2e-16 ***\ndestination_grid_id1151 -1.3063738  0.0473499   -27.590  &lt; 2e-16 ***\ndestination_grid_id1158 -1.5245711  0.0480099   -31.755  &lt; 2e-16 ***\ndestination_grid_id1159 -1.4217750  0.0476746   -29.822  &lt; 2e-16 ***\ndestination_grid_id1160  0.0621694  0.0470585     1.321 0.186465    \ndestination_grid_id1171 -1.0560338  0.0472650   -22.343  &lt; 2e-16 ***\ndestination_grid_id1172  0.2492271  0.0470057     5.302 1.15e-07 ***\ndestination_grid_id1173 -0.2949832  0.0471769    -6.253 4.03e-10 ***\ndestination_grid_id1174 -2.6006956  0.0626612   -41.504  &lt; 2e-16 ***\ndestination_grid_id1178  0.6465690  0.0470165    13.752  &lt; 2e-16 ***\ndestination_grid_id1179 -0.3697236  0.0471561    -7.840 4.49e-15 ***\ndestination_grid_id1180 -0.3854962  0.0471295    -8.180 2.85e-16 ***\ndestination_grid_id1181 -1.6074669  0.0477027   -33.698  &lt; 2e-16 ***\ndestination_grid_id1183 -0.0959055  0.0471129    -2.036 0.041785 *  \ndestination_grid_id1190 -2.4087558  0.0549518   -43.834  &lt; 2e-16 ***\ndestination_grid_id1192 -1.1289033  0.0472126   -23.911  &lt; 2e-16 ***\ndestination_grid_id1193 -0.9335846  0.0472137   -19.774  &lt; 2e-16 ***\ndestination_grid_id1194 -0.3504539  0.0472860    -7.411 1.25e-13 ***\ndestination_grid_id1200 -0.6986078  0.0473931   -14.741  &lt; 2e-16 ***\ndestination_grid_id1201 -1.0106517  0.0474354   -21.306  &lt; 2e-16 ***\ndestination_grid_id1203 -1.0829046  0.0475298   -22.784  &lt; 2e-16 ***\ndestination_grid_id1204 -1.3254300  0.0476684   -27.805  &lt; 2e-16 ***\ndestination_grid_id1211 -5.7028625  0.2814139   -20.265  &lt; 2e-16 ***\ndestination_grid_id1214 -2.0003570  0.0476607   -41.971  &lt; 2e-16 ***\ndestination_grid_id1215 -1.5653368  0.0481901   -32.483  &lt; 2e-16 ***\ndestination_grid_id1216 -0.8622511  0.0479654   -17.977  &lt; 2e-16 ***\ndestination_grid_id1220 -0.5167822  0.0472589   -10.935  &lt; 2e-16 ***\ndestination_grid_id1221  0.0530693  0.0470602     1.128 0.259452    \ndestination_grid_id1222 -1.2460199  0.0484633   -25.711  &lt; 2e-16 ***\ndestination_grid_id1223 -1.6699955  0.0481529   -34.681  &lt; 2e-16 ***\ndestination_grid_id1224 -1.1091796  0.0475241   -23.339  &lt; 2e-16 ***\ndestination_grid_id1231 -3.6542805  0.0740743   -49.333  &lt; 2e-16 ***\ndestination_grid_id1232 -1.7875469  0.0528657   -33.813  &lt; 2e-16 ***\ndestination_grid_id1235 -1.2162298  0.0472816   -25.723  &lt; 2e-16 ***\ndestination_grid_id1236 -1.2466527  0.0476274   -26.175  &lt; 2e-16 ***\ndestination_grid_id1241 -1.8776269  0.0482709   -38.898  &lt; 2e-16 ***\ndestination_grid_id1242 -1.4277942  0.0477143   -29.924  &lt; 2e-16 ***\ndestination_grid_id1243 -0.3210348  0.0471585    -6.808 9.93e-12 ***\ndestination_grid_id1246 -1.3853455  0.0476194   -29.092  &lt; 2e-16 ***\ndestination_grid_id1256 -1.9148225  0.0476693   -40.169  &lt; 2e-16 ***\ndestination_grid_id1257 -0.7708113  0.0473145   -16.291  &lt; 2e-16 ***\ndestination_grid_id1258  0.0987180  0.0472008     2.091 0.036488 *  \ndestination_grid_id1262 -2.0738436  0.0485218   -42.740  &lt; 2e-16 ***\ndestination_grid_id1263  0.2017090  0.0470122     4.291 1.78e-05 ***\ndestination_grid_id1264 -0.7396876  0.0474648   -15.584  &lt; 2e-16 ***\ndestination_grid_id1265 -0.7392393  0.0474975   -15.564  &lt; 2e-16 ***\ndestination_grid_id1266 -0.6746939  0.0473541   -14.248  &lt; 2e-16 ***\ndestination_grid_id1267 -2.0478703  0.0495422   -41.336  &lt; 2e-16 ***\ndestination_grid_id1272 -5.8555482  0.1206477   -48.534  &lt; 2e-16 ***\ndestination_grid_id1273 -0.8657030  0.0474576   -18.242  &lt; 2e-16 ***\ndestination_grid_id1277 -0.6358707  0.0471255   -13.493  &lt; 2e-16 ***\ndestination_grid_id1278 -1.0016540  0.0473166   -21.169  &lt; 2e-16 ***\ndestination_grid_id1283  0.6698756  0.0470097    14.250  &lt; 2e-16 ***\ndestination_grid_id1284  0.2120673  0.0470460     4.508 6.55e-06 ***\ndestination_grid_id1285 -0.0574433  0.0470996    -1.220 0.222611    \ndestination_grid_id1286 -1.0406088  0.0478619   -21.742  &lt; 2e-16 ***\ndestination_grid_id1289 -3.3740998  0.0599483   -56.284  &lt; 2e-16 ***\ndestination_grid_id1293 -4.9694905  0.0879165   -56.525  &lt; 2e-16 ***\ndestination_grid_id1294 -0.8682542  0.0476724   -18.213  &lt; 2e-16 ***\ndestination_grid_id1295 -3.1741771  0.0519015   -61.158  &lt; 2e-16 ***\ndestination_grid_id1298 -1.5050761  0.0474201   -31.739  &lt; 2e-16 ***\ndestination_grid_id1299 -1.6988862  0.0477465   -35.581  &lt; 2e-16 ***\ndestination_grid_id1304 -0.4577359  0.0472543    -9.687  &lt; 2e-16 ***\ndestination_grid_id1305 -0.2757090  0.0470764    -5.857 4.72e-09 ***\ndestination_grid_id1307 -1.7508053  0.0506491   -34.567  &lt; 2e-16 ***\ndestination_grid_id1308 -0.4293821  0.0471943    -9.098  &lt; 2e-16 ***\ndestination_grid_id1310 -5.5956085  0.1947207   -28.737  &lt; 2e-16 ***\ndestination_grid_id1316 -2.8498132  0.0494888   -57.585  &lt; 2e-16 ***\ndestination_grid_id1317 -2.8605203  0.0487008   -58.737  &lt; 2e-16 ***\ndestination_grid_id1318 -3.0081232  0.0494820   -60.792  &lt; 2e-16 ***\ndestination_grid_id1319 -0.1075963  0.0470520    -2.287 0.022210 *  \ndestination_grid_id1320 -2.2414435  0.0487992   -45.932  &lt; 2e-16 ***\ndestination_grid_id1324 -0.2200253  0.0494035    -4.454 8.44e-06 ***\ndestination_grid_id1325 -2.2673040  0.0489711   -46.299  &lt; 2e-16 ***\ndestination_grid_id1326 -0.6568452  0.0472096   -13.913  &lt; 2e-16 ***\ndestination_grid_id1327 -0.4915906  0.0471739   -10.421  &lt; 2e-16 ***\ndestination_grid_id1328 -0.6667231  0.0473152   -14.091  &lt; 2e-16 ***\ndestination_grid_id1329 -0.8232342  0.0476594   -17.273  &lt; 2e-16 ***\ndestination_grid_id1330  0.4041544  0.0471626     8.569  &lt; 2e-16 ***\ndestination_grid_id1331 -5.7246759  0.2624319   -21.814  &lt; 2e-16 ***\ndestination_grid_id1333 -2.2909337  0.0496037   -46.185  &lt; 2e-16 ***\ndestination_grid_id1334 -1.8930773  0.0486790   -38.889  &lt; 2e-16 ***\ndestination_grid_id1335 -0.2107172  0.0472249    -4.462 8.12e-06 ***\ndestination_grid_id1336 -4.0331328  0.0729314   -55.300  &lt; 2e-16 ***\ndestination_grid_id1337 -3.6833151  0.0553226   -66.579  &lt; 2e-16 ***\ndestination_grid_id1338 -4.1436518  0.0539312   -76.832  &lt; 2e-16 ***\ndestination_grid_id1339 -0.4106008  0.0470645    -8.724  &lt; 2e-16 ***\ndestination_grid_id1340 -1.8236789  0.0477928   -38.158  &lt; 2e-16 ***\ndestination_grid_id1341 -5.7702006  0.1070944   -53.880  &lt; 2e-16 ***\ndestination_grid_id1346 -0.6790252  0.0474223   -14.319  &lt; 2e-16 ***\ndestination_grid_id1347  0.5729434  0.0470314    12.182  &lt; 2e-16 ***\ndestination_grid_id1348 -0.8417389  0.0473405   -17.781  &lt; 2e-16 ***\ndestination_grid_id1349  0.0672791  0.0471697     1.426 0.153776    \ndestination_grid_id1350 -1.5700502  0.0485286   -32.353  &lt; 2e-16 ***\ndestination_grid_id1353 -0.9444156  0.0473786   -19.933  &lt; 2e-16 ***\ndestination_grid_id1354 -2.1193530  0.0483924   -43.795  &lt; 2e-16 ***\ndestination_grid_id1355 -1.9586511  0.0481800   -40.653  &lt; 2e-16 ***\ndestination_grid_id1357 -2.5299637  0.0504411   -50.157  &lt; 2e-16 ***\ndestination_grid_id1358 -0.4297142  0.0470616    -9.131  &lt; 2e-16 ***\ndestination_grid_id1359 -1.8390409  0.0473718   -38.821  &lt; 2e-16 ***\ndestination_grid_id1360 -2.0056409  0.0474852   -42.237  &lt; 2e-16 ***\ndestination_grid_id1361 -1.6749734  0.0477289   -35.093  &lt; 2e-16 ***\ndestination_grid_id1362 -3.2108826  0.0551867   -58.182  &lt; 2e-16 ***\ndestination_grid_id1368 -1.5254296  0.0477183   -31.967  &lt; 2e-16 ***\ndestination_grid_id1369 -1.4350566  0.0476597   -30.110  &lt; 2e-16 ***\ndestination_grid_id1370  0.2753700  0.0470240     5.856 4.74e-09 ***\ndestination_grid_id1371 -0.8388164  0.0474996   -17.659  &lt; 2e-16 ***\ndestination_grid_id1372 -0.7909515  0.0473964   -16.688  &lt; 2e-16 ***\ndestination_grid_id1373 -3.6624058  0.0570933   -64.148  &lt; 2e-16 ***\ndestination_grid_id1374 -2.4652573  0.0490212   -50.290  &lt; 2e-16 ***\ndestination_grid_id1375 -0.6283192  0.0474620   -13.238  &lt; 2e-16 ***\ndestination_grid_id1376 -2.4180106  0.0498500   -48.506  &lt; 2e-16 ***\ndestination_grid_id1379 -5.0862574  0.0787662   -64.574  &lt; 2e-16 ***\ndestination_grid_id1380  0.2253205  0.0469895     4.795 1.63e-06 ***\ndestination_grid_id1381  0.3969046  0.0469783     8.449  &lt; 2e-16 ***\ndestination_grid_id1382 -0.3943123  0.0471323    -8.366  &lt; 2e-16 ***\ndestination_grid_id1383 -3.2578609  0.0508546   -64.062  &lt; 2e-16 ***\ndestination_grid_id1388 -0.7519757  0.0473081   -15.895  &lt; 2e-16 ***\ndestination_grid_id1389 -1.0577935  0.0474327   -22.301  &lt; 2e-16 ***\ndestination_grid_id1390 -0.7616968  0.0473764   -16.078  &lt; 2e-16 ***\ndestination_grid_id1391 -0.0708691  0.0471434    -1.503 0.132771    \ndestination_grid_id1392 -0.8283015  0.0485010   -17.078  &lt; 2e-16 ***\ndestination_grid_id1393 -1.3896085  0.0476550   -29.160  &lt; 2e-16 ***\ndestination_grid_id1394 -0.9666158  0.0472907   -20.440  &lt; 2e-16 ***\ndestination_grid_id1395 -1.3325545  0.0474147   -28.104  &lt; 2e-16 ***\ndestination_grid_id1396 -0.6956828  0.0471895   -14.742  &lt; 2e-16 ***\ndestination_grid_id1397 -1.5889890  0.0475086   -33.446  &lt; 2e-16 ***\ndestination_grid_id1398 -1.9693618  0.0489024   -40.271  &lt; 2e-16 ***\ndestination_grid_id1400 -2.5678259  0.0482143   -53.259  &lt; 2e-16 ***\ndestination_grid_id1401 -0.7372122  0.0470353   -15.674  &lt; 2e-16 ***\ndestination_grid_id1402 -1.4888644  0.0472304   -31.523  &lt; 2e-16 ***\ndestination_grid_id1404 -1.9179828  0.0517965   -37.029  &lt; 2e-16 ***\ndestination_grid_id1410  0.2352791  0.0470430     5.001 5.69e-07 ***\ndestination_grid_id1411 -0.6235164  0.0473822   -13.159  &lt; 2e-16 ***\ndestination_grid_id1412  0.0108196  0.0470628     0.230 0.818171    \ndestination_grid_id1413 -0.4434132  0.0471936    -9.396  &lt; 2e-16 ***\ndestination_grid_id1414 -0.8989556  0.0472454   -19.027  &lt; 2e-16 ***\ndestination_grid_id1415 -0.6282247  0.0471973   -13.311  &lt; 2e-16 ***\ndestination_grid_id1416 -1.0969608  0.0473752   -23.155  &lt; 2e-16 ***\ndestination_grid_id1417 -1.1265675  0.0472371   -23.849  &lt; 2e-16 ***\ndestination_grid_id1418 -1.0805271  0.0472351   -22.875  &lt; 2e-16 ***\ndestination_grid_id1419 -1.5056945  0.0475292   -31.679  &lt; 2e-16 ***\ndestination_grid_id1422 -1.9130584  0.0473235   -40.425  &lt; 2e-16 ***\ndestination_grid_id1423 -1.3677415  0.0472075   -28.973  &lt; 2e-16 ***\ndestination_grid_id1430 -0.0249009  0.0471392    -0.528 0.597331    \ndestination_grid_id1431  0.3877731  0.0470246     8.246  &lt; 2e-16 ***\ndestination_grid_id1432 -0.0514333  0.0470632    -1.093 0.274457    \ndestination_grid_id1433 -0.9572930  0.0477801   -20.035  &lt; 2e-16 ***\ndestination_grid_id1434  0.0517316  0.0470648     1.099 0.271700    \ndestination_grid_id1435 -0.5360524  0.0471223   -11.376  &lt; 2e-16 ***\ndestination_grid_id1436 -1.8935724  0.0480801   -39.384  &lt; 2e-16 ***\ndestination_grid_id1437 -1.2245235  0.0473212   -25.877  &lt; 2e-16 ***\ndestination_grid_id1438 -0.7037548  0.0470850   -14.946  &lt; 2e-16 ***\ndestination_grid_id1439  0.0927798  0.0470245     1.973 0.048494 *  \ndestination_grid_id1440 -0.5702495  0.0472943   -12.057  &lt; 2e-16 ***\ndestination_grid_id1442 -3.5334111  0.0497355   -71.044  &lt; 2e-16 ***\ndestination_grid_id1443 -1.7660531  0.0472853   -37.349  &lt; 2e-16 ***\ndestination_grid_id1444 -0.7560178  0.0473008   -15.983  &lt; 2e-16 ***\ndestination_grid_id1452  0.6125960  0.0469961    13.035  &lt; 2e-16 ***\ndestination_grid_id1453 -0.1891392  0.0471482    -4.012 6.03e-05 ***\ndestination_grid_id1454 -1.2721978  0.0481909   -26.399  &lt; 2e-16 ***\ndestination_grid_id1455 -0.7566522  0.0474051   -15.961  &lt; 2e-16 ***\ndestination_grid_id1456 -0.7337855  0.0472391   -15.533  &lt; 2e-16 ***\ndestination_grid_id1457 -0.1494634  0.0471070    -3.173 0.001510 ** \ndestination_grid_id1458  0.7638465  0.0469624    16.265  &lt; 2e-16 ***\ndestination_grid_id1459 -1.9898249  0.0475842   -41.817  &lt; 2e-16 ***\ndestination_grid_id1460 -0.8038658  0.0470965   -17.068  &lt; 2e-16 ***\ndestination_grid_id1461 -0.9560857  0.0473527   -20.191  &lt; 2e-16 ***\ndestination_grid_id1464 -1.9111795  0.0474478   -40.280  &lt; 2e-16 ***\ndestination_grid_id1465 -2.6463782  0.0480744   -55.048  &lt; 2e-16 ***\ndestination_grid_id1472 -0.4486543  0.0474121    -9.463  &lt; 2e-16 ***\ndestination_grid_id1473  0.4575367  0.0470277     9.729  &lt; 2e-16 ***\ndestination_grid_id1474  0.2493477  0.0470089     5.304 1.13e-07 ***\ndestination_grid_id1475 -0.0368712  0.0470679    -0.783 0.433415    \ndestination_grid_id1476 -1.1004329  0.0474161   -23.208  &lt; 2e-16 ***\ndestination_grid_id1477  0.6706665  0.0469542    14.283  &lt; 2e-16 ***\ndestination_grid_id1478 -1.0230050  0.0471843   -21.681  &lt; 2e-16 ***\ndestination_grid_id1479 -1.8451891  0.0474753   -38.866  &lt; 2e-16 ***\ndestination_grid_id1480  0.5116664  0.0469622    10.895  &lt; 2e-16 ***\ndestination_grid_id1481 -0.9699648  0.0472586   -20.525  &lt; 2e-16 ***\ndestination_grid_id1482  0.0126650  0.0471433     0.269 0.788199    \ndestination_grid_id1485 -3.1199235  0.0485398   -64.276  &lt; 2e-16 ***\ndestination_grid_id1494  0.2462455  0.0470749     5.231 1.69e-07 ***\ndestination_grid_id1495 -0.6552384  0.0472504   -13.867  &lt; 2e-16 ***\ndestination_grid_id1496  0.2215123  0.0470160     4.711 2.46e-06 ***\ndestination_grid_id1497 -1.1006856  0.0474364   -23.203  &lt; 2e-16 ***\ndestination_grid_id1498 -0.9395715  0.0472834   -19.871  &lt; 2e-16 ***\ndestination_grid_id1499 -0.7904907  0.0471101   -16.780  &lt; 2e-16 ***\ndestination_grid_id1500 -1.0912481  0.0476356   -22.908  &lt; 2e-16 ***\ndestination_grid_id1501 -0.5099954  0.0470579   -10.838  &lt; 2e-16 ***\ndestination_grid_id1502 -0.6120161  0.0470909   -12.996  &lt; 2e-16 ***\ndestination_grid_id1506 -4.9632925  0.0786328   -63.120  &lt; 2e-16 ***\ndestination_grid_id1515 -0.6833372  0.0488425   -13.991  &lt; 2e-16 ***\ndestination_grid_id1516  0.3239009  0.0470111     6.890 5.58e-12 ***\ndestination_grid_id1517 -0.6801932  0.0473232   -14.373  &lt; 2e-16 ***\ndestination_grid_id1518 -1.4339535  0.0475287   -30.170  &lt; 2e-16 ***\ndestination_grid_id1519 -1.3429438  0.0475821   -28.224  &lt; 2e-16 ***\ndestination_grid_id1520 -1.5545701  0.0473835   -32.808  &lt; 2e-16 ***\ndestination_grid_id1521 -1.5602638  0.0474667   -32.871  &lt; 2e-16 ***\ndestination_grid_id1522 -0.7961261  0.0471383   -16.889  &lt; 2e-16 ***\ndestination_grid_id1523  0.4720326  0.0471005    10.022  &lt; 2e-16 ***\ndestination_grid_id1524 -1.8587602  0.0482801   -38.500  &lt; 2e-16 ***\ndestination_grid_id1527 -4.1569164  0.0549285   -75.679  &lt; 2e-16 ***\ndestination_grid_id1535 -0.9912426  0.0712656   -13.909  &lt; 2e-16 ***\ndestination_grid_id1536 -1.8724964  0.0516298   -36.268  &lt; 2e-16 ***\ndestination_grid_id1537 -0.2097214  0.0472378    -4.440 9.01e-06 ***\ndestination_grid_id1538 -0.4583563  0.0471538    -9.720  &lt; 2e-16 ***\ndestination_grid_id1539 -0.4766088  0.0471004   -10.119  &lt; 2e-16 ***\ndestination_grid_id1540 -1.2907676  0.0472757   -27.303  &lt; 2e-16 ***\ndestination_grid_id1541 -0.3717063  0.0474157    -7.839 4.53e-15 ***\ndestination_grid_id1542 -1.4805222  0.0478386   -30.948  &lt; 2e-16 ***\ndestination_grid_id1543 -1.7035334  0.0534965   -31.844  &lt; 2e-16 ***\ndestination_grid_id1544 -1.4934588  0.0477338   -31.287  &lt; 2e-16 ***\ndestination_grid_id1547 -2.2859807  0.0491815   -46.481  &lt; 2e-16 ***\ndestination_grid_id1556 -1.3758782  0.0762802   -18.037  &lt; 2e-16 ***\ndestination_grid_id1557 -1.3848969  0.0494428   -28.010  &lt; 2e-16 ***\ndestination_grid_id1558 -0.5002314  0.0484755   -10.319  &lt; 2e-16 ***\ndestination_grid_id1559  0.0609891  0.0470412     1.297 0.194802    \ndestination_grid_id1560 -0.0146413  0.0470364    -0.311 0.755591    \ndestination_grid_id1561 -0.8250321  0.0473129   -17.438  &lt; 2e-16 ***\ndestination_grid_id1562 -2.9950071  0.0497600   -60.189  &lt; 2e-16 ***\ndestination_grid_id1563 -2.0294344  0.0477524   -42.499  &lt; 2e-16 ***\ndestination_grid_id1564 -1.7240211  0.0475896   -36.227  &lt; 2e-16 ***\ndestination_grid_id1565 -1.0994184  0.0472934   -23.247  &lt; 2e-16 ***\ndestination_grid_id1566 -2.9035980  0.0496561   -58.474  &lt; 2e-16 ***\ndestination_grid_id1567 -2.7339447  0.0499961   -54.683  &lt; 2e-16 ***\ndestination_grid_id1568 -1.8880650  0.0484226   -38.991  &lt; 2e-16 ***\ndestination_grid_id1578 -2.2388175  0.1114744   -20.084  &lt; 2e-16 ***\ndestination_grid_id1580 -2.7150621  0.0525133   -51.702  &lt; 2e-16 ***\ndestination_grid_id1581 -0.4175500  0.0471160    -8.862  &lt; 2e-16 ***\ndestination_grid_id1582 -0.2841398  0.0470477    -6.039 1.55e-09 ***\ndestination_grid_id1583 -2.1982937  0.0509572   -43.140  &lt; 2e-16 ***\ndestination_grid_id1584 -1.9987669  0.0483945   -41.302  &lt; 2e-16 ***\ndestination_grid_id1585 -1.3686820  0.0474888   -28.821  &lt; 2e-16 ***\ndestination_grid_id1586 -0.7606220  0.0471682   -16.126  &lt; 2e-16 ***\ndestination_grid_id1589 -3.1225098  0.0516505   -60.455  &lt; 2e-16 ***\ndestination_grid_id1590 -1.8925274  0.0487085   -38.854  &lt; 2e-16 ***\ndestination_grid_id1600 -0.9609631  0.0490505   -19.591  &lt; 2e-16 ***\ndestination_grid_id1601 -1.3680283  0.0474143   -28.853  &lt; 2e-16 ***\ndestination_grid_id1602 -1.0029559  0.0473350   -21.188  &lt; 2e-16 ***\ndestination_grid_id1603  0.0490919  0.0470499     1.043 0.296762    \ndestination_grid_id1604 -2.1839797  0.0479804   -45.518  &lt; 2e-16 ***\ndestination_grid_id1605 -1.1620964  0.0472263   -24.607  &lt; 2e-16 ***\ndestination_grid_id1606 -1.9275108  0.0487363   -39.550  &lt; 2e-16 ***\ndestination_grid_id1607 -0.6574110  0.0470839   -13.963  &lt; 2e-16 ***\ndestination_grid_id1608 -1.3500254  0.0473022   -28.540  &lt; 2e-16 ***\ndestination_grid_id1609 -0.6706308  0.0471666   -14.218  &lt; 2e-16 ***\ndestination_grid_id1610 -2.8168154  0.0537930   -52.364  &lt; 2e-16 ***\ndestination_grid_id1622 -0.7724271  0.0482835   -15.998  &lt; 2e-16 ***\ndestination_grid_id1623 -0.3754262  0.0470742    -7.975 1.52e-15 ***\ndestination_grid_id1624  0.1963396  0.0470391     4.174 2.99e-05 ***\ndestination_grid_id1625 -0.7351307  0.0472169   -15.569  &lt; 2e-16 ***\ndestination_grid_id1626  0.9914508  0.0469466    21.119  &lt; 2e-16 ***\ndestination_grid_id1627 -2.1763881  0.0476936   -45.633  &lt; 2e-16 ***\ndestination_grid_id1628 -0.0803631  0.0470247    -1.709 0.087459 .  \ndestination_grid_id1629 -3.0658573  0.0489343   -62.653  &lt; 2e-16 ***\ndestination_grid_id1630 -2.7249777  0.0482438   -56.483  &lt; 2e-16 ***\ndestination_grid_id1631 -3.1804432  0.0505148   -62.961  &lt; 2e-16 ***\ndestination_grid_id1642 -3.2303351  0.0567141   -56.958  &lt; 2e-16 ***\ndestination_grid_id1643 -0.8722303  0.0472392   -18.464  &lt; 2e-16 ***\ndestination_grid_id1644 -0.9766216  0.0475553   -20.537  &lt; 2e-16 ***\ndestination_grid_id1645 -1.0046524  0.0472907   -21.244  &lt; 2e-16 ***\ndestination_grid_id1646 -0.8058033  0.0475101   -16.961  &lt; 2e-16 ***\ndestination_grid_id1647 -1.4503479  0.0472669   -30.684  &lt; 2e-16 ***\ndestination_grid_id1648 -1.4471840  0.0472363   -30.637  &lt; 2e-16 ***\ndestination_grid_id1649 -0.8278848  0.0470750   -17.587  &lt; 2e-16 ***\ndestination_grid_id1650 -1.7553480  0.0474794   -36.971  &lt; 2e-16 ***\ndestination_grid_id1664 -5.2768681  0.1254193   -42.074  &lt; 2e-16 ***\ndestination_grid_id1665 -0.2359395  0.0470572    -5.014 5.33e-07 ***\ndestination_grid_id1666 -0.2272824  0.0470565    -4.830 1.37e-06 ***\ndestination_grid_id1667 -1.2890124  0.0494622   -26.061  &lt; 2e-16 ***\ndestination_grid_id1668 -1.4549145  0.0473587   -30.721  &lt; 2e-16 ***\ndestination_grid_id1670 -1.0674286  0.0471099   -22.658  &lt; 2e-16 ***\ndestination_grid_id1671 -1.4083641  0.0480358   -29.319  &lt; 2e-16 ***\ndestination_grid_id1672 -2.4495728  0.0483082   -50.707  &lt; 2e-16 ***\ndestination_grid_id1684 -0.7331561  0.0478227   -15.331  &lt; 2e-16 ***\ndestination_grid_id1685 -1.6645209  0.0476676   -34.919  &lt; 2e-16 ***\ndestination_grid_id1686 -0.8992969  0.0472266   -19.042  &lt; 2e-16 ***\ndestination_grid_id1687 -0.6543082  0.0473613   -13.815  &lt; 2e-16 ***\ndestination_grid_id1688 -1.3749686  0.0473532   -29.036  &lt; 2e-16 ***\ndestination_grid_id1689 -2.1618248  0.0478595   -45.170  &lt; 2e-16 ***\ndestination_grid_id1690 -2.8368268  0.0485271   -58.459  &lt; 2e-16 ***\ndestination_grid_id1691 -1.0058103  0.0471049   -21.353  &lt; 2e-16 ***\ndestination_grid_id1692 -2.8672713  0.0488030   -58.752  &lt; 2e-16 ***\ndestination_grid_id1706 -1.0104428  0.0474978   -21.273  &lt; 2e-16 ***\ndestination_grid_id1707 -1.7324196  0.0475590   -36.427  &lt; 2e-16 ***\ndestination_grid_id1708 -1.1087623  0.0472835   -23.449  &lt; 2e-16 ***\ndestination_grid_id1709 -0.4487121  0.0471093    -9.525  &lt; 2e-16 ***\ndestination_grid_id1710 -0.6814932  0.0471551   -14.452  &lt; 2e-16 ***\ndestination_grid_id1711 -0.0659484  0.0470180    -1.403 0.160730    \ndestination_grid_id1712 -0.9922208  0.0470871   -21.072  &lt; 2e-16 ***\ndestination_grid_id1713 -3.3687837  0.0492676   -68.377  &lt; 2e-16 ***\ndestination_grid_id1714 -2.0130916  0.0475905   -42.300  &lt; 2e-16 ***\ndestination_grid_id1727 -0.4945980  0.0471936   -10.480  &lt; 2e-16 ***\ndestination_grid_id1728 -0.4545265  0.0470956    -9.651  &lt; 2e-16 ***\ndestination_grid_id1729 -0.3301878  0.0470724    -7.014 2.31e-12 ***\ndestination_grid_id1730 -1.5504224  0.0476690   -32.525  &lt; 2e-16 ***\ndestination_grid_id1731 -0.8862015  0.0471652   -18.789  &lt; 2e-16 ***\ndestination_grid_id1732 -1.1014391  0.0471121   -23.379  &lt; 2e-16 ***\ndestination_grid_id1733 -2.3141372  0.0475626   -48.655  &lt; 2e-16 ***\ndestination_grid_id1734 -1.1765421  0.0471364   -24.960  &lt; 2e-16 ***\ndestination_grid_id1735 -1.8648343  0.0489516   -38.095  &lt; 2e-16 ***\ndestination_grid_id1748 -1.4788097  0.0476896   -31.009  &lt; 2e-16 ***\ndestination_grid_id1749 -0.2601688  0.0470494    -5.530 3.21e-08 ***\ndestination_grid_id1750 -0.3746292  0.0470745    -7.958 1.75e-15 ***\ndestination_grid_id1751 -0.8336008  0.0472806   -17.631  &lt; 2e-16 ***\ndestination_grid_id1753 -0.6886288  0.0471001   -14.621  &lt; 2e-16 ***\ndestination_grid_id1754  0.2485996  0.0469660     5.293 1.20e-07 ***\ndestination_grid_id1755 -0.5921853  0.0470244   -12.593  &lt; 2e-16 ***\ndestination_grid_id1756 -1.6157628  0.0472161   -34.221  &lt; 2e-16 ***\ndestination_grid_id1757 -3.9572996  0.0518478   -76.325  &lt; 2e-16 ***\ndestination_grid_id1769 -1.0047192  0.0473168   -21.234  &lt; 2e-16 ***\ndestination_grid_id1770 -0.9331781  0.0474600   -19.662  &lt; 2e-16 ***\ndestination_grid_id1771 -0.2323086  0.0471404    -4.928 8.31e-07 ***\ndestination_grid_id1772  0.7350986  0.0474059    15.506  &lt; 2e-16 ***\ndestination_grid_id1774 -1.8401884  0.0473901   -38.831  &lt; 2e-16 ***\ndestination_grid_id1775 -2.2940855  0.0475461   -48.250  &lt; 2e-16 ***\ndestination_grid_id1776  0.0180166  0.0469764     0.384 0.701331    \ndestination_grid_id1777 -2.1123943  0.0474479   -44.520  &lt; 2e-16 ***\ndestination_grid_id1778 -3.0462813  0.0513709   -59.300  &lt; 2e-16 ***\ndestination_grid_id1790 -0.1720101  0.0471441    -3.649 0.000264 ***\ndestination_grid_id1791 -0.7789784  0.0472374   -16.491  &lt; 2e-16 ***\ndestination_grid_id1792 -0.6832277  0.0474044   -14.413  &lt; 2e-16 ***\ndestination_grid_id1793 -0.6633995  0.0472199   -14.049  &lt; 2e-16 ***\ndestination_grid_id1794  1.0312991  0.0474598    21.730  &lt; 2e-16 ***\ndestination_grid_id1795 -3.2806464  0.0515520   -63.638  &lt; 2e-16 ***\ndestination_grid_id1796 -1.2115199  0.0471990   -25.668  &lt; 2e-16 ***\ndestination_grid_id1797 -1.5693712  0.0472070   -33.244  &lt; 2e-16 ***\ndestination_grid_id1798 -1.5014374  0.0471795   -31.824  &lt; 2e-16 ***\ndestination_grid_id1799 -2.4829829  0.0478040   -51.941  &lt; 2e-16 ***\ndestination_grid_id1800 -4.1435482  0.0691638   -59.909  &lt; 2e-16 ***\ndestination_grid_id1811 -1.2128885  0.0474751   -25.548  &lt; 2e-16 ***\ndestination_grid_id1812  0.1288237  0.0470065     2.741 0.006134 ** \ndestination_grid_id1813  0.2978536  0.0469994     6.337 2.34e-10 ***\ndestination_grid_id1817 -2.7695253  0.0483496   -57.281  &lt; 2e-16 ***\ndestination_grid_id1818 -2.0141516  0.0472880   -42.593  &lt; 2e-16 ***\ndestination_grid_id1819 -0.1678031  0.0469918    -3.571 0.000356 ***\ndestination_grid_id1820 -4.9051763  0.0626682   -78.272  &lt; 2e-16 ***\ndestination_grid_id1832  0.0879373  0.0470722     1.868 0.061743 .  \ndestination_grid_id1833 -1.2945398  0.0473836   -27.320  &lt; 2e-16 ***\ndestination_grid_id1834 -1.3855656  0.0473572   -29.258  &lt; 2e-16 ***\ndestination_grid_id1835 -1.2816114  0.0474677   -27.000  &lt; 2e-16 ***\ndestination_grid_id1837 -1.4433704  0.0488535   -29.545  &lt; 2e-16 ***\ndestination_grid_id1839 -2.8154034  0.0482680   -58.329  &lt; 2e-16 ***\ndestination_grid_id1840 -0.1393192  0.0470040    -2.964 0.003037 ** \ndestination_grid_id1841 -3.6708632  0.0519867   -70.612  &lt; 2e-16 ***\ndestination_grid_id1842 -1.3266668  0.0496001   -26.747  &lt; 2e-16 ***\ndestination_grid_id1853 -0.9280726  0.0472437   -19.644  &lt; 2e-16 ***\ndestination_grid_id1854 -0.6625353  0.0471619   -14.048  &lt; 2e-16 ***\ndestination_grid_id1855 -0.2966488  0.0471043    -6.298 3.02e-10 ***\ndestination_grid_id1858 -0.3849447  0.0476541    -8.078 6.59e-16 ***\ndestination_grid_id1860 -2.1123677  0.0502203   -42.062  &lt; 2e-16 ***\ndestination_grid_id1861 -1.8277601  0.0473268   -38.620  &lt; 2e-16 ***\ndestination_grid_id1874 -1.2570480  0.0478002   -26.298  &lt; 2e-16 ***\ndestination_grid_id1875 -2.9283608  0.0508390   -57.601  &lt; 2e-16 ***\ndestination_grid_id1876 -1.7088004  0.0516902   -33.059  &lt; 2e-16 ***\ndestination_grid_id1877 -0.5011087  0.0471396   -10.630  &lt; 2e-16 ***\ndestination_grid_id1880 -1.2892913  0.0489505   -26.339  &lt; 2e-16 ***\ndestination_grid_id1882 -1.7395906  0.0473200   -36.762  &lt; 2e-16 ***\ndestination_grid_id1883 -2.6769479  0.0506987   -52.801  &lt; 2e-16 ***\ndestination_grid_id1895 -0.6307777  0.0472048   -13.363  &lt; 2e-16 ***\ndestination_grid_id1896 -1.6026233  0.0475367   -33.713  &lt; 2e-16 ***\ndestination_grid_id1897 -2.2745454  0.0483107   -47.082  &lt; 2e-16 ***\ndestination_grid_id1898 -2.7024303  0.0525963   -51.381  &lt; 2e-16 ***\ndestination_grid_id1901 -1.7996182  0.0513381   -35.054  &lt; 2e-16 ***\ndestination_grid_id1903 -3.1887384  0.0499297   -63.865  &lt; 2e-16 ***\ndestination_grid_id1917 -1.6310959  0.0476947   -34.199  &lt; 2e-16 ***\ndestination_grid_id1918 -0.4420768  0.0473020    -9.346  &lt; 2e-16 ***\ndestination_grid_id1919 -0.3651696  0.0471126    -7.751 9.12e-15 ***\ndestination_grid_id1922 -0.5184277  0.0479889   -10.803  &lt; 2e-16 ***\ndestination_grid_id1924 -3.1386555  0.0504751   -62.182  &lt; 2e-16 ***\ndestination_grid_id1937 -1.1151469  0.0474977   -23.478  &lt; 2e-16 ***\ndestination_grid_id1938 -0.2972322  0.0471001    -6.311 2.78e-10 ***\ndestination_grid_id1939 -1.4019539  0.0475767   -29.467  &lt; 2e-16 ***\ndestination_grid_id1942 -2.0726649  0.0509710   -40.664  &lt; 2e-16 ***\ndestination_grid_id1959 -1.4731212  0.0477745   -30.835  &lt; 2e-16 ***\ndestination_grid_id1960  0.8795117  0.0469549    18.731  &lt; 2e-16 ***\ndestination_grid_id1961 -1.8029586  0.0479379   -37.610  &lt; 2e-16 ***\ndestination_grid_id1962 -0.9653112  0.0472929   -20.411  &lt; 2e-16 ***\ndestination_grid_id1964 -0.3195128  0.0482493    -6.622 3.54e-11 ***\ndestination_grid_id1979 -1.1407938  0.0476438   -23.944  &lt; 2e-16 ***\ndestination_grid_id1980 -1.3252292  0.0473554   -27.985  &lt; 2e-16 ***\ndestination_grid_id1981 -1.4265517  0.0474468   -30.066  &lt; 2e-16 ***\ndestination_grid_id1982 -0.7454090  0.0474262   -15.717  &lt; 2e-16 ***\ndestination_grid_id1983 -1.0561217  0.0472938   -22.331  &lt; 2e-16 ***\ndestination_grid_id1984 -0.9449171  0.0473057   -19.975  &lt; 2e-16 ***\ndestination_grid_id1985 -0.7355487  0.0472317   -15.573  &lt; 2e-16 ***\ndestination_grid_id2001 -1.0454730  0.0473473   -22.081  &lt; 2e-16 ***\ndestination_grid_id2002 -0.8872296  0.0471495   -18.817  &lt; 2e-16 ***\ndestination_grid_id2003 -0.3545702  0.0470890    -7.530 5.08e-14 ***\ndestination_grid_id2004 -0.1776442  0.0470798    -3.773 0.000161 ***\ndestination_grid_id2005 -1.1495981  0.0473106   -24.299  &lt; 2e-16 ***\ndestination_grid_id2006 -0.2535352  0.0471149    -5.381 7.40e-08 ***\ndestination_grid_id2007 -3.5707589  0.0546439   -65.346  &lt; 2e-16 ***\ndestination_grid_id2022 -0.4798520  0.0473233   -10.140  &lt; 2e-16 ***\ndestination_grid_id2023 -0.5303433  0.0471260   -11.254  &lt; 2e-16 ***\ndestination_grid_id2024 -0.2094012  0.0470527    -4.450 8.57e-06 ***\ndestination_grid_id2025 -1.5037248  0.0473366   -31.767  &lt; 2e-16 ***\ndestination_grid_id2026 -2.1368685  0.0482246   -44.311  &lt; 2e-16 ***\ndestination_grid_id2027 -0.2554754  0.0471011    -5.424 5.83e-08 ***\ndestination_grid_id2043 -1.8506799  0.0481207   -38.459  &lt; 2e-16 ***\ndestination_grid_id2044 -1.1330823  0.0472936   -23.958  &lt; 2e-16 ***\ndestination_grid_id2045 -1.6834937  0.0484009   -34.782  &lt; 2e-16 ***\ndestination_grid_id2046 -0.2080279  0.0470277    -4.424 9.71e-06 ***\ndestination_grid_id2047 -2.0510351  0.0477481   -42.955  &lt; 2e-16 ***\ndestination_grid_id2048 -1.7861990  0.0476212   -37.509  &lt; 2e-16 ***\ndestination_grid_id2049 -3.6384315  0.0542390   -67.081  &lt; 2e-16 ***\ndestination_grid_id2064 -1.1977977  0.0474471   -25.245  &lt; 2e-16 ***\ndestination_grid_id2065 -1.4760969  0.0475154   -31.066  &lt; 2e-16 ***\ndestination_grid_id2066 -3.3836472  0.0563554   -60.041  &lt; 2e-16 ***\ndestination_grid_id2067  1.3159241  0.0469453    28.031  &lt; 2e-16 ***\ndestination_grid_id2068 -2.0070524  0.0485223   -41.364  &lt; 2e-16 ***\ndestination_grid_id2069 -1.5585151  0.0475949   -32.745  &lt; 2e-16 ***\ndestination_grid_id2085 -1.1453948  0.0475371   -24.095  &lt; 2e-16 ***\ndestination_grid_id2086  0.3488350  0.0470388     7.416 1.21e-13 ***\ndestination_grid_id2087  0.0641252  0.0470604     1.363 0.173004    \ndestination_grid_id2088 -1.1779601  0.0472319   -24.940  &lt; 2e-16 ***\ndestination_grid_id2089 -1.7473534  0.0477527   -36.592  &lt; 2e-16 ***\ndestination_grid_id2090  0.9588788  0.0469661    20.416  &lt; 2e-16 ***\ndestination_grid_id2091 -4.1066690  0.0775272   -52.971  &lt; 2e-16 ***\ndestination_grid_id2105 -1.1789455  0.0889649   -13.252  &lt; 2e-16 ***\ndestination_grid_id2106 -2.5806539  0.0492689   -52.379  &lt; 2e-16 ***\ndestination_grid_id2107  0.2434457  0.0470413     5.175 2.28e-07 ***\ndestination_grid_id2108 -0.1420051  0.0471212    -3.014 0.002582 ** \ndestination_grid_id2109 -1.4863620  0.0473297   -31.404  &lt; 2e-16 ***\ndestination_grid_id2110 -2.3493330  0.0483623   -48.578  &lt; 2e-16 ***\ndestination_grid_id2111 -3.4043895  0.0572827   -59.431  &lt; 2e-16 ***\ndestination_grid_id2128 -1.0303375  0.0477864   -21.561  &lt; 2e-16 ***\ndestination_grid_id2129 -0.9679845  0.0479116   -20.204  &lt; 2e-16 ***\ndestination_grid_id2130 -0.9691213  0.0471986   -20.533  &lt; 2e-16 ***\ndestination_grid_id2131 -1.0586001  0.0474515   -22.309  &lt; 2e-16 ***\ndestination_grid_id2132 -1.4756622  0.0474624   -31.091  &lt; 2e-16 ***\ndestination_grid_id2148 -1.4733857  0.0489682   -30.089  &lt; 2e-16 ***\ndestination_grid_id2149 -1.6136261  0.0481059   -33.543  &lt; 2e-16 ***\ndestination_grid_id2150 -1.2096656  0.0475548   -25.437  &lt; 2e-16 ***\ndestination_grid_id2151  0.3752866  0.0469973     7.985 1.40e-15 ***\ndestination_grid_id2152 -0.6009519  0.0471757   -12.739  &lt; 2e-16 ***\ndestination_grid_id2153 -1.8595938  0.0482160   -38.568  &lt; 2e-16 ***\ndestination_grid_id2171 -0.3347908  0.0471989    -7.093 1.31e-12 ***\ndestination_grid_id2172 -2.0771314  0.0482251   -43.072  &lt; 2e-16 ***\ndestination_grid_id2173 -1.6401991  0.0474687   -34.553  &lt; 2e-16 ***\ndestination_grid_id2174 -1.0751798  0.0473941   -22.686  &lt; 2e-16 ***\ndestination_grid_id2191 -0.0967660  0.0474786    -2.038 0.041540 *  \ndestination_grid_id2192 -1.4362629  0.0480825   -29.871  &lt; 2e-16 ***\ndestination_grid_id2193 -0.7505637  0.0472926   -15.871  &lt; 2e-16 ***\ndestination_grid_id2194 -0.9130586  0.0472557   -19.322  &lt; 2e-16 ***\ndestination_grid_id2195 -2.6609821  0.0579226   -45.940  &lt; 2e-16 ***\ndestination_grid_id2212 -0.1536447  0.0488329    -3.146 0.001653 ** \ndestination_grid_id2213 -0.4322936  0.0476007    -9.082  &lt; 2e-16 ***\ndestination_grid_id2214  0.2916684  0.0474537     6.146 7.93e-10 ***\ndestination_grid_id2215 -1.3808317  0.0478053   -28.885  &lt; 2e-16 ***\ndestination_grid_id2216 -0.5331340  0.0472712   -11.278  &lt; 2e-16 ***\ndestination_grid_id2233  0.2539919  0.0479327     5.299 1.16e-07 ***\ndestination_grid_id2234  0.8071145  0.0476307    16.945  &lt; 2e-16 ***\ndestination_grid_id2235 -0.6047889  0.0477850   -12.656  &lt; 2e-16 ***\ndestination_grid_id2236 -2.0075861  0.0487944   -41.144  &lt; 2e-16 ***\ndestination_grid_id2237 -0.5560684  0.0483400   -11.503  &lt; 2e-16 ***\ndestination_grid_id2256 -0.5108274  0.0486242   -10.506  &lt; 2e-16 ***\ndestination_grid_id2257 -2.7487930  0.0536155   -51.269  &lt; 2e-16 ***\ndestination_grid_id2258 -0.8097329  0.0474778   -17.055  &lt; 2e-16 ***\ndestination_grid_id2259  0.2995320  0.0480140     6.238 4.42e-10 ***\ndestination_grid_id2277 -1.5250815  0.0530068   -28.771  &lt; 2e-16 ***\ndestination_grid_id2278 -1.2465706  0.0494592   -25.204  &lt; 2e-16 ***\ndestination_grid_id2279 -0.5055456  0.0474675   -10.650  &lt; 2e-16 ***\ndestination_grid_id2280 -1.8558599  0.0567405   -32.708  &lt; 2e-16 ***\ndestination_grid_id2297 -1.4450010  0.0495561   -29.159  &lt; 2e-16 ***\ndestination_grid_id2300 -1.4105636  0.0509066   -27.709  &lt; 2e-16 ***\ndestination_grid_id2301 -0.8606527  0.0479151   -17.962  &lt; 2e-16 ***\ndestination_grid_id2318  0.5772563  0.0472170    12.226  &lt; 2e-16 ***\ndestination_grid_id2319  0.5300293  0.0471798    11.234  &lt; 2e-16 ***\ndestination_grid_id2322 -0.4890401  0.0478222   -10.226  &lt; 2e-16 ***\ndestination_grid_id2337  0.0170851  0.0505106     0.338 0.735177    \ndestination_grid_id2341  0.7948271  0.0471582    16.854  &lt; 2e-16 ***\ndestination_grid_id2343 -1.3020124  0.0485809   -26.801  &lt; 2e-16 ***\ndestination_grid_id2361 -0.4295237  0.0477139    -9.002  &lt; 2e-16 ***\ndestination_grid_id2364 -2.4230515  0.0554822   -43.673  &lt; 2e-16 ***\ndestination_grid_id2379 -1.4090617  0.0546342   -25.791  &lt; 2e-16 ***\ndestination_grid_id2384  0.5543831  0.0473630    11.705  &lt; 2e-16 ***\ndestination_grid_id2405  1.1957541  0.0471729    25.348  &lt; 2e-16 ***\ndestination_grid_id2406 -1.8386077  0.0526900   -34.895  &lt; 2e-16 ***\ndestination_grid_id2426  0.6390496  0.0482334    13.249  &lt; 2e-16 ***\ndestination_grid_id2427  0.9499745  0.0473873    20.047  &lt; 2e-16 ***\ndestination_grid_id2505  0.5364848  0.0507125    10.579  &lt; 2e-16 ***\nlog(dist)               -1.6070252  0.0002917 -5508.606  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 98623575  on 65029  degrees of freedom\nResidual deviance: 24642152  on 63396  degrees of freedom\nAIC: 25002770\n\nNumber of Fisher Scoring iterations: 9\n\n\nNext, let us examine how well the proportion of variance in the dependent variable (i.e. TRIPS) that can be explained by the explanatory variables.\n\nCalcRSquared(dbcSIM_Poisson$data$TRIPS,\n             dbcSIM_Poisson$fitted.values)\n\n[1] 0.6000788\n\n\nWith reference to the R-Squared above, we can conclude that the model accounts for about 60% of the variation of flows in the systems. Notice that there is a relatively greater improvement in the R-Squared value."
  },
  {
    "objectID": "Take-home_Ex2/Take-home_Ex2.html#model-comparison",
    "href": "Take-home_Ex2/Take-home_Ex2.html#model-comparison",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models - Case Study of Singapore public bus commuter flows",
    "section": "Model comparison",
    "text": "Model comparison\n\nStatistical measures\nAnother useful model performance measure for continuous dependent variable is Root Mean Squared Error. In this sub-section, you will learn how to use compare_performance() of performance package\nFirst of all, let us create a list called model_list by using the code chunk below.\n\nmodel_list &lt;- list(\n  Origin_Constrained = orcSIM_Poisson,\n  Doubly_Constrained = dbcSIM_Poisson)\n\nNext, we will compute the RMSE of all the models in model_list file by using the code chunk below.\n\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName               | Model |     RMSE\n-------------------------------------\nOrigin_Constrained |   glm | 1627.804\nDoubly_Constrained |   glm | 1172.502\n\n\nThe print above reveals that doubly constrained SIM is the best model among the two SIMs because it has the smallest RMSE value of 1172.502.\n\nVisualising fitted values\nIn this section, you will learn how to visualise the observed values and the fitted values.\nFirstly we will extract the fitted values from Origin-constrained Model by using the code chunk below.\n\ndf &lt;- as.data.frame(orcSIM_Poisson$fitted.values) %&gt;%\n  round(digits = 0)\n\nNext, we will append the fitted values into flow_data_tidy data frame by using the code chunk below.\n\nflow_data_tidy2 &lt;- flow_data_tidy %&gt;%\n  cbind(df) %&gt;%\n  rename(orcTRIPS = \"orcSIM_Poisson.fitted.values\")\n\nSimilarly for the Doubly Constained Model (i.e., dbcSIM_Poisson):\n\ndf &lt;- as.data.frame(dbcSIM_Poisson$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nflow_data_tidy2 &lt;- flow_data_tidy2 %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM_Poisson.fitted.values\")\n\nNext, two scatterplots will be created by using geom_point() and other appropriate functions of ggplot2 package.\n\norc_p &lt;- ggplot(data = flow_data_tidy2,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  coord_cartesian(xlim=c(0,150000),\n                  ylim=c(0,150000))\n\ndbc_p &lt;- ggplot(data = flow_data_tidy2,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  coord_cartesian(xlim=c(0,150000),\n                  ylim=c(0,150000))\n\nNow, we will put all the graphs into a single visual for better comparison by using the code chunk below.\n\nggarrange(orc_p, dbc_p,\n          ncol = 2,\n          nrow = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Take-home_Ex2/data/geospatial/Retails.html",
    "href": "Take-home_Ex2/data/geospatial/Retails.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex2/data/geospatial/Liesure&Recreation.html",
    "href": "Take-home_Ex2/data/geospatial/Liesure&Recreation.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex2/data/geospatial/F&B.html",
    "href": "Take-home_Ex2/data/geospatial/F&B.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex2/data/geospatial/Business.html",
    "href": "Take-home_Ex2/data/geospatial/Business.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex5/In-class_Ex5.html",
    "href": "In-class_Ex5/In-class_Ex5.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "install development version of spflow package.\ndevtools::install_github(\"LukeCe/spflow\")\nNext, we will load spflow and other R packages into R environment.\npacman::p_load(tmap, sf, spdep, sp, Matrix,\n               spflow, reshape2, knitr,\n               tidyverse)"
  },
  {
    "objectID": "In-class_Ex5/In-class_Ex5.html#data-preparation",
    "href": "In-class_Ex5/In-class_Ex5.html#data-preparation",
    "title": "In-class Exercise 5",
    "section": "Data Preparation",
    "text": "Data Preparation\nBefore we can calibrate Spatial Econometric Interaction Models by using spflow package, three data sets are required. They are:\n\na spatial weights\na tibble data frame consisting of the origins, destinations, flows and distances between the origins and destinations,\na tibble data frame consisting of the explanatory variables.\n\nBuilding the geographical area\nFor the purpose of this study, URA Master Planning 2019 Planning Subzone GIS data will be used.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nONLY FACTOR DATA TYPE WILL BE DUMMY VARAIBLE IN REGRESSION MODEL\nIF NUMERIC FIELD - WILL BE TREATED AS CONTINUOUS VARIABLE IN REGRESSION MODEL\nSUBZONE_C: chr field\nby knn: 6 if you using hexagon\n\n::: callout note\n\n:::\n\n\nmpsz_nb &lt;- read_rds(\"data/rds/mpsz_nb.rds\")\nmpsz_flow &lt;- read_rds(\"data/rds/mpsz_flow.rds\")\nmpsz_var &lt;- read_rds(\"data/rds/mpsz_var.rds\")\n\nFor our model, we choose the contiguity based neighbourhood structure:\n\nmpsz_net &lt;- spflow_network(\n  id_net = \"sg\", \n  node_neighbourhood =\n    nb2mat(mpsz_nb$by_contiguity),\n  node_data = mpsz_var,\n  node_key_column = \"SZ_CODE\")\n\nmpsz_net\n\n\nmpsz_net_pairs &lt;- spflow_network_pair(\n  id_orig_net = \"sg\",\n  id_dest_net = \"sg\",\n  pair_data = mpsz_flow,\n  orig_key_column = \"ORIGIN_Sz\",\n  dest_key_column = \"DEST_SZ\")\n\nmpsz_net_pairs\n\n\nmps_multi_net &lt;- spflow_network_multi(mpsz_net, mpsz_net_pairs)\n\npurpose of correlogram: detect multicollinearity, see if you have any suitable explanatory variables.\nP_ refers to impedience (distance/transport cost/travelling time)\n\nbase_model &lt;- spflow(\n  spflow_formula = log(1+TRIPS) ~\n    O_(BUSSTOP_COUNT + AGE25_64) +\n    D_(SCHOOL_COUNT + )\n)\n\nlog(1 + ____) usually +1 to avoid log(0)"
  },
  {
    "objectID": "Take-home_Ex2/data/geospatial/entertn.html",
    "href": "Take-home_Ex2/data/geospatial/entertn.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex2/data/geospatial/FinServ.html",
    "href": "Take-home_Ex2/data/geospatial/FinServ.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex2/data/geospatial/MPSZ-2019.html",
    "href": "Take-home_Ex2/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4A.html",
    "href": "In-class_Ex4/In-class_Ex4A.html",
    "title": "In-class Exercise 4A: Preparing Spatial Interaction Modelling Variables",
    "section": "",
    "text": "A well calibrated Spatial Interaction Model need conceptually logical and well prepared propulsiveness and attractiveness variables. In this in-class exercise, you will gain hands-on experience on preparing propulsiveness and attractiveness variables require for calibrating spatial interaction models. By the end of this in-class exercise, we will be able to:\n\nperform geocoding by using SLA OneMap API,\nconvert an aspatial data into a simple feature tibble data.frame,\nperform point-in-polygon count analysis, and\nappend the propulsiveness and attractiveness variables onto a flow data."
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4A.html#overview",
    "href": "In-class_Ex4/In-class_Ex4A.html#overview",
    "title": "In-class Exercise 4A: Preparing Spatial Interaction Modelling Variables",
    "section": "",
    "text": "A well calibrated Spatial Interaction Model need conceptually logical and well prepared propulsiveness and attractiveness variables. In this in-class exercise, you will gain hands-on experience on preparing propulsiveness and attractiveness variables require for calibrating spatial interaction models. By the end of this in-class exercise, we will be able to:\n\nperform geocoding by using SLA OneMap API,\nconvert an aspatial data into a simple feature tibble data.frame,\nperform point-in-polygon count analysis, and\nappend the propulsiveness and attractiveness variables onto a flow data."
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4A.html#getting-started",
    "href": "In-class_Ex4/In-class_Ex4A.html#getting-started",
    "title": "In-class Exercise 4A: Preparing Spatial Interaction Modelling Variables",
    "section": "Getting Started",
    "text": "Getting Started\nTo get started, the following R packages will be loaded into R environment:\n\npacman::p_load(tidyverse, sf, httr,\n               tmap)"
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4A.html#counting-number-of-schools-in-each-ura-planning-subzone",
    "href": "In-class_Ex4/In-class_Ex4A.html#counting-number-of-schools-in-each-ura-planning-subzone",
    "title": "In-class Exercise 4A: Preparing Spatial Interaction Modelling Variables",
    "section": "Counting number of schools in each URA Planning Subzone",
    "text": "Counting number of schools in each URA Planning Subzone\n\nDownloading General information of schools data from data.gov.sg\nWe download General information of schools data set of School Directory and Information from data.gov.sg.\n\n\nGeocoding using SLA API\nAddress geocoding, or simply geocoding, is the process of taking a aspatial description of a location, such as an address or postcode, and returning geographic coordinates, frequently latitude/longitude pair, to identify a location on the Earth’s surface.\nSingapore Land Authority (SLA) supports an online geocoding service called OneMap API. The Search API looks up the address data or 6-digit postal code for an entered value. It then returns both latitude, longitude and x,y coordinates of the searched location.\nThe code chunks below will perform geocoding using SLA OneMap API. The input data will be in csv file format. It will be read into R Studio environment using read_csv function of readr package. A collection of http call functions of httr package of R will then be used to pass the individual records to the geocoding server at OneMap.\nTwo tibble data.frames will be created if the geocoding process completed successfully. They are called found and not_found. found contains all records that are geocoded correctly and not_found contains postal that failed to be geocoded.\nLastly, the found data table will join with the initial csv data table by using a unique identifier (i.e. POSTAL) common to both data tables. The output data table will then save as an csv file called found.\n\nurl&lt;-\"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv&lt;-read_csv(\"data/aspatial/Generalinformationofschools.csv\")\n\nRows: 346 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (31): school_name, url_address, address, postal_code, telephone_no, tele...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\npostcodes&lt;-csv$`postal_code`\n\nfound&lt;-data.frame()\nnot_found&lt;-data.frame()\n\nfor(postcode in postcodes){\n  query&lt;-list('searchVal'=postcode,'returnGeom'='Y','getAddrDetails'='Y','pageNum'='1')\n  res&lt;- GET(url,query=query)\n  \n  if((content(res)$found)!=0){\n    found&lt;-rbind(found,data.frame(content(res))[4:13])\n  } else{\n    not_found = data.frame(postcode)\n  }\n}\n\nNext, the code chunk below will be used to combine both found and not_found data.frames into a single tibble data.frame called merged. At the same time, we will write merged and not_found tibble data.frames into two separate csv files called schools and not_found respectively.\n\nmerged = merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE)\nwrite.csv(merged, file = \"data/aspatial/schools.csv\")\nwrite.csv(not_found, file = \"data/aspatial/not_found.csv\")\n\n\n\nTidying schools data.frame\nIn this sub-section, we import schools.csv into R environment and at the same time tidying the data by selecting only the necessary fields as well as rename some fields.\n\nschools &lt;- read_csv(\"data/aspatial/schools.csv\", show_col_types = FALSE) %&gt;%\n  rename(latitude = \"results.LATITUDE\",\n         longitude = \"results.LONGITUDE\")%&gt;%\n  select(postal_code, school_name, latitude, longitude)\n\nNew names:\n• `` -&gt; `...1`\n\n\n\n\nConverting an aspatial data into sf tibble data.frame\nNext, we will convert schools tibble data.frame data into a simple feature tibble data.frame called schools_sf by using values in latitude and longitude fields.\nThis is done using the st_as_sf() of sf package.\n\nschools_sf &lt;- st_as_sf(schools, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\n\n\nPlotting a point simple feature layer\nTo ensure that schools sf tibble data.frame has been projected and converted correctly, you can plot the schools point data for visual inspection.\nFirst, let us import MPSZ-2019 shapefile into R environment and save it as an sf tibble data.frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial/\",\n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\PeiShan0502\\ISSS624\\In-class_Ex4\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nWe create a point symbol map showing the location of schools with OSM as the background map.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(schools_sf) +\n  tm_dots()\n\nWarning: The shape mpsz is invalid. See sf::st_is_valid\n\n\n\n\n\n\n\nPerforming point-in-polygon count process\nNext, we will count the number of schools located inside the planning subzones.\n\nmpsz$`SCHOOL_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz, schools_sf))\n\n\nsummary(mpsz$SCHOOL_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   1.054   2.000  12.000 \n\n\nThe summary statistics above reveals that there are excessive 0 values in SCHOOL_COUNT field. If log() is going to use to transform this field, additional step is required to ensure that all 0 will be replaced with a value between 0 and 1 but not 0 neither 1."
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4A.html#data-integration-and-final-touch-up",
    "href": "In-class_Ex4/In-class_Ex4A.html#data-integration-and-final-touch-up",
    "title": "In-class Exercise 4A: Preparing Spatial Interaction Modelling Variables",
    "section": "Data Integration and Final Touch-up",
    "text": "Data Integration and Final Touch-up\nTo count number of business points in each planning subzone:\n\nbusiness_sf &lt;- st_read(dsn = \"data/geospatial\",\n                      layer = \"Business\")\n\nReading layer `Business' from data source \n  `C:\\PeiShan0502\\ISSS624\\In-class_Ex4\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(business_sf) +\n  tm_dots()\n\nWarning: The shape mpsz is invalid. See sf::st_is_valid\n\n\n\n\n\n\nmpsz$`BUSINESS_COUNT`&lt;- lengths(\n  st_intersects(\n    mpsz, business_sf))\n\n\nsummary(mpsz$BUSINESS_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    2.00   19.73   13.00  307.00 \n\n\nNow, we bring in the flow_data.rds saved after Hands-on Exercise 3:\n\nflow_data &lt;- read_rds(\"data/rds/flow_data.rds\")\nflow_data\n\nNotice that this is an sf tibble data.frame and the features are polylines linking the centroid of origins and destination planning subzone.\nappend SCHOOL_COUNT and BUSINESS_COUNT into flow_data sf tibble data.frame:\n\nmpsz_tidy &lt;- mpsz %&gt;%\n  st_drop_geometry() %&gt;%\n  select(SUBZONE_C, SCHOOL_COUNT, BUSINESS_COUNT)\n\nNow, we will append SCHOOL_COUNT and BUSINESS_COUNT fields from mpsz_tidy data.frame into flow_data sf tibble data.frame by using the code chunk below.\n\nflow_data &lt;- flow_data %&gt;%\n  left_join(mpsz_tidy,\n            by = c(\"DESTIN_SZ\" = \"SUBZONE_C\")) %&gt;%\n  rename(TRIPS = MORNING_PEAK,\n         DIST = dist)\n\n\nChecking for variables with zero values\nSince Poisson Regression is based of log and log 0 is undefined, it is important for us to ensure that no 0 values in the explanatory variables.\nIn the code chunk below, summary() of Base R is used to compute the summary statistics of all variables in wd_od data frame.\n\nsummary(flow_data)\n\nThe print report above reveals that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64, DESTIN_AGE7_12, DESTIN_AGE13_24, DESTIN_AGE25_64 consist of 0 values.\nIn view of this, code chunk below will be used to replace zero values to 0.99.\n\nflow_data$SCHOOL_COUNT &lt;- ifelse(\n  flow_data$SCHOOL_COUNT == 0,\n  0.99, flow_data$SCHOOL_COUNT)\nflow_data$BUSINESS_COUNT &lt;- ifelse(\n  flow_data$BUSINESS_COUNT == 0,\n  0.99, flow_data$BUSINESS_COUNT)\n\n\nsummary(flow_data)\n\nNotice that all the 0 values have been replaced by 0.99.\nBefore we move on to calibrate the Spatial Interaction Models, let us save flow_data sf tibble data.frame into an rds file. Call the file flow_data_tidy.\n\nwrite_rds(flow_data,\n          \"data/rds/flow_data_tidy.rds\")"
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4B.html",
    "href": "In-class_Ex4/In-class_Ex4B.html",
    "title": "In-class Exercise 4B: Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "This in-class exercise is a continuation of Hands-on Exercise 3, In-class Exercise 3 and In-class Exercise 4: Preparing Spatial Interaction Modelling Variables. We will continue our journey of calibrating Spatial Interaction Models by using propulsiveness and attractiveness variables prepared in earlier in-class exercise."
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4B.html#overview",
    "href": "In-class_Ex4/In-class_Ex4B.html#overview",
    "title": "In-class Exercise 4B: Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "This in-class exercise is a continuation of Hands-on Exercise 3, In-class Exercise 3 and In-class Exercise 4: Preparing Spatial Interaction Modelling Variables. We will continue our journey of calibrating Spatial Interaction Models by using propulsiveness and attractiveness variables prepared in earlier in-class exercise."
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4B.html#getting-started",
    "href": "In-class_Ex4/In-class_Ex4B.html#getting-started",
    "title": "In-class Exercise 4B: Calibrating Spatial Interaction Models with R",
    "section": "Getting Started",
    "text": "Getting Started\nFor the purpose of this exercise, five R packages will be used. They are:\n\nsf for importing, integrating, processing and transforming geospatial data.\ntidyverse for importing, integrating, wrangling and visualising data.\ntmap for plotting cartographic quality thematic maps.\nperformance for computing model comparison matrices such as rmse.\nggpubr for creating publication quality statistical graphics.\n\n\npacman::p_load(tmap, sf, performance, knitr,\n               ggpubr, tidyverse)"
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4B.html#the-data",
    "href": "In-class_Ex4/In-class_Ex4B.html#the-data",
    "title": "In-class Exercise 4B: Calibrating Spatial Interaction Models with R",
    "section": "The Data",
    "text": "The Data\nThis exercise is a continuation of Hands-on Exercise 3 and In-class Exercise 4: Preparing Spatial Interaction Modelling Variables. The following data will be used:\n\nflow_data_tidy.rds, weekday morning peak passenger flows at planning subzone level.\nmpsz.rds, URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.\n\n\nflow_data &lt;- read_rds(\"data/rds/flow_data_tidy.rds\")\n\n\nglimpse(flow_data)\n\nRows: 14,734\nColumns: 13\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ MORNING_PEAK    &lt;dbl&gt; 1998, 8289, 8971, 2252, 6136, 2148, 1620, 1925, 1773, …\n$ dist            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310.00, 1140.00, 1010.00, 980.00, 810.00, 1050.00, 420…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710.00, 2770.00, 2650.00, 2000.00, 1920.00, 2390.00, 1…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780.00, 15700.00, 14240.00, 11320.00, 9650.00, 12460.…\n$ SCHOOL_COUNT    &lt;dbl&gt; 0.99, 2.00, 2.00, 1.00, 3.00, 2.00, 0.99, 0.99, 3.00, …\n$ RETAIL_COUNT    &lt;dbl&gt; 1.00, 0.99, 6.00, 0.99, 0.99, 0.99, 1.00, 117.00, 0.99…\n$ geometry        &lt;LINESTRING [m]&gt; LINESTRING (29501.77 39419...., LINESTRING …\n\n\nNotice that this sf tibble data.frame includes two additional fields namely: SCHOOL_COUNT and BUSINESS_COUNT (but above output shows RETAIL_COUNT?). Both of them will be used as attractiveness variables when calibrating origin constrained SIM.\nThe code chunk below is used to display the first five columns and rows of flow_data.\n\nkable(head(flow_data[, 1:5], n = 5))\n\n\n\n\n\n\n\n\n\n\n\n\nORIGIN_SZ\nDESTIN_SZ\nMORNING_PEAK\ndist\nORIGIN_AGE7_12\ngeometry\n\n\n\n\nAMSZ01\nAMSZ01\n1998\n50.0000\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ02\n8289\n810.4491\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ03\n8971\n1360.9294\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ04\n2252\n840.4432\n310\nLINESTRING (29501.77 39419….\n\n\nAMSZ01\nAMSZ05\n6136\n1076.7916\n310\nLINESTRING (29501.77 39419….\n\n\n\n\n\nNotice that this data frame include intra-zonal flow.\n\nPreparing inter-zonal flow data\nIn general, we will calibrate separate Spatial Interaction Models for inter- and intra-zonal flows. In this hands-on exercise, we will focus our attention on inter-zonal flow. Hence, we need to exclude the intra-zonal flow from flow_data.\nFirst, two new columns called FlowNoIntra and offset will be created by using the code chunk below.\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)\n\nAccording to the syntax used to derive values in FlowNoIntra field, all intra-zonal flow will be given a value of 0 or else the original flow values will be inserted.\nNext, inter-zonal flow will be selected from flow_data and save into a new output data.frame called inter_zonal_flow by using the code chunk below.\n\ninter_zonal_flow &lt;- flow_data %&gt;%\n  filter(FlowNoIntra &gt; 0)\n\nWe are ready to calibrate the Spatial Interaction Models now."
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4B.html#calibrating-spatial-interaction-models",
    "href": "In-class_Ex4/In-class_Ex4B.html#calibrating-spatial-interaction-models",
    "title": "In-class Exercise 4B: Calibrating Spatial Interaction Models with R",
    "section": "Calibrating Spatial Interaction Models",
    "text": "Calibrating Spatial Interaction Models\nIn this section, we will focus on calibrating an origin constrained SIM and a doubly constrained by using flow_data prepared. This complements what we have learned in Hands-on Exercise 3.\n\nOrigin- (Production-) constrained Model\nCode chunk below shows the calibration of the model by using glm() of R and flow_data.\nWhat to learn from the code chunk below:\n\nFor origin-constrained model, only explanatory variables representing the attractiveness at the destinations will be used.\nAll the explanatory variables including distance will be log transformed.\nORIGIN_SZ is used to model 𝜇𝑖 . It must be in categorical data type.\nIt is important to note that -1 is added in the equation after the distance variable. The -1 serves the purpose of removing the intercept that by default, glm will insert into the model.\n\n\norcSIM_Poisson &lt;- glm(formula = TRIPS ~ \n                ORIGIN_SZ +\n                log(SCHOOL_COUNT) +\n                log(BUSINESS_COUNT) +\n                log(DIST) - 1,\n              family = poisson(link = \"log\"),\n              data = inter_zonal_flow,\n              na.action = na.exclude)\nsummary(orcSIM_Poisson)\n\nFrom the report above:\n\nthe ⍺1 and ⍺2 of SCHOOL_COUNT and BUSINESS_COUNT are 0.4755516 and 0.1796905 respectively.\n𝛽, the distance decay parameter is -1.6929522\nthere are a series of parameters which are the vector of 𝜇𝑖 values associated with the origin constraints.\n\n\n\nGoodness of fit\nIn statistical modelling, the next question we would like to answer is how well the proportion of variance in the dependent variable (i.e. TRIPS) that can be explained by the explanatory variables.\nIn order to provide answer to this question, R-squared statistics will be used. However, R-squared is not an output of glm(). Hence we will write a function called CalcRSquared by using the code chunk below.\n\nCalcRSquared &lt;- function(observed, estimated){\n  r &lt;- cor(observed, estimated)\n  R2 &lt;- r^2\n  R2\n}\n\nNow, we can examine how the constraints hold for destinations this time.\n\nCalcRSquared(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values)\n\nWith reference to the R-Squared above, we can conclude that the model accounts for about 44% of the variation of flows in the systems. \n\n\nDoubly constrained model\nIn this section, we will fit a doubly constrained SIM using the code chunk below:\n\ndbcSIM_Poisson &lt;- glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ +\n                log(DIST),\n              family = poisson(link = \"log\"),\n              data = inter_zonal_flow,\n              na.action = na.exclude)\nsummary(dbcSIM_Poisson)\n\nNote about the above code chunk: It is important to note that there is a slight change of the code chunk. I have removed the -1 which means that an intercept will appear in the model again. This is not because I want an intercept as it makes the origin and destination coefficients harder to interpret, rather the -1 cheat for removing the intercept only works with one factor level but in double-constrained model we have two factor levels, namely: origins and destinations.\nNow, let us examine how well the proportion of variance in the dependent variable (i.e. TRIPS) that can be explained by the explanatory variables. (using R-Squared value)\n\nCalcRSquared(dbcSIM_Poisson$data$TRIPS,\n             dbcSIM_Poisson$fitted.values)\n\nNotice that there is a relatively greater improvement in the R-Squared value."
  },
  {
    "objectID": "In-class_Ex4/In-class_Ex4B.html#model-comparison",
    "href": "In-class_Ex4/In-class_Ex4B.html#model-comparison",
    "title": "In-class Exercise 4B: Calibrating Spatial Interaction Models with R",
    "section": "Model comparison",
    "text": "Model comparison\n\nStatistical measures\nAnother useful model performance measure for continuous dependent variable is Root Mean Squared Error. In this sub-section, we will learn how to use compare_performance() of performance package.\nFirst of all, let us create a list called model_list by using the code chunk below.\n\nmodel_list &lt;- list(\n  Origin_Constrained = orcSIM_Poisson,\n  Doubly_Constrained = dbcSIM_Poisson)\n\nNext, we will compute the RMSE of all the models in model_list file by using the code chunk below.\n\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\nThe print above reveals that doubly constrained SIM is the best model among the two SIMs because it has the smallest RMSE value of 1906.694.\n\n\nVisualising fitted values\nIn this section, you will learn how to visualise the observed values and the fitted values.\nFirstly we will extract the fitted values from Origin-constrained Model by using the code chunk below.\n\ndf &lt;- as.data.frame(orcSIM_Poisson$fitted.values) %&gt;%\n  round(digits = 0)\n\nNext, we will append the fitted values into inter_zonal_flow data frame by using the code chunk below.\n\ninter_zonal_flow &lt;- inter_zonal_flow %&gt;%\n  cbind(df) %&gt;%\n  rename(orcTRIPS = \"orcSIM_Poisson.fitted.values\")\n\nNotice that rename() is used to rename the field name and the $ in the original field name has been replaced with an .. This is because R replaced $ with . during the cbind().\nNext, we also extract the fitted values from the Doubly Constrained Model:\n\ndf &lt;- as.data.frame(dbcSIM_Poisson$fitted.values) %&gt;%\n  round(digits = 0)\n\n\ninter_zonal_flow &lt;- inter_zonal_flow %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM_Poisson.fitted.values\")\n\nNext, two scatterplots will be created by using geom_point() and other appropriate functions of ggplot2 package.\n\norc_p &lt;- ggplot(data = inter_zonal_flow,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  coord_cartesian(xlim=c(0,150000),\n                  ylim=c(0,150000))\n\ndbc_p &lt;- ggplot(data = inter_zonal_flow,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  coord_cartesian(xlim=c(0,150000),\n                  ylim=c(0,150000))\n\nNow, we will put all the graphs into a single visual for better comparison by using the code chunk below.\n\nggarrange(orc_p, dbc_p,\n          ncol = 2,\n          nrow = 1)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I learn how to import and wrangle geospatial data using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#overview",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#overview",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I learn how to import and wrangle geospatial data using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#getting-started",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#getting-started",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Getting Started",
    "text": "Getting Started\nIn this hands-on exercise, two R packages will be used. They are:\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data (not specific to geospatial data).\n\nThe code chunk below installs and load sf and tidyverse packages into R environment.\n\npacman::p_load(sf, tidyverse)\n\nFurthermore, the tidyverse package consists of a family of R packages. In this hands-on exercise, the following packages will be used:\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\nNote: In the above code chunk, p_load function pf pacman package is used to install and load sf and tidyverse packages into R environment."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#data-sources",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#data-sources",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Data Sources",
    "text": "Data Sources\nWe will extract the following data sets from these sources:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\n\nExtracting the geospatial data sets\nAt the Hands-on_Ex1 folder, we create a sub-folder called data. Then, inside the data sub-folder, we create two sub-folders and name them geospatial and aspatial respectively.\nWe place Master Plan 2014 Subzone Boundary (Web), Pre-Schools Location, and Cycling Path zipped files into the geospatial sub-folder and unzip them. Then, copy the unzipped files from their respective sub-folders and place them inside geospatial sub-folder.\n\n\nExtracting the aspatial data set\nWe place the Singapore AirBnB listing data (listing.csv) into the aspatial sub-folder."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#importing-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\nIn this section, we will learn how to import the following geospatial data into R by using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\nImporting polygon feature data\nThe code chunk below uses st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame. When the input geospatial data is in shapefile format, two arguments will be used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\nNo extension such as .shp, .dbf, .prj and .shx are needed.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\PeiShan0502\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe message above reveals that the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinates systems. The bounding box provides the x extend and y extend of the data.\n\n\nImporting polyline feature data in shapefile form\nThe code chunk below uses st_read() function of sf package to import Cycling Path shapefile into R as line feature data frame.\n\ncyclingpath = st_read(dsn = 'data/geospatial', \n                      layer = 'CyclingPathGazette')\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\PeiShan0502\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe message above reveals that there are a total of 2558 features and 2 fields in cyclingpath linestring feature data frame and it is in svy21 projected coordinates system too.\n\n\nImporting GIS data in kml format\nThe PreSchoolsLocation is in kml format. The code chunk below will be used to import it into R. Notice that the kml file extension is provided:\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\PeiShan0502\\ISSS624\\Hands-on_Ex1\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThe message above reveals that preschool is a point feature data frame. There are a total of 2290 features and 2 fields. preschool is also in wgs84 coordinates system (different from the previous two simple feature data frame)."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Checking the Content of a Simple Feature Data Frame",
    "text": "Checking the Content of a Simple Feature Data Frame\nIn this sub-section, we will look at different ways to retrieve information related to the content of a single feature data frame.\n\nWorking with st_geometry()\nThe column in the sf data frame that contains the geometries is a list, of class sfc. We can retrieve this list by using st_geometry() as shown in the code chunk below:\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n\nWorking with glimpse()\nWe use glimpse() of the dplyr package to learn more about the associated attribute information in the data frame:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() report reveals the data type of each fields. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\nWorking with head()\nWe use head() to reeal complete information of a feature object:\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nNote: n=5 specifies the number of records to display."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Plotting the Geospatial Data",
    "text": "Plotting the Geospatial Data\nIn geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. We use plot() of R Graphic to do this:\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below:\n\nplot(st_geometry(mpsz))\n\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below:\n\nplot(mpsz['PLN_AREA_N'])\n\n\n\n\nNote: plot() is meant for plotting the geospatial object for quick look."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#working-with-projection",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#working-with-projection",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Working with Projection",
    "text": "Working with Projection\nTo perform geoprocessing using two geospatial data, need to ensure both geospatial data are projected using similar coordinate system.\nHere we will learn how to project a simple feature data frame from one coordinate system to another coordinate system. This is known as projection transformation.\n\nAssigning EPSG code to a simple feature data frame\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nThis is an example the coordinate system of mpsz simple feature data frame by using st_crs() of sf package as shown in the code chunk below:\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.\nIn order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below:\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nThen let’s check the CSR again:\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is 3414 now.\n\n\nTransforming the projection of preschool from wgs84 to svy21\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nLet us take preschool simple feature data frame as an example. Running the code chunk below reveals that it is in wgs84 coordinate system:\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.8072 1.299333 0)\n\n\nPOINT Z (103.826 1.312839 0)\n\n\nPOINT Z (103.8409 1.348843 0)\n\n\nPOINT Z (103.8048 1.435024 0)\n\n\nPOINT Z (103.839 1.33315 0)\n\n\nThis is a scenario that st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathematically.\nLet us perform the projection transformation by using the code chunk below:\n\npreschool3414 &lt;- st_transform(preschool, crs = 3414)\n\nNow displaying the content of preschool3414 sf data frame by running the code chunk below:\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (25089.46 31299.16 0)\n\n\nPOINT Z (27189.07 32792.54 0)\n\n\nPOINT Z (28844.56 36773.76 0)\n\n\nPOINT Z (24821.92 46303.16 0)\n\n\nPOINT Z (28637.82 35038.49 0)\n\n\nNotice that it is in svy21 projected coordinate system now."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Importing and Converting An Aspatial Data",
    "text": "Importing and Converting An Aspatial Data\nFor the Singapore Airbnb listing data, this is aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\nWe will learn how to import an aspatial data into R environment and save it as a tibble data frame. Then convert it into a simple feature data frame.\nThe listings.csv data downloaded from Airbnb will be used.\n\nImporting the aspatial data\nSince listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.\n\nlistings &lt;- read_csv('data/aspatial/listings.csv')\n\nRows: 3483 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() of Base R instead of glimpse() is used to do the job.\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,483 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,473 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nThe output reveals that listing tibble data frame consists of 3,483 rows and 18 columns. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.\n\n\nCreating a simple feature data frame from an aspatial data frame\nThis converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages:\n\nlistings_sf &lt;- st_as_sf(listings, coords = c('longitude', 'latitude'),\n                        crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nUseful notes:\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%&gt;% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\nWe examine the content of this newly created simple feature data frame:\n\nglimpse(listings_sf)\n\nRows: 3,483\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 55, 69, 220, 85, 75, 45, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 133, 18, 6, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0.12, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52, 52, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 89, 89, 89, 275, 274, 89, 365, 365, 365…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nNotice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\nIn this section, you will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.\n\nBuffering\nConsider the following scenario: The authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. You are tasked to determine the extent of the land required to be acquired and their total area.\nSolution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, dist=5, nQuadSegs = 30)\n\nThen we calculate the area of the buffers:\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nLastly, derive the total land involved:\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\nMission Accomplished!!! ^_^\n\n\nPoint-in-polygon count\nHow to find the number of pre-schools in each Planning Subzone?\nThe code chunk below first identifies pre-schools located inside each planning subzone by using st_intersects(), then length() is used to calculate the number of pre-schools that fall inside each planning subzone.\n\nmpsz3414$`PreSch Count` &lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\nNote: don’t confuse with st_intersection().\nTo check summary statistics of the newly derived PreSch Count field:\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning subzone with the most number of pre-schools, the top_n() of dplyr package is used:\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nTo calculate the density of pre-schools by planning subzone:\n\nDerive the area of each planning subzone\n\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\n\nCompute the density by using mutate() of dplyr package:\n\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nHere, we will learn how to use appropriate ggplot2 functions to create graphs for EDA purposes.\nFirstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown in the code chunk below.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nThis is easy to use but the output is far from presentable and this function has limited room for further customisation.\nIn the code chunk below, we use appropriate ggplot2 functions:\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-schools even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\nWe use ggplot2 method to plot a scatterplot showing the relationship between Pre-school Density and Pre-school count:\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html",
    "title": "Hands-on Exercise 1B: Chloropeth Mapping with R",
    "section": "",
    "text": "Choropleth mapping is used to symbolise countries/provinces/states/countries using area patterns/graduated colours. E.g. portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, we will learn to plot choropleth maps using tmap package."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#what-is-choropleth-mapping",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#what-is-choropleth-mapping",
    "title": "Hands-on Exercise 1B: Chloropeth Mapping with R",
    "section": "",
    "text": "Choropleth mapping is used to symbolise countries/provinces/states/countries using area patterns/graduated colours. E.g. portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, we will learn to plot choropleth maps using tmap package."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#getting-started",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#getting-started",
    "title": "Hands-on Exercise 1B: Chloropeth Mapping with R",
    "section": "Getting Started",
    "text": "Getting Started\nBeside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nSince readr, tidyr, and dplyr are part of tidyverse package, we only need to install tidyverse instead of installing them individually.\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#importing-data-into-r",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#importing-data-into-r",
    "title": "Hands-on Exercise 1B: Chloropeth Mapping with R",
    "section": "Importing Data into R",
    "text": "Importing Data into R\n\nThe Data\nThese data sets will be used to create the choropleth map:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. This is geospatial data, consisting of the geographical boundary of Singapore at the planning subzone level.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data file, it doesn’t contain any coordinate values but it’s PA and SZ values can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\nImporting Geospatial Data into R\nWe use the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\PeiShan0502\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWe examine the content of mpsz:\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\nImporting Attribute Data into R\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popdata.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nData Preparation\nWe need to first prepare a data table with year 2020 values. The data table should include the following variables:\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\nPA\nSZ\n\n\nData wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nJoining the attribute data and geospatial data\nWe need to convert the values in PA and SZ fields to uppercase, because the SUBZONE_N and PLN_AREA_N fields are in uppercase:\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nThen, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nIn the above code chunk, left_join() of dplyr package is used with mpsz simple feature data frame as the left data table to ensure that the output will be a simple features data frame.\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1B: Chloropeth Mapping with R",
    "section": "Choropleth Mapping Geospatial Data using tmap",
    "text": "Choropleth Mapping Geospatial Data using tmap\n\nPlotting a choropleth map quickly by using qtm()\nThe code chunk below will draw a standard choropleth map:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\nCreating a choropleth map by using tmap’s elements\nAlthough qtm() is very useful for drawing a choropleth map quickly and easily, the disadvantage is that it is harder to customise the aesthetics of individual layers. To do so, we use tmap’s drawing elements:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nNext, we will learn about tmap functions used to plot these elements.\n\nDrawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elements such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e., mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons:\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nNote: by default, missing value will be shaded in grey.\n\n\nDrawing a choropleth map using tm_fill() and tm_border()\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependency values.\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\nData classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\nPlotting choropleth maps with built-in classification methods\nThis is quantile data classification that used 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIn the code chunk below, equal data classification is used:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nYou may notice that the distribution of quantile data classification method is more evenly distributed than equal data classification method.\n\n\nPlotting choropleth map with custom break\nTo override default category breaks. The breakpoints can be set explicitly using the breaks argument in tm_fill(). The breaks include a minimum and maximum, so to end up with n categories, n+1 elements must be specified in the breaks option (values must be in ascending order).\nlet’s get some descriptive statistics of the DEPENDENCY field first before setting the break points:\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nBased on the descriptive stats, let’s set break point at 0.60, 0.70, 0.80, and 0.90. also let’s set minimum and maximum to be 0 and 1.00 respectively. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow we plot the choropleth map accordingly:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\nColour Scheme\n\nUsing ColourBrewer palette\nAssign preferred colour to palette argument of tm_fill():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nTo reverse the colour shading, add a “-” prefix:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nMap Layouts\n\nRefers to combination of all map elements into a cohesive map\nMap elements: e.g. objects to be mapped, title, scale bar, compass, margins, aspects ratios\nColour settings and data classification methods covered in previous section relate to the palette and break-points are used to affect how the map used.\n\n\nMap Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\nCartographic Furniture\ntmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset the default style:\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nDrawing Small Multiple Choropleth Maps\n\nMany maps arranged side-by-side, sometimes stacked vertically.\nEnable visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the aesthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\nBy assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\nBy defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\nBy creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\nMapping Spatial Object Meeting a Selection Criterion\ncan also use selection function to map spatial objects meeting the selection criterion:\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n\n\n\n\n\nThank you for reading! :)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#overview",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#overview",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#getting-started",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#getting-started",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\n\nThe analytical question\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Province, People Republic of China.\n\n\nThe Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\nSetting the Analytical Tools\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "Getting the Data Into R Environment",
    "text": "Getting the Data Into R Environment\nThe geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\nImport shapefile into R environment\nuses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\PeiShan0502\\ISSS624\\Hands-on_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImport csv file into R environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nupdate the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n\nVisualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#global-spatial-autocorrelation",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\nWe will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\nComputing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\nRow-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\nFor this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\nGlobal Spatial Autocorrelation: Moran’s I\nhow to perform Moran’s I statistics testing by using moran.test() of spdep.\n\n\nMaron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\nComputing Monte Carlo Moran’s I\nThis performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulations will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualising Monte Carlo Moran’s I\nPlot the distribution of the statistical values as a histogram.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\nGlobal Spatial Autocorrelation: Geary’s\nhow to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\nGeary’s C test\nThis performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\nComputing Monte Carlo Geary’s C\nThis performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values:\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#spatial-correlogram",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#spatial-correlogram",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\nCompute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nCompute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nSimilar to the previous step, we will print out the analysis report:\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "We will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#overview",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#overview",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "We will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#getting-started",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#getting-started",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\n\nThe analytical question\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Province, People Republic of China.\n\n\nThe Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\nSetting the Analytical Tools\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Getting the Data Into R Environment",
    "text": "Getting the Data Into R Environment\nThe geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\nImport shapefile into R environment\nuses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\PeiShan0502\\ISSS624\\Hands-on_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImport csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n\nVisualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#global-spatial-autocorrelation",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\nIn this section, we will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\nComputing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. you can pass a “queen” argument that takes TRUE or FALSE as options. the default is set to TRUE, so if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\nRow-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\nFor this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\nGlobal Spatial Autocorrelation: Moran’s I\nWe will learn how to perform Moran’s I statistics testing by using moran.test() of spdep.\n\n\nMaron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\nComputing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulations will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualising Monte Carlo Moran’s I\nWe plot the distribution of the statistical values as a histogram to examine the simulated Moran’s I test statistics in greater detail.\nhist() and abline() of R Graphics are used:\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\nGlobal Spatial Autocorrelation: Geary’s\nHere, we will learn how to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\nGeary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\nComputing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#spatial-correlogram",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#spatial-correlogram",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\nCompute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nCompute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nSimilar to the previous step, we will print out the analysis report:\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city, local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\nComputing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nMapping the local Moran’s I\nBefore mapping the local Moran’s I map, we should append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\nMapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chunks below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nMapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations colour coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC.\n\n\nPlotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05       \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combine all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\nPlotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nBesides detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\n\nGetis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nDeriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\nDeriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object:\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#computing-gi-statistics",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#computing-gi-statistics",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Computing Gi statistics",
    "text": "Computing Gi statistics\n\nGi statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\nMapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nGi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  }
]